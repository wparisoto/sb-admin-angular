{"version":3,"sources":["webpack:///./node_modules/@ng-bootstrap/ng-bootstrap/fesm5/ng-bootstrap.js"],"names":[],"mappingsa;AAC7Q;AAC9E;AACA;AACe;AAChC;;AAE9D;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,yBAAyB,SAAS;AAClC;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,gCAAgC;AAChC;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB;AACzD;AACA,4DAA4D,sEAAgB,EAAE,iDAAiD,iCAAiC,EAAE,iDAAiD;AACnN;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU,yCAAyC;AAC5E;AACA;AACA,gDAAgD;AAChD,SAAS,OAAO,yDAAW;AAC3B,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU,2CAA2C;AAC9E;AACA;AACA,kDAAkD;AAClD,SAAS,OAAO,yDAAW;AAC3B,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2DAA2D,mBAAmB;AAC9E,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU,wBAAwB;AAC3D;AACA;AACA,oBAAoB,OAAO,mDAAK,EAAE;AAClC,cAAc,OAAO,mDAAK,EAAE;AAC5B,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,qBAAqB,OAAO,6DAAe,yBAAyB,qBAAqB,IAAI;AAC7F,uBAAuB,OAAO,6DAAe,2BAA2B,qBAAqB,IAAI;AACjG;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0DAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,6CAA6C;AACrE;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,2DAA2D;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,4CAA4C,EAAE;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,4DAA4D;AACpF;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,8CAA8C,sCAAsC,EAAE;AACtF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,iFAAiF,EAAE;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,mCAAmC,uEAAuE,2BAA2B,EAAE,EAAE;AACzI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,uCAAuC,yBAAyB,EAAE,EAAE;AAC5F;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,8DAA8D,wCAAwC,EAAE,wBAAwB,iBAAiB,EAAE;AACnJ;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA,2BAA2B,8FAA8F;AACzH,sJAAsJ,UAAU,kZAAkZ,aAAa,4JAA4J,UAAU;AACruB,iBAAiB;AACjB;AACA;AACA,+CAA+C;AAC/C,SAAS;AACT,MAAM;AACN;AACA,kBAAkB,OAAO,6DAAe,qBAAqB;AAC7D,qBAAqB,OAAO,mDAAK,EAAE;AACnC,4BAA4B,OAAO,mDAAK,0BAA0B;AAClE,yBAAyB,OAAO,mDAAK,EAAE;AACvC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,uBAAuB,OAAO,oDAAM,EAAE;AACtC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,SAAS,gCAAgC;AAC1D;AACA,SAAS,OAAO,sDAAQ,UAAU,sFAAsF,4DAAY,GAAG;AACvI;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB;AACzD;AACA,wDAAwD,sEAAgB,EAAE,6CAA6C,6BAA6B,EAAE,6CAA6C;AACnM;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,uBAAuB;AACxC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,4EAA4E;AAC7F;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,qCAAqC,qEAAuB;AAC5D,mCAAmC,+DAAiB;AACpD,2BAA2B,gFAAgF;AAC3G,0OAA0O;AAC1O,wCAAwC,cAAc;AACtD,iBAAiB;AACjB;AACA;AACA,2CAA2C;AAC3C,SAAS,uBAAuB;AAChC,SAAS,OAAO,uDAAS,EAAE;AAC3B,SAAS,OAAO,wDAAU;AAC1B,MAAM;AACN;AACA,uBAAuB,OAAO,mDAAK,EAAE;AACrC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,iBAAiB,OAAO,oDAAM,EAAE;AAChC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,SAAS,4BAA4B;AACtD;AACA,SAAS,OAAO,sDAAQ,UAAU,0DAA0D,4DAAY,gCAAgC;AACxI;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,2BAA2B;AAC3B,iBAAiB;AACjB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb;AACA,aAAa,gEAAiB;AAC9B,iBAAiB,gEAAU,cAAc,oBAAoB,EAAE;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,sCAAsC;AACtC;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,oBAAoB;AACvC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,qBAAqB;AACxC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA,8CAA8C;AAC9C,SAAS;AACT,MAAM;AACN;AACA,oBAAoB,OAAO,mDAAK,EAAE;AAClC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,0BAA0B,OAAO,mDAAK,EAAE;AACxC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb;AACA,aAAa,gEAAiB;AAC9B,iBAAiB,gEAAU,cAAc,sBAAsB,EAAE;AACjE;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,sCAAsC;AACtC;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,uBAAuB,EAAE;AAC9C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,+BAA+B,mCAAmC,EAAE;AACpE;AACA;AACA,KAAK;AACL;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,2BAA2B;AAC5C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,yBAAyB;AAC/C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,oBAAoB;AACvC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,qBAAqB;AACxC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,4BAA4B;AAClD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,+CAA+C,wCAAwC,EAAE;AACzF;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,wCAAwC,+BAA+B,EAAE,EAAE;AAC5F;AACA,SAAS,OAAO,uDAAS,UAAU,qCAAqC,kBAAkB,yCAAyC;AACnI;AACA;AACA,gBAAgB,OAAO,mDAAK,EAAE;AAC9B;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,oBAAoB,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,+CAA+C,EAAE;AACtE;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,sBAAsB,EAAE;AAC7C;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,sCAAsC,EAAE;AAC7D;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,8BAA8B;AAC/C;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,iCAAiC;AAClD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,sCAAsC;AACvD;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,2CAA2C;AAC3C,SAAS,sBAAsB;AAC/B,SAAS,uBAAuB;AAChC,SAAS,OAAO,uDAAS,EAAE;AAC3B,SAAS,OAAO,wDAAU;AAC1B,MAAM;AACN;AACA,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,iBAAiB,OAAO,mDAAK,oBAAoB;AACjD,oBAAoB,OAAO,mDAAK,uBAAuB;AACvD;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,SAAS,8BAA8B;AACxD;AACA,SAAS,OAAO,sDAAQ,UAAU,sEAAsE;AACxG;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB;AACzD;AACA,2DAA2D,sEAAgB,EAAE,gDAAgD,gCAAgC,EAAE,gDAAgD;AAC/M;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU,oCAAoC;AACvE;AACA;AACA,2CAA2C;AAC3C,SAAS,OAAO,yDAAW;AAC3B,MAAM;AACN;AACA,cAAc,OAAO,mDAAK,EAAE;AAC5B;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC,0BAA0B,4CAAO;AACjC;AACA;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,YAAY,yEAAiB;AAC7B;AACA;AACA,0BAA0B,0DAAG,cAAc,uBAAuB,EAAE,GAAG,6DAAM,sBAAsB,gDAAgD,EAAE,GAAG,gEAAS,sBAAsB,QAAQ,kDAAK,gBAAgB,gEAAS,gBAAgB,EAAE;AAC/O,4CAA4C,uCAAuC,qBAAqB,EAAE,EAAE,EAAE;AAC9G;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,oBAAoB;AACrC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,sFAAsF;AAC9G;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,wFAAwF;AACzG;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,uFAAuF;AACxG;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,qBAAqB;AACtC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,6BAA6B,uEAAuE;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,2CAA2C,6BAA6B,EAAE,EAAE;AACpG;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA,qCAAqC,qEAAuB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,sPAAsP;AACtP,iBAAiB;AACjB;AACA;AACA,8CAA8C;AAC9C,SAAS,0BAA0B;AACnC,SAAS,gCAAgC,OAAO,oDAAM,SAAS,yDAAW,IAAI,GAAG;AACjF,SAAS,OAAO,oDAAM,EAAE;AACxB,SAAS,OAAO,+DAAiB;AACjC,MAAM;AACN;AACA,kBAAkB,OAAO,6DAAe,qBAAqB;AAC7D,oBAAoB,OAAO,mDAAK,EAAE;AAClC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,oBAAoB,OAAO,mDAAK,EAAE;AAClC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,gCAAgC,OAAO,mDAAK,EAAE;AAC9C,oCAAoC,OAAO,mDAAK,EAAE;AAClD,iBAAiB,OAAO,oDAAM,EAAE;AAChC;AACA;AACA,CAAC;AACD,WAAW,OAAO;AAClB;AACA,sBAAsB,EAAE;AACxB,uBAAuB,EAAE;AACzB;AACA,WAAW,EAAE;AACb;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,SAAS,+BAA+B;AACzD;AACA,SAAS,OAAO,sDAAQ,UAAU,oFAAoF,4DAAY,GAAG;AACrI;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA,2BAA2B;AAC3B,iBAAiB;AACjB;AACA;AACA,qBAAqB,OAAO,mDAAK,0BAA0B;AAC3D;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,SAAS,+BAA+B;AACzD;AACA,SAAS,OAAO,sDAAQ,UAAU,sDAAsD;AACxF;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F;AAC1F,wBAAwB;AACxB;AACA;AACA,0FAA0F;AAC1F,wBAAwB;AACxB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,0FAA0F;AAC1F,wBAAwB;AACxB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,kEAAkE;AACtG;AACA,qDAAqD,sEAAgB,EAAE,mFAAmF;AAC1J;AACA,CAAC;AACD;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,UAAU;AAC3B;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,gDAAgD;AACjE;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,UAAU;AAC3B;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,gCAAgC,cAAc;AAC9C,gCAAgC,YAAY;AAC5C,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,gCAAgC,cAAc;AAC9C,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,sEAAsE;AACtE;AACA,mBAAmB,EAAE;AACrB;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,+BAA+B;AAChD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,qCAAqC;AAClF;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,mBAAmB,EAAE;AACrB,uDAAuD,gCAAgC,EAAE;AACzF;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,uDAAuD,gCAAgC,EAAE;AACzF;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,uBAAuB,0BAA0B,mBAAmB,kBAAkB,EAAE;AACxF;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,eAAe,EAAE;AACjB,iCAAiC,wBAAwB;AACzD,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wEAAwE,0CAA0C,EAAE;AACpH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,0GAA0G,EAAE,OAAO;AACnH;AACA,KAAK;AACL;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,2BAA2B,qBAAqB,EAAE,OAAO,GAAG;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oCAAoC;AAC1D,mBAAmB,EAAE;AACrB;AACA;AACA,8CAA8C;AAC9C;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,yBAAyB,iCAAiC;AAC1D;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,kDAAkD,wCAAwC;AAC1F;AACA;AACA,uBAAuB,EAAE;AACzB,8EAA8E,wCAAwC;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,oDAAoD,EAAE,OAAO;AAC7D;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,4EAA4E,iBAAiB,EAAE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,kBAAkB;AACvC;AACA,SAAS,OAAO,wDAAU,UAAU,oEAAoE,uDAAS,GAAG;AACpH;AACA,2DAA2D,sEAAgB,EAAE,gDAAgD,mCAAmC,4DAAM,CAAC,uDAAS,GAAG,EAAE,gDAAgD;AACrO;AACA,CAAC;AACD;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,uCAAuC,yEAAiB,UAAU,yDAAS,aAAa,gEAAgB;AACxG,mFAAmF,kDAAkD,EAAE;AACvI,6BAA6B,2EAAmB,UAAU,yDAAS,aAAa,gEAAgB;AAChG,4BAA4B,2EAAmB,UAAU,yDAAS,aAAa,gEAAgB;AAC/F;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,yCAAyC;AACjE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,qCAAqC;AAC3D;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,oCAAoC;AAC1D;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,eAAe,kEAAU;AACzB;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,2DAA2D;AAC3D,SAAS,6BAA6B,OAAO,oDAAM,SAAS,uDAAS,IAAI;AACzE,MAAM;AACN;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC,4BAA4B,4CAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wBAAwB;AAClD;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,0BAA0B,6DAAM,mBAAmB,gCAAgC,EAAE,GAAG,EAAE;AAC/G;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,2BAA2B,6DAAM,kBAAkB,sBAAsB,EAAE,GAAG,EAAE;AACrG;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,iCAAiC,mCAAmC;AACpE;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,iCAAiC,qBAAqB;AACtD;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,iCAAiC,+BAA+B;AAChE;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,iCAAiC,iCAAiC;AAClE;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,iCAAiC,6BAA6B;AAC9D;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,iCAAiC,mBAAmB;AACpD;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,iCAAiC,6BAA6B;AAC9D;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,iCAAiC,mBAAmB;AACpD;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,iCAAiC,yBAAyB;AAC1D;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,iCAAiC,2BAA2B;AAC5D;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,kBAAkB;AAC/C;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gDAAgD,kBAAkB;AAClE;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,6BAA6B,uBAAuB;AACpD;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,iCAAiC,cAAc;AAC/C,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,iCAAiC,6BAA6B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oCAAoC;AACpC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,uDAAuD;AACvD,SAAS,oBAAoB;AAC7B,SAAS;AACT,MAAM;AACN;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,6DAA6D;AAC7D,SAAS,6BAA6B;AACtC,SAAS;AACT,MAAM;AACN;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB;AACzD;AACA,6DAA6D,sEAAgB,EAAE,kDAAkD,kCAAkC,EAAE,kDAAkD;AACvN;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,sEAAsE;AAC1G;AACA,wDAAwD,sEAAgB,EAAE,0FAA0F;AACpK;AACA,CAAC;AACD;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,aAAa,oDAAoD;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,aAAa,oDAAoD;AACjE;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb;AACA,aAAa,gEAAiB;AAC9B,iBAAiB,gEAAU,cAAc,sBAAsB,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0DAAY;AACxC;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC,sCAAsC;AACtC,sCAAsC;AACtC;AACA;AACA,uCAAuC,qCAAqC,EAAE;AAC9E,+EAA+E,yBAAyB,EAAE;AAC1G;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2CAA2C;AACnF,2BAA2B;AAC3B,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kDAAkD,2DAAI;AACtD,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,sEAAsE,EAAE,cAAc,sDAAQ,GAAG,SAAS,SAAS;AACnH;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,6CAA6C,EAAE;AAC1F;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,sCAAsC,yBAAyB,EAAE;AACjE,uCAAuC,6CAA6C,EAAE;AACtF;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,oCAAoC,kBAAkB;AACtD;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,uCAAuC;AAC7D;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,0BAA0B;AAC/C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,oBAAoB;AACvC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,qBAAqB;AACxC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,qCAAqC;AAChE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,2CAA2C;AACxE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA,qCAAqC,qEAAuB;AAC5D,mCAAmC,+DAAiB;AACpD,o3CAAo3C,mDAAmD,GAAG,oCAAoC;AAC98C;AACA,6CAA6C,yBAAyB,qBAAqB,qBAAqB,cAAc,oBAAoB,eAAe,gBAAgB,gCAAgC,mBAAmB,0BAA0B,oBAAoB,mBAAmB,iBAAiB,YAAY,iBAAiB,kBAAkB,kHAAkH,kBAAkB,sCAAsC,qBAAqB,uCAAuC,oBAAoB,gEAAgE,sBAAsB,eAAe,oBAAoB,aAAa;AACruB,iBAAiB;AACjB;AACA;AACA,gDAAgD;AAChD,SAAS,mCAAmC;AAC5C,SAAS,6BAA6B;AACtC,SAAS,oBAAoB;AAC7B,SAAS,0BAA0B;AACnC,SAAS,4BAA4B;AACrC,SAAS,OAAO,+DAAiB,EAAE;AACnC,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,uBAAuB;AAChC,SAAS,OAAO,oDAAM;AACtB,MAAM;AACN;AACA,uBAAuB,OAAO,mDAAK,EAAE;AACrC,2BAA2B,OAAO,mDAAK,EAAE;AACzC,yBAAyB,OAAO,mDAAK,EAAE;AACvC,0BAA0B,OAAO,mDAAK,EAAE;AACxC,0BAA0B,OAAO,mDAAK,EAAE;AACxC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,sBAAsB,OAAO,mDAAK,EAAE;AACpC,uBAAuB,OAAO,mDAAK,EAAE;AACrC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,2BAA2B,OAAO,mDAAK,EAAE;AACzC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,oBAAoB,OAAO,oDAAM,EAAE;AACnC,kBAAkB,OAAO,oDAAM,EAAE;AACjC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,2BAA2B,iBAAiB;AAC5C,mCAAmC,+DAAiB;AACpD,iSAAiS,+BAA+B,yPAAyP,qCAAqC;AAC9lB,wDAAwD,cAAc,oCAAoC,iBAAiB,kBAAkB,kBAAkB,gBAAgB,cAAc,kBAAkB,aAAa,qBAAqB,oBAAoB,aAAa,iBAAiB,yCAAyC,gBAAgB,gDAAgD,WAAW,YAAY,YAAY,eAAe,wCAAwC,eAAe;AACrf,iBAAiB;AACjB;AACA;AACA,yDAAyD;AACzD,SAAS;AACT,MAAM;AACN;AACA,uBAAuB,OAAO,mDAAK,EAAE;AACrC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,wBAAwB,OAAO,mDAAK,EAAE;AACtC,2BAA2B,OAAO,mDAAK,EAAE;AACzC,kBAAkB,OAAO,oDAAM,EAAE;AACjC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0DAAY;AACxC,0BAA0B,0DAAY;AACtC;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,qCAAqC,qEAAuB;AAC5D,mCAAmC,+DAAiB;AACpD,o+BAAo+B,mDAAmD,GAAG,oCAAoC;AAC9jC,wDAAwD,oBAAoB,aAAa,sBAAsB,mBAAmB,2BAA2B,mBAAmB,2BAA2B,qBAAqB,YAAY,aAAa,kBAAkB,mBAAmB,kCAAkC,0BAA0B,kCAAkC,gCAAgC,wBAAwB,kBAAkB,mBAAmB,cAAc,oBAAoB,aAAa,kBAAkB,cAAc,gBAAgB,eAAe,SAAS,WAAW,YAAY,oBAAoB,kBAAkB,yBAAyB,kBAAkB,iBAAiB,eAAe,YAAY,6BAA6B,UAAU,wBAAwB,iBAAiB,mBAAmB,iBAAiB,YAAY,iBAAiB,kBAAkB,0BAA0B,oBAAoB,aAAa,kBAAkB,cAAc;AACl+B,iBAAiB;AACjB;AACA;AACA,0DAA0D;AAC1D,SAAS;AACT,MAAM;AACN;AACA,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,oBAAoB,OAAO,mDAAK,EAAE;AAClC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,sBAAsB,OAAO,mDAAK,EAAE;AACpC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,uBAAuB,OAAO,mDAAK,EAAE;AACrC,oBAAoB,OAAO,oDAAM,EAAE;AACnC,kBAAkB,OAAO,oDAAM,EAAE;AACjC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,oCAAoC,wBAAwB;AAC5D;AACA,eAAe,EAAE;AACjB,8BAA8B,sDAAS,0BAA0B,gEAAS,kBAAkB,0DAAG,eAAe,iBAAiB,EAAE;AACjI;AACA,IAAI,sDAAS;AACb,cAAc,gEAAS;AACvB;AACA,IAAI,6DAAM,eAAe,4BAA4B,EAAE;AACvD;AACA,IAAI,qEAAc;AAClB;AACA,iBAAiB,oDAAM;AACvB,iBAAiB,oDAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,QAAQ,sDAAS;AACjB,kBAAkB,gEAAS,kBAAkB,qEAAc,uBAAuB,0DAAG,iBAAiB,oBAAoB,EAAE,cAAc,EAAE;AAC5I,sDAAsD,mCAAmC,EAAE;AAC3F;AACA;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,yCAAyC;AACjE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,8BAA8B,yCAAyC;AACvE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,yCAAyC,EAAE;AAC3C;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,+BAA+B,cAAc;AAC7C,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,+BAA+B,cAAc;AAC7C,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,4EAA4E,EAAE;AAC9E;AACA,eAAe,EAAE;AACjB,0DAA0D,uBAAuB,EAAE;AACnF;AACA;AACA;AACA;AACA,mDAAmD,qCAAqC,EAAE;AAC1F,+DAA+D,EAAE;AACjE;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,sDAAsD,qBAAqB,EAAE;AAC7E,2CAA2C,EAAE;AAC7C,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sDAAQ,+CAA+C,UAAU;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ,gBAAgB;AAC3C;AACA;AACA;AACA;AACA,iBAAiB,0BAA0B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,yCAAyC,UAAU,2BAA2B,EAAE,EAAE;AAClF;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,0EAA0E;AAC9G;AACA,gEAAgE,sEAAgB,EAAE,sGAAsG;AACxL;AACA,CAAC;AACD;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,wBAAwB;AACxB;AACA;AACA,wBAAwB;AACxB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb;AACA,aAAa,gEAAiB;AAC9B,iBAAiB,gEAAU,cAAc,2BAA2B,EAAE;AACtE;AACA;AACA,WAAW,EAAE;AACb;AACA,aAAa,4DAAa;AAC1B,iBAAiB,gEAAU,cAAc,2BAA2B,EAAE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4CAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA;AACA,4BAA4B,0DAAY;AACxC,uCAAuC;AACvC,uCAAuC;AACvC,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,qBAAqB;AACxC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,sBAAsB;AACzC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,4BAA4B;AAC/C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,4BAA4B;AACvD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,oBAAoB,aAAa,mBAAmB;AACpD;AACA;AACA,oBAAoB,aAAa,+BAA+B;AAChE;AACA;AACA,oBAAoB,aAAa,8BAA8B;AAC/D;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,oCAAoC,oBAAoB;AACxD,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,mCAAmC,sDAAS;AAC5C,8BAA8B,gEAAS;AACvC;AACA,oBAAoB,6DAAM,eAAe,+BAA+B,EAAE;AAC1E,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA,2DAA2D,4BAA4B,EAAE;AACzF,yCAAyC,sDAAS;AAClD,kCAAkC,gEAAS,kBAAkB,6DAAM,mBAAmB,gEAAgE,EAAE;AACxJ;AACA;AACA,yCAAyC,0CAAK;AAC9C;AACA,oBAAoB,iDAAI,oDAAoD,uCAAuC,sBAAsB,EAAE,EAAE,EAAE;AAC/I,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,mBAAmB;AACpC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mGAAmG,kCAAkC,EAAE;AACvI;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,+DAA+D,kCAAkC,EAAE;AACnG;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA,qDAAqD;AACrD,SAAS,+BAA+B;AACxC,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,8DAAgB,EAAE;AAClC,SAAS,OAAO,uDAAS,EAAE;AAC3B,SAAS,OAAO,sEAAwB,EAAE;AAC1C,SAAS,OAAO,oDAAM,EAAE;AACxB,SAAS,6BAA6B;AACtC,SAAS,oBAAoB;AAC7B,SAAS,uBAAuB;AAChC,SAAS,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI;AAC3E,MAAM;AACN;AACA,qBAAqB,OAAO,mDAAK,EAAE;AACnC,uBAAuB,OAAO,mDAAK,EAAE;AACrC,2BAA2B,OAAO,mDAAK,EAAE;AACzC,yBAAyB,OAAO,mDAAK,EAAE;AACvC,0BAA0B,OAAO,mDAAK,EAAE;AACxC,0BAA0B,OAAO,mDAAK,EAAE;AACxC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,sBAAsB,OAAO,mDAAK,EAAE;AACpC,uBAAuB,OAAO,mDAAK,EAAE;AACrC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,2BAA2B,OAAO,mDAAK,EAAE;AACzC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,sBAAsB,OAAO,oDAAM,EAAE;AACrC,oBAAoB,OAAO,oDAAM,EAAE;AACnC,oBAAoB,OAAO,mDAAK,EAAE;AAClC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,mFAAmF;AACpG;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,qCAAqC,qEAAuB;AAC5D,mCAAmC,+DAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iCAAiC,6BAA6B;AAC9D,qDAAqD,kBAAkB,WAAW,YAAY,iBAAiB,qBAAqB,eAAe,+BAA+B,WAAW;AAC7L,iBAAiB;AACjB;AACA;AACA,uDAAuD;AACvD,SAAS;AACT,MAAM;AACN;AACA,wBAAwB,OAAO,mDAAK,EAAE;AACtC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,oBAAoB,OAAO,mDAAK,EAAE;AAClC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,oBAAoB,OAAO,mDAAK,EAAE;AAClC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,oEAAoE;AAC1F;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,oEAAoE;AACzF;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,qCAAqC,qEAAuB;AAC5D,mCAAmC,+DAAiB;AACpD,weAAwe,yCAAyC,wYAAwY,2BAA2B;AACp7B,8EAA8E,kBAAkB,cAAc,gBAAgB,kBAAkB,eAAe;AAC/J,iBAAiB;AACjB;AACA;AACA,gEAAgE;AAChE,SAAS;AACT,MAAM;AACN;AACA,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,oBAAoB,OAAO,mDAAK,EAAE;AAClC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,kBAAkB,OAAO,oDAAM,EAAE;AACjC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,UAAU;AAC3B;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,gDAAgD;AACjE;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,UAAU;AAC3B;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,gCAAgC,cAAc;AAC9C,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,gCAAgC,cAAc;AAC9C,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,sEAAsE;AACtE;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,uCAAuC;AACxD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACbb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,2BAA2B,yBAAyB;AACpD,+BAA+B,QAAQ;AACvC,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,2BAA2B,yBAAyB;AACpD,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,mBAAmB,kBAAkB;AACrC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,UAAU;AAC3B;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,gDAAgD;AACjE;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,UAAU;AAC3B;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,gCAAgC,cAAc;AAC9C,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,gCAAgC,cAAc;AAC9C,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,sEAAsE;AACtE;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,kCAAkC;AACnD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,UAAU;AAC3B;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,UAAU;AAC3B;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,gCAAgC,cAAc;AAC9C,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,gCAAgC,cAAc;AAC9C,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,oCAAoC;AACrD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,wCAAwC;AAC7D;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,wCAAwC;AAC7D;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,4BAA4B,2CAA2C;AACvE;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,8BAA8B;AACtD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,iCAAiC;AACtD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,mCAAmC;AAC9D;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,6BAA6B;AAClD;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,SAAS,iCAAiC;AAC3D;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA;AACA;AACA;AACA;AACA,8BAA8B,4DAAY,EAAE,0DAAW;AACvD;AACA,iBAAiB;AACjB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB;AACzD;AACA,2DAA2D,sEAAgB,EAAE,gDAAgD,gCAAgC,EAAE,gDAAgD;AAC/M;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB,+DAA+D;AACtF;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,2BAA2B;AAC3B,iBAAiB;AACjB;AACA;AACA,kDAAkD;AAClD,SAAS,gCAAgC,OAAO,oDAAM,SAAS,gEAAU,cAAc,oBAAoB,EAAE,KAAK,GAAG;AACrH,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,uDAAS;AACzB,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB,+DAA+D;AACtF;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,2BAA2B;AAC3B,iBAAiB;AACjB;AACA;AACA,oDAAoD;AACpD,SAAS,gCAAgC,OAAO,oDAAM,SAAS,gEAAU,cAAc,oBAAoB,EAAE,KAAK,GAAG;AACrH,SAAS,OAAO,wDAAU;AAC1B,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,wBAAwB;AACzC;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iCAAiC,0CAA0C,gEAAU,cAAc,0BAA0B,EAAE,GAAG;AAClI,iBAAiB;AACjB;AACA;AACA,oDAAoD;AACpD,SAAS,gCAAgC,OAAO,oDAAM,SAAS,gEAAU,cAAc,oBAAoB,EAAE,KAAK,GAAG;AACrH,SAAS,OAAO,wDAAU;AAC1B,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4CAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA,yEAAyE,uBAAuB,EAAE;AAClG;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,wGAAwG,EAAE;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,+BAA+B,sDAAS;AACxC,0BAA0B,gEAAS;AACnC;AACA,gBAAgB,6DAAM,mBAAmB,mCAAmC,EAAE;AAC9E,2BAA2B,EAAE;AAC7B,8BAA8B,sDAAS;AACvC,0BAA0B,gEAAS,kBAAkB,6DAAM,mBAAmB,2CAA2C,EAAE;AAC3H,gBAAgB,iDAAI,2BAA2B,gEAAS,yCAAyC;AACjG;AACA;AACA,iBAAiB,EAAE,EAAE;AACrB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB,yCAAyC;AAChE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB,4DAA4D;AACnF;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU,4DAA4D,6BAA6B,EAAE;AAC9H;AACA;AACA,8CAA8C;AAC9C,SAAS,OAAO,+DAAiB,EAAE;AACnC,SAAS,0BAA0B;AACnC,SAAS,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAC9E,SAAS,OAAO,oDAAM;AACtB,MAAM;AACN;AACA,iBAAiB,OAAO,0DAAY,4BAA4B;AAChE,mBAAmB,OAAO,0DAAY,8BAA8B;AACpE,qBAAqB,OAAO,mDAAK,EAAE;AACnC,iBAAiB,OAAO,mDAAK,mBAAmB;AAChD,qBAAqB,OAAO,mDAAK,EAAE;AACnC,sBAAsB,OAAO,oDAAM,EAAE;AACrC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,SAAS,+BAA+B;AACzD;AACA,SAAS,OAAO,sDAAQ,UAAU,0EAA0E;AAC5G;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB;AACzD;AACA,wDAAwD,sEAAgB,EAAE,6CAA6C,6BAA6B,EAAE,6CAA6C;AACnM;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oCAAoC,yDAAW;AAC/C,uBAAuB,EAAE;AACzB,gFAAgF,EAAE;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA,iBAAiB,uEAAuE;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,4BAA4B,qDAAqD;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB;AACzD;AACA;AACA,4CAA4C;AAC5C,SAAS,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI;AAC3E,MAAM;AACN,mDAAmD,sEAAgB,EAAE,wCAAwC,sBAAsB,4DAAM,CAAC,wDAAQ,GAAG,EAAE,wCAAwC;AAC/L;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA,2BAA2B;AAC3B,iBAAiB;AACjB;AACA;AACA,yBAAyB,OAAO,mDAAK,EAAE;AACvC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,uBAAuB;AACvB;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,uBAAuB,EAAE;AACnG;AACA;AACA;AACA,SAAS;AACT,4CAA4C,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,eAAe,EAAE;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0DAAY;AAC5C;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB,gCAAgC;AACvD;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,kDAAkD;AACnE;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,4CAA4C,EAAE;AAC9C,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA,iDAAiD;AACjD,SAAS,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAC9E,SAAS,OAAO,wDAAU;AAC1B,MAAM;AACN;AACA,0BAA0B,OAAO,mDAAK,EAAE;AACxC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,uBAAuB,OAAO,mDAAK,EAAE;AACrC,wBAAwB,OAAO,oDAAM,sBAAsB;AAC3D;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,4CAAO;AACtD;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,+CAA+C,2BAA2B;AAC1E,iDAAiD,6BAA6B;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,uBAAuB,iDAAiD,oCAAoC,EAAE,EAAE;AAChH;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,mCAAmC;AACpD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oCAAoC,yDAAW;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,+BAA+B,2BAA2B,EAAE;AAC5D;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,+BAA+B,6BAA6B;AAC5D;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mCAAmC,sDAAQ,SAAS,cAAc,6CAA6C,4BAA4B;AAC3I,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB;AACzD;AACA;AACA,gDAAgD;AAChD,SAAS,OAAO,4DAAc,EAAE;AAChC,SAAS,OAAO,sDAAQ,EAAE;AAC1B,SAAS,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAC9E,SAAS,kBAAkB;AAC3B,SAAS,OAAO,8DAAgB;AAChC,MAAM;AACN,uDAAuD,sEAAgB,EAAE,4CAA4C,0BAA0B,4DAAM,CAAC,4DAAc,GAAG,4DAAM,CAAC,sDAAQ,GAAG,4DAAM,CAAC,wDAAQ,GAAG,4DAAM,aAAa,4DAAM,CAAC,8DAAgB,GAAG,EAAE,4CAA4C;AACtS;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,iCAAiC,cAAc;AAC/C,mBAAmB,EAAE;AACrB,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,uBAAuB,qCAAqC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,yCAAyC;AAC1D;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB;AACzD;AACA;AACA,2CAA2C;AAC3C,SAAS,OAAO,sEAAwB,EAAE;AAC1C,SAAS,OAAO,sDAAQ,EAAE;AAC1B,SAAS,sBAAsB;AAC/B,SAAS;AACT,MAAM;AACN,kDAAkD,sEAAgB,EAAE,uCAAuC,qBAAqB,4DAAM,CAAC,sEAAwB,GAAG,4DAAM,CAAC,sDAAQ,GAAG,4DAAM,iBAAiB,4DAAM,kBAAkB,EAAE,uCAAuC;AAC5Q;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,SAAS,4BAA4B;AACtD;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB;AACzD;AACA,6DAA6D,sEAAgB,EAAE,kDAAkD,kCAAkC,EAAE,kDAAkD;AACvN;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,sBAAsB;AACvC;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,mCAAmC;AACpD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,+BAA+B;AAC1D;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,8BAA8B;AACtD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,qBAAqB,oDAAM;AAC3B;AACA;AACA,qBAAqB,oDAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,qCAAqC,qEAAuB;AAC5D,2BAA2B,uBAAuB;AAClD,uWAAuW,2JAA2J,OAAO,+SAA+S,8JAA8J,+XAA+X,yCAAyC,YAAY,mWAAmW,sJAAsJ,4RAA4R,sJAAsJ,OAAO;AAC5zE,iBAAiB;AACjB;AACA;AACA,gDAAgD;AAChD,SAAS;AACT,MAAM;AACN;AACA,oBAAoB,OAAO,mDAAK,EAAE;AAClC,yBAAyB,OAAO,mDAAK,EAAE;AACvC,0BAA0B,OAAO,mDAAK,EAAE;AACxC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,0BAA0B,OAAO,mDAAK,EAAE;AACxC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,oBAAoB,OAAO,mDAAK,EAAE;AAClC,sBAAsB,OAAO,oDAAM,EAAE;AACrC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,SAAS,iCAAiC;AAC3D;AACA,SAAS,OAAO,sDAAQ,UAAU,oEAAoE,4DAAY,GAAG;AACrH;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,0DAA0D;AAC3E;AACA,CAAC;AACD,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,6BAA6B,2BAA2B;AACxD,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,8EAA8E,2BAA2B,EAAE;AAC3G,mBAAmB,EAAE;AACrB;AACA;AACA,KAAK;AACL,eAAe,EAAE;AACjB,uEAAuE,+BAA+B,EAAE;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,0BAA0B;AAC1B;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,wBAAwB,6CAA6C,wBAAwB,EAAE,EAAE;AACjG;;AAEA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB;AACzD;AACA,0DAA0D,sEAAgB,EAAE,+CAA+C,+BAA+B,EAAE,+CAA+C;AAC3M;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,8BAA8B,yDAAW,CAAC;AAC3D;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,gBAAgB,EAAE;AAClB;AACA,sBAAsB,yDAAyD,EAAE,qBAAqB;AACtG;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,qCAAqC,qEAAuB;AAC5D,mCAAmC,+DAAiB;AACpD;AACA;AACA;AACA;AACA,qBAAqB;AACrB,+JAA+J,OAAO;AACtK,mHAAmH,SAAS,iBAAiB,+FAA+F,SAAS,iGAAiG,UAAU,UAAU,qFAAqF,QAAQ,gBAAgB,6FAA6F,SAAS,mGAAmG,SAAS,YAAY;AACrrB,iBAAiB;AACjB;AACA;AACA,mDAAmD;AACnD,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,uDAAS;AACzB,MAAM;AACN;AACA,qBAAqB,OAAO,mDAAK,EAAE;AACnC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,cAAc,OAAO,mDAAK,EAAE;AAC5B,wBAAwB,OAAO,mDAAK,EAAE;AACtC,mBAAmB,OAAO,mDAAK,EAAE;AACjC;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA,uDAAuD,2BAA2B,EAAE;AACpF,+BAA+B,EAAE;AACjC,mCAAmC,sDAAS;AAC5C,8BAA8B,gEAAS;AACvC;AACA,oBAAoB,6DAAM,mBAAmB,mCAAmC,EAAE;AAClF,+BAA+B,EAAE;AACjC,kCAAkC,sDAAS;AAC3C,8BAA8B,gEAAS,gBAAgB,6DAAM,cAAc,oBAAoB,EAAE,GAAG,6DAAM,mBAAmB,2CAA2C,EAAE;AAC1K,oBAAoB,iDAAI,6CAA6C,uCAAuC,sBAAsB,EAAE,EAAE,EAAE;AACxI,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,gCAAgC;AACjD;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU,mDAAmD;AACtF;AACA;AACA,6CAA6C;AAC7C,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,uDAAS,EAAE;AAC3B,SAAS,OAAO,sDAAQ,EAAE;AAC1B,SAAS,OAAO,sEAAwB,EAAE;AAC1C,SAAS,OAAO,8DAAgB,EAAE;AAClC,SAAS,yBAAyB;AAClC,SAAS,OAAO,oDAAM,EAAE;AACxB,SAAS,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI;AAC3E,MAAM;AACN;AACA,qBAAqB,OAAO,mDAAK,EAAE;AACnC,sBAAsB,OAAO,mDAAK,EAAE;AACpC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,0BAA0B,OAAO,mDAAK,EAAE;AACxC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,iBAAiB,OAAO,oDAAM,EAAE;AAChC,kBAAkB,OAAO,oDAAM,EAAE;AACjC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,SAAS,8BAA8B;AACxD;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA;AACA,8BAA8B,4DAAY;AAC1C;AACA,iBAAiB;AACjB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB;AACzD;AACA,8DAA8D,sEAAgB,EAAE,mDAAmD,mCAAmC,EAAE,mDAAmD;AAC3N;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,8CAA8C;AAC/D;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,yCAAyC;AAC1D;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,qCAAqC,qEAAuB;AAC5D,0HAA0H,6BAA6B,4CAA4C,6CAA6C,+NAA+N,mBAAmB;AACle,iBAAiB;AACjB;AACA;AACA,iDAAiD;AACjD,SAAS;AACT,MAAM;AACN;AACA,eAAe,OAAO,mDAAK,EAAE;AAC7B,oBAAoB,OAAO,mDAAK,EAAE;AAClC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,kBAAkB,OAAO,mDAAK,EAAE;AAChC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,SAAS,kCAAkC;AAC5D;AACA,SAAS,OAAO,sDAAQ,UAAU,sEAAsE,4DAAY,GAAG;AACvH;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB;AACzD;AACA,yDAAyD,sEAAgB,EAAE,8CAA8C,8BAA8B,EAAE,8CAA8C;AACvM;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb;AACA,aAAa,gEAAiB;AAC9B,iBAAiB,gEAAU,cAAc,kBAAkB,EAAE;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C,sCAAsC;AACtC,sCAAsC;AACtC;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,8CAA8C;AAC/D;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,kBAAkB;AACnC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,iEAAiE;AACvF;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oCAAoC,mBAAmB,mBAAmB,UAAU,oBAAoB,EAAE,EAAE;AAC5G;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,oBAAoB;AACvC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,qBAAqB;AACxC;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,4BAA4B;AACvD;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,wCAAwC,uBAAuB;AAC/D,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,yDAAyD,kDAAkD,EAAE;AAC7G;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,qCAAqC,qEAAuB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,yEAAyE,wBAAwB,YAAY,IAAI,qHAAqH,gCAAgC;AACtQ;AACA,iBAAiB;AACjB;AACA;AACA,4CAA4C;AAC5C,SAAS,wBAAwB;AACjC,SAAS,OAAO,+DAAiB;AACjC,MAAM;AACN;AACA,eAAe,OAAO,mDAAK,EAAE;AAC7B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,oBAAoB,OAAO,mDAAK,EAAE;AAClC,sBAAsB,OAAO,mDAAK,EAAE;AACpC,wBAAwB,OAAO,mDAAK,EAAE,GAAG,OAAO,0DAAY,SAAS,yDAAW,IAAI;AACpF,iBAAiB,OAAO,oDAAM,EAAE;AAChC,iBAAiB,OAAO,oDAAM,EAAE;AAChC,sBAAsB,OAAO,oDAAM,EAAE;AACrC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,SAAS,6BAA6B;AACvD;AACA,SAAS,OAAO,sDAAQ,UAAU,4DAA4D,4DAAY,GAAG;AAC7G;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB;AACzD;AACA,yDAAyD,sEAAgB,EAAE,8CAA8C,8BAA8B,EAAE,8CAA8C;AACvM;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU,uCAAuC;AAC1E;AACA;AACA,8CAA8C;AAC9C,SAAS,OAAO,yDAAW;AAC3B,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU,yCAAyC;AAC5E;AACA;AACA,gDAAgD;AAChD,SAAS,OAAO,yDAAW;AAC3B,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2DAA2D,mBAAmB;AAC9E,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU,sBAAsB;AACzD;AACA;AACA,cAAc,OAAO,mDAAK,EAAE;AAC5B,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,oBAAoB,OAAO,mDAAK,EAAE;AAClC,qBAAqB,OAAO,6DAAe,uBAAuB,qBAAqB,IAAI;AAC3F,uBAAuB,OAAO,6DAAe,yBAAyB,qBAAqB,IAAI;AAC/F;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,0DAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,iCAAiC,+EAA+E,2BAA2B,EAAE,EAAE;AAC/I;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,0DAA0D,sBAAsB,EAAE;AAClF;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA,0XAA0X,gTAAgT,WAAW,sPAAsP,uCAAuC,+IAA+I,QAAQ;AACzmC,iBAAiB;AACjB;AACA;AACA,4CAA4C;AAC5C,SAAS;AACT,MAAM;AACN;AACA,gBAAgB,OAAO,6DAAe,mBAAmB;AACzD,oBAAoB,OAAO,mDAAK,EAAE;AAClC,yBAAyB,OAAO,mDAAK,EAAE;AACvC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,uBAAuB,OAAO,mDAAK,EAAE;AACrC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,qBAAqB,OAAO,oDAAM,EAAE;AACpC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,SAAS,6BAA6B;AACvD;AACA,SAAS,OAAO,sDAAQ,UAAU,gFAAgF,4DAAY,GAAG;AACjI;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,8BAA8B,UAAU;AACxC;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,8BAA8B,UAAU;AACxC;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,8BAA8B,UAAU;AACxC;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,+EAA+E;AAChG;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB;AACzD;AACA,6DAA6D,sEAAgB,EAAE,kDAAkD,kCAAkC,EAAE,kDAAkD;AACvN;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,sEAAsE;AAC1G;AACA,wDAAwD,sEAAgB,EAAE,0FAA0F;AACpK;AACA,CAAC;AACD;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,aAAa,4FAA4F;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,aAAa,4FAA4F;AACzG;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb;AACA,aAAa,gEAAiB;AAC9B,iBAAiB,gEAAU,cAAc,sBAAsB,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,oBAAoB;AACvC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,qBAAqB;AACxC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,4BAA4B;AACvD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,yBAAyB;AAC/C;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,8BAA8B,EAAE;AACrD;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,8BAA8B,EAAE;AACrD;AACA;AACA,KAAK;AACL;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,iCAAiC,gBAAgB;AACjD;AACA;AACA;AACA;AACA,wDAAwD,8EAA8E;AACtI;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,uwJAAuwJ;AACvwJ;AACA,oCAAoC,eAAe,QAAQ,oBAAoB,aAAa,sBAAsB,mBAAmB,wBAAwB,UAAU,4DAA4D,oBAAoB,aAAa,0BAA0B,sBAAsB,sBAAsB,mBAAmB,yBAAyB,6BAA6B,eAAe,UAAU,kBAAkB,iBAAiB,mBAAmB,6BAA6B,WAAW,qBAAqB,aAAa,WAAW,kBAAkB,UAAU,iCAAiC,yBAAyB,sBAAsB,YAAY,uBAAuB,UAAU,iCAAiC,yBAAyB,MAAM,kBAAkB;AAClyB,iBAAiB;AACjB;AACA;AACA,gDAAgD;AAChD,SAAS,4BAA4B;AACrC,SAAS;AACT,MAAM;AACN;AACA,oBAAoB,OAAO,mDAAK,EAAE;AAClC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,sBAAsB,OAAO,mDAAK,EAAE;AACpC,sBAAsB,OAAO,mDAAK,EAAE;AACpC,0BAA0B,OAAO,mDAAK,EAAE;AACxC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,SAAS,iCAAiC;AAC3D;AACA,SAAS,OAAO,sDAAQ,UAAU,oEAAoE,4DAAY,GAAG;AACrH;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB;AACzD;AACA,0DAA0D,sEAAgB,EAAE,+CAA+C,+BAA+B,EAAE,+CAA+C;AAC3M;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,gBAAgB,EAAE;AAClB;AACA,sBAAsB,yDAAyD,EAAE,qBAAqB;AACtG;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,qCAAqC,qEAAuB;AAC5D,mCAAmC,+DAAiB;AACpD;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,mHAAmH,uBAAuB,+FAA+F,SAAS,iGAAiG,UAAU,YAAY,qFAAqF,sBAAsB,6FAA6F,UAAU,mGAAmG,SAAS,aAAa;AACprB,iBAAiB;AACjB;AACA;AACA,mDAAmD;AACnD,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,uDAAS;AACzB,MAAM;AACN;AACA,qBAAqB,OAAO,mDAAK,EAAE;AACnC,cAAc,OAAO,mDAAK,EAAE;AAC5B,wBAAwB,OAAO,mDAAK,EAAE;AACtC;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,yBAAyB,EAAE;AAChD;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA,uDAAuD,2BAA2B,EAAE;AACpF,+BAA+B,EAAE;AACjC,mCAAmC,sDAAS;AAC5C,8BAA8B,gEAAS;AACvC;AACA,oBAAoB,6DAAM,mBAAmB,mCAAmC,EAAE;AAClF,+BAA+B,EAAE;AACjC,kCAAkC,sDAAS;AAC3C,8BAA8B,gEAAS,gBAAgB,6DAAM,cAAc,oBAAoB,EAAE,GAAG,6DAAM,mBAAmB,2CAA2C,EAAE;AAC1K,oBAAoB,iDAAI,6CAA6C,uCAAuC,sBAAsB,EAAE,EAAE,EAAE;AACxI,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,gCAAgC;AACjD;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU,mDAAmD;AACtF;AACA;AACA,6CAA6C;AAC7C,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,uDAAS,EAAE;AAC3B,SAAS,OAAO,sDAAQ,EAAE;AAC1B,SAAS,OAAO,sEAAwB,EAAE;AAC1C,SAAS,OAAO,8DAAgB,EAAE;AAClC,SAAS,yBAAyB;AAClC,SAAS,OAAO,oDAAM,EAAE;AACxB,SAAS,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI;AAC3E,MAAM;AACN;AACA,qBAAqB,OAAO,mDAAK,EAAE;AACnC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,0BAA0B,OAAO,mDAAK,EAAE;AACxC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,iBAAiB,OAAO,oDAAM,EAAE;AAChC,kBAAkB,OAAO,oDAAM,EAAE;AACjC,sBAAsB,OAAO,mDAAK,EAAE;AACpC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,SAAS,8BAA8B;AACxD;AACA,SAAS,OAAO,sDAAQ,UAAU,2GAA2G;AAC7I;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,qCAAqC,qEAAuB;AAC5D,mCAAmC,+DAAiB;AACpD;AACA,6CAA6C,0CAA0C,MAAM,4BAA4B,MAAM;AAC/H;AACA,6CAA6C,gBAAgB;AAC7D,iBAAiB;AACjB;AACA;AACA,0BAA0B,OAAO,mDAAK,EAAE;AACxC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0DAAY;AAC3C,qCAAqC,0DAAY;AACjD;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,oEAAoE;AACrF;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,qCAAqC;AACtD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,6BAA6B;AAClD;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,oBAAoB;AACrC;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA,2BAA2B,iEAAiE;AAC5F,koBAAkoB,iDAAiD;AACnrB,iBAAiB;AACjB;AACA;AACA,cAAc,OAAO,mDAAK,EAAE;AAC5B,sBAAsB,OAAO,mDAAK,EAAE;AACpC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,qBAAqB,OAAO,mDAAK,EAAE;AACnC,0BAA0B,OAAO,mDAAK,EAAE;AACxC,uBAAuB,OAAO,oDAAM,qBAAqB;AACzD,6BAA6B,OAAO,oDAAM,2BAA2B;AACrE;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb,0BAA0B,4DAAc,0BAA0B,uDAAuD;AACzH;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,gCAAgC,oBAAoB;AACpD,eAAe,EAAE;AACjB,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,mCAAmC,sCAAsC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB;AACzD;AACA;AACA,uCAAuC;AACvC,SAAS,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAC9E,SAAS,gCAAgC,OAAO,oDAAM,4BAA4B;AAClF,MAAM;AACN,8CAA8C,sEAAgB,EAAE,mCAAmC,iBAAiB,4DAAM,CAAC,wDAAQ,GAAG,4DAAM,mBAAmB,EAAE,mCAAmC;AACpM;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB;AACzD;AACA,4DAA4D,sEAAgB,EAAE,iDAAiD,iCAAiC,EAAE,iDAAiD;AACnN;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb;AACA,aAAa,gEAAiB;AAC9B,iBAAiB,gEAAU,cAAc,qBAAqB,EAAE;AAChE;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA,uCAAuC;AACvC,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA,6BAA6B,sDAAS;AACtC,kBAAkB,0DAAG,oBAAoB,qBAAqB,EAAE,4BAA4B,EAAE;AAC9F,yCAAyC,oDAAe;AACxD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mDAAmD,0DAAG;AACtD;AACA;AACA;AACA;AACA,SAAS;AACT,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,8CAA8C,0DAAG;AACjD;AACA;AACA;AACA,SAAS;AACT,mBAAmB,EAAE;AACrB,yDAAyD,gEAAS,cAAc,0BAA0B,EAAE;AAC5G;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,qBAAqB;AACxC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,sBAAsB;AACzC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,wDAAwD;AAC9E;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,gCAAgC;AACjD;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,8CAA8C,EAAE;AAC9H,sFAAsF,0CAA0C,EAAE;AAClI;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,8BAA8B,4CAA4C,yBAAyB,EAAE,EAAE;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA,+CAA+C;AAC/C,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,8DAAgB,EAAE;AAClC,SAAS,OAAO,uDAAS,EAAE;AAC3B,SAAS,OAAO,sDAAQ,EAAE;AAC1B,SAAS,OAAO,sEAAwB,EAAE;AAC1C,SAAS,2BAA2B;AACpC,SAAS,OAAO,oDAAM,EAAE;AACxB,SAAS;AACT,MAAM;AACN;AACA,wBAAwB,OAAO,mDAAK,EAAE;AACtC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,sBAAsB,OAAO,mDAAK,EAAE;AACpC,0BAA0B,OAAO,mDAAK,EAAE;AACxC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,2BAA2B,OAAO,mDAAK,EAAE;AACzC,0BAA0B,OAAO,mDAAK,EAAE;AACxC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,sBAAsB,OAAO,oDAAM,EAAE;AACrC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,SAAS,gCAAgC;AAC1D;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA;AACA,8BAA8B,4DAAY;AAC1C;AACA,iBAAiB;AACjB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,SAAS,uBAAuB;AACjD;AACA,SAAS,OAAO,sDAAQ,UAAU,6CAA6C;AAC/E;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,oCAAoC;AAClD;;AAE0pE;;AAE1pE,2CAA2C,cAAc,2nwmB","file":"default~bs-component-bs-component-module~dashboard-dashboard-module~layout-layout-module.js","sourcesContent":["import { Injectable, Directive, ChangeDetectionStrategy, Component, Input, ViewEncapsulation, TemplateRef, Output, EventEmitter, Inject, InjectionToken, NgModule, ElementRef, forwardRef, Renderer2, ChangeDetectorRef, ContentChildren, NgZone, PLATFORM_ID, Injector, ViewContainerRef, ComponentFactoryResolver, ContentChild, defineInjectable, inject, LOCALE_ID, ApplicationRef, RendererFactory2, INJECTOR } from '@angular/core';\nimport { CommonModule, isPlatformBrowser, FormStyle, getLocaleDayNames, getLocaleMonthNames, TranslationWidth, formatDate, DOCUMENT } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';\nimport { Subject, timer, fromEvent, NEVER, race, BehaviorSubject } from 'rxjs';\nimport { filter, map, switchMap, takeUntil, take, withLatestFrom, tap } from 'rxjs/operators';\nimport { __extends, __read, __values, __assign } from 'tslib';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @param {?} value\n * @return {?}\n */\nfunction toInteger(value) {\n    return parseInt(\"\" + value, 10);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction toString(value) {\n    return (value !== undefined && value !== null) ? \"\" + value : '';\n}\n/**\n * @param {?} value\n * @param {?} max\n * @param {?=} min\n * @return {?}\n */\nfunction getValueInRange(value, max, min) {\n    if (min === void 0) { min = 0; }\n    return Math.max(Math.min(value, max), min);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isString(value) {\n    return typeof value === 'string';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isNumber(value) {\n    return !isNaN(toInteger(value));\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isInteger(value) {\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isDefined(value) {\n    return value !== undefined && value !== null;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction padNumber(value) {\n    if (isNumber(value)) {\n        return (\"0\" + value).slice(-2);\n    }\n    else {\n        return '';\n    }\n}\n/**\n * @param {?} text\n * @return {?}\n */\nfunction regExpEscape(text) {\n    return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Configuration service for the NgbAccordion component.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the accordions used in the application.\n */\nvar NgbAccordionConfig = /** @class */ (function () {\n    function NgbAccordionConfig() {\n        this.closeOthers = false;\n    }\n    NgbAccordionConfig.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */ NgbAccordionConfig.ngInjectableDef = defineInjectable({ factory: function NgbAccordionConfig_Factory() { return new NgbAccordionConfig(); }, token: NgbAccordionConfig, providedIn: \"root\" });\n    return NgbAccordionConfig;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar nextId = 0;\n/**\n * This directive should be used to wrap accordion panel titles that need to contain HTML markup or other directives.\n */\nvar NgbPanelTitle = /** @class */ (function () {\n    function NgbPanelTitle(templateRef) {\n        this.templateRef = templateRef;\n    }\n    NgbPanelTitle.decorators = [\n        { type: Directive, args: [{ selector: 'ng-template[ngbPanelTitle]' },] }\n    ];\n    /** @nocollapse */\n    NgbPanelTitle.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return NgbPanelTitle;\n}());\n/**\n * This directive must be used to wrap accordion panel content.\n */\nvar NgbPanelContent = /** @class */ (function () {\n    function NgbPanelContent(templateRef) {\n        this.templateRef = templateRef;\n    }\n    NgbPanelContent.decorators = [\n        { type: Directive, args: [{ selector: 'ng-template[ngbPanelContent]' },] }\n    ];\n    /** @nocollapse */\n    NgbPanelContent.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return NgbPanelContent;\n}());\n/**\n * The NgbPanel directive represents an individual panel with the title and collapsible\n * content\n */\nvar NgbPanel = /** @class */ (function () {\n    function NgbPanel() {\n        /**\n         *  A flag determining whether the panel is disabled or not.\n         *  When disabled, the panel cannot be toggled.\n         */\n        this.disabled = false;\n        /**\n         *  An optional id for the panel. The id should be unique.\n         *  If not provided, it will be auto-generated.\n         */\n        this.id = \"ngb-panel-\" + nextId++;\n        /**\n         * A flag telling if the panel is currently open\n         */\n        this.isOpen = false;\n    }\n    /**\n     * @return {?}\n     */\n    NgbPanel.prototype.ngAfterContentChecked = /**\n     * @return {?}\n     */\n    function () {\n        // We are using @ContentChildren instead of @ContentChild as in the Angular version being used\n        // only @ContentChildren allows us to specify the {descendants: false} option.\n        // Without {descendants: false} we are hitting bugs described in:\n        // https://github.com/ng-bootstrap/ng-bootstrap/issues/2240\n        this.titleTpl = this.titleTpls.first;\n        this.contentTpl = this.contentTpls.first;\n    };\n    NgbPanel.decorators = [\n        { type: Directive, args: [{ selector: 'ngb-panel' },] }\n    ];\n    NgbPanel.propDecorators = {\n        disabled: [{ type: Input }],\n        id: [{ type: Input }],\n        title: [{ type: Input }],\n        type: [{ type: Input }],\n        titleTpls: [{ type: ContentChildren, args: [NgbPanelTitle, { descendants: false },] }],\n        contentTpls: [{ type: ContentChildren, args: [NgbPanelContent, { descendants: false },] }]\n    };\n    return NgbPanel;\n}());\n/**\n * The NgbAccordion directive is a collection of panels.\n * It can assure that only one panel can be opened at a time.\n */\nvar NgbAccordion = /** @class */ (function () {\n    function NgbAccordion(config) {\n        /**\n         * An array or comma separated strings of panel identifiers that should be opened\n         */\n        this.activeIds = [];\n        /**\n         * Whether the closed panels should be hidden without destroying them\n         */\n        this.destroyOnHide = true;\n        /**\n         * A panel change event fired right before the panel toggle happens. See NgbPanelChangeEvent for payload details\n         */\n        this.panelChange = new EventEmitter();\n        this.type = config.type;\n        this.closeOtherPanels = config.closeOthers;\n    }\n    /**\n     * Checks if a panel with a given id is expanded or not.\n     */\n    /**\n     * Checks if a panel with a given id is expanded or not.\n     * @param {?} panelId\n     * @return {?}\n     */\n    NgbAccordion.prototype.isExpanded = /**\n     * Checks if a panel with a given id is expanded or not.\n     * @param {?} panelId\n     * @return {?}\n     */\n    function (panelId) { return this.activeIds.indexOf(panelId) > -1; };\n    /**\n     * Expands a panel with a given id. Has no effect if the panel is already expanded or disabled.\n     */\n    /**\n     * Expands a panel with a given id. Has no effect if the panel is already expanded or disabled.\n     * @param {?} panelId\n     * @return {?}\n     */\n    NgbAccordion.prototype.expand = /**\n     * Expands a panel with a given id. Has no effect if the panel is already expanded or disabled.\n     * @param {?} panelId\n     * @return {?}\n     */\n    function (panelId) { this._changeOpenState(this._findPanelById(panelId), true); };\n    /**\n     * Expands all panels if [closeOthers]=\"false\". For the [closeOthers]=\"true\" case will have no effect if there is an\n     * open panel, otherwise the first panel will be expanded.\n     */\n    /**\n     * Expands all panels if [closeOthers]=\"false\". For the [closeOthers]=\"true\" case will have no effect if there is an\n     * open panel, otherwise the first panel will be expanded.\n     * @return {?}\n     */\n    NgbAccordion.prototype.expandAll = /**\n     * Expands all panels if [closeOthers]=\"false\". For the [closeOthers]=\"true\" case will have no effect if there is an\n     * open panel, otherwise the first panel will be expanded.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.closeOtherPanels) {\n            if (this.activeIds.length === 0 && this.panels.length) {\n                this._changeOpenState(this.panels.first, true);\n            }\n        }\n        else {\n            this.panels.forEach(function (panel) { return _this._changeOpenState(panel, true); });\n        }\n    };\n    /**\n     * Collapses a panel with a given id. Has no effect if the panel is already collapsed or disabled.\n     */\n    /**\n     * Collapses a panel with a given id. Has no effect if the panel is already collapsed or disabled.\n     * @param {?} panelId\n     * @return {?}\n     */\n    NgbAccordion.prototype.collapse = /**\n     * Collapses a panel with a given id. Has no effect if the panel is already collapsed or disabled.\n     * @param {?} panelId\n     * @return {?}\n     */\n    function (panelId) { this._changeOpenState(this._findPanelById(panelId), false); };\n    /**\n     * Collapses all open panels.\n     */\n    /**\n     * Collapses all open panels.\n     * @return {?}\n     */\n    NgbAccordion.prototype.collapseAll = /**\n     * Collapses all open panels.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.panels.forEach(function (panel) { _this._changeOpenState(panel, false); });\n    };\n    /**\n     * Programmatically toggle a panel with a given id. Has no effect if the panel is disabled.\n     */\n    /**\n     * Programmatically toggle a panel with a given id. Has no effect if the panel is disabled.\n     * @param {?} panelId\n     * @return {?}\n     */\n    NgbAccordion.prototype.toggle = /**\n     * Programmatically toggle a panel with a given id. Has no effect if the panel is disabled.\n     * @param {?} panelId\n     * @return {?}\n     */\n    function (panelId) {\n        /** @type {?} */\n        var panel = this._findPanelById(panelId);\n        if (panel) {\n            this._changeOpenState(panel, !panel.isOpen);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgbAccordion.prototype.ngAfterContentChecked = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // active id updates\n        if (isString(this.activeIds)) {\n            this.activeIds = this.activeIds.split(/\\s*,\\s*/);\n        }\n        // update panels open states\n        this.panels.forEach(function (panel) { return panel.isOpen = !panel.disabled && _this.activeIds.indexOf(panel.id) > -1; });\n        // closeOthers updates\n        if (this.activeIds.length > 1 && this.closeOtherPanels) {\n            this._closeOthers(this.activeIds[0]);\n            this._updateActiveIds();\n        }\n    };\n    /**\n     * @param {?} panel\n     * @param {?} nextState\n     * @return {?}\n     */\n    NgbAccordion.prototype._changeOpenState = /**\n     * @param {?} panel\n     * @param {?} nextState\n     * @return {?}\n     */\n    function (panel, nextState) {\n        if (panel && !panel.disabled && panel.isOpen !== nextState) {\n            /** @type {?} */\n            var defaultPrevented_1 = false;\n            this.panelChange.emit({ panelId: panel.id, nextState: nextState, preventDefault: function () { defaultPrevented_1 = true; } });\n            if (!defaultPrevented_1) {\n                panel.isOpen = nextState;\n                if (nextState && this.closeOtherPanels) {\n                    this._closeOthers(panel.id);\n                }\n                this._updateActiveIds();\n            }\n        }\n    };\n    /**\n     * @param {?} panelId\n     * @return {?}\n     */\n    NgbAccordion.prototype._closeOthers = /**\n     * @param {?} panelId\n     * @return {?}\n     */\n    function (panelId) {\n        this.panels.forEach(function (panel) {\n            if (panel.id !== panelId) {\n                panel.isOpen = false;\n            }\n        });\n    };\n    /**\n     * @param {?} panelId\n     * @return {?}\n     */\n    NgbAccordion.prototype._findPanelById = /**\n     * @param {?} panelId\n     * @return {?}\n     */\n    function (panelId) { return this.panels.find(function (p) { return p.id === panelId; }); };\n    /**\n     * @return {?}\n     */\n    NgbAccordion.prototype._updateActiveIds = /**\n     * @return {?}\n     */\n    function () {\n        this.activeIds = this.panels.filter(function (panel) { return panel.isOpen && !panel.disabled; }).map(function (panel) { return panel.id; });\n    };\n    NgbAccordion.decorators = [\n        { type: Component, args: [{\n                    selector: 'ngb-accordion',\n                    exportAs: 'ngbAccordion',\n                    host: { 'class': 'accordion', 'role': 'tablist', '[attr.aria-multiselectable]': '!closeOtherPanels' },\n                    template: \"\\n    <ng-template ngFor let-panel [ngForOf]=\\\"panels\\\">\\n      <div class=\\\"card\\\">\\n        <div role=\\\"tab\\\" id=\\\"{{panel.id}}-header\\\" [class]=\\\"'card-header ' + (panel.type ? 'bg-'+panel.type: type ? 'bg-'+type : '')\\\">\\n          <h5 class=\\\"mb-0\\\">\\n            <button type=\\\"button\\\" class=\\\"btn btn-link\\\"\\n              (click)=\\\"toggle(panel.id)\\\" [disabled]=\\\"panel.disabled\\\" [class.collapsed]=\\\"!panel.isOpen\\\"\\n              [attr.aria-expanded]=\\\"panel.isOpen\\\" [attr.aria-controls]=\\\"panel.id\\\">\\n              {{panel.title}}<ng-template [ngTemplateOutlet]=\\\"panel.titleTpl?.templateRef\\\"></ng-template>\\n            </button>\\n          </h5>\\n        </div>\\n        <div id=\\\"{{panel.id}}\\\" role=\\\"tabpanel\\\" [attr.aria-labelledby]=\\\"panel.id + '-header'\\\"\\n             class=\\\"collapse\\\" [class.show]=\\\"panel.isOpen\\\" *ngIf=\\\"!destroyOnHide || panel.isOpen\\\">\\n          <div class=\\\"card-body\\\">\\n               <ng-template [ngTemplateOutlet]=\\\"panel.contentTpl?.templateRef\\\"></ng-template>\\n          </div>\\n        </div>\\n      </div>\\n    </ng-template>\\n  \"\n                }] }\n    ];\n    /** @nocollapse */\n    NgbAccordion.ctorParameters = function () { return [\n        { type: NgbAccordionConfig }\n    ]; };\n    NgbAccordion.propDecorators = {\n        panels: [{ type: ContentChildren, args: [NgbPanel,] }],\n        activeIds: [{ type: Input }],\n        closeOtherPanels: [{ type: Input, args: ['closeOthers',] }],\n        destroyOnHide: [{ type: Input }],\n        type: [{ type: Input }],\n        panelChange: [{ type: Output }]\n    };\n    return NgbAccordion;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar NGB_ACCORDION_DIRECTIVES = [NgbAccordion, NgbPanel, NgbPanelTitle, NgbPanelContent];\nvar NgbAccordionModule = /** @class */ (function () {\n    function NgbAccordionModule() {\n    }\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     */\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    NgbAccordionModule.forRoot = /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    function () { return { ngModule: NgbAccordionModule }; };\n    NgbAccordionModule.decorators = [\n        { type: NgModule, args: [{ declarations: NGB_ACCORDION_DIRECTIVES, exports: NGB_ACCORDION_DIRECTIVES, imports: [CommonModule] },] }\n    ];\n    return NgbAccordionModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Configuration service for the NgbAlert component.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the alerts used in the application.\n */\nvar NgbAlertConfig = /** @class */ (function () {\n    function NgbAlertConfig() {\n        this.dismissible = true;\n        this.type = 'warning';\n    }\n    NgbAlertConfig.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */ NgbAlertConfig.ngInjectableDef = defineInjectable({ factory: function NgbAlertConfig_Factory() { return new NgbAlertConfig(); }, token: NgbAlertConfig, providedIn: \"root\" });\n    return NgbAlertConfig;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Alerts can be used to provide feedback messages.\n */\nvar NgbAlert = /** @class */ (function () {\n    function NgbAlert(config, _renderer, _element) {\n        this._renderer = _renderer;\n        this._element = _element;\n        /**\n         * An event emitted when the close button is clicked. This event has no payload. Only relevant for dismissible alerts.\n         */\n        this.close = new EventEmitter();\n        this.dismissible = config.dismissible;\n        this.type = config.type;\n    }\n    /**\n     * @return {?}\n     */\n    NgbAlert.prototype.closeHandler = /**\n     * @return {?}\n     */\n    function () { this.close.emit(null); };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgbAlert.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        /** @type {?} */\n        var typeChange = changes['type'];\n        if (typeChange && !typeChange.firstChange) {\n            this._renderer.removeClass(this._element.nativeElement, \"alert-\" + typeChange.previousValue);\n            this._renderer.addClass(this._element.nativeElement, \"alert-\" + typeChange.currentValue);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgbAlert.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () { this._renderer.addClass(this._element.nativeElement, \"alert-\" + this.type); };\n    NgbAlert.decorators = [\n        { type: Component, args: [{\n                    selector: 'ngb-alert',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    host: { 'role': 'alert', 'class': 'alert', '[class.alert-dismissible]': 'dismissible' },\n                    template: \"\\n    <button *ngIf=\\\"dismissible\\\" type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" i18n-aria-label=\\\"@@ngb.alert.close\\\"\\n      (click)=\\\"closeHandler()\\\">\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\n    </button>\\n    <ng-content></ng-content>\\n    \",\n                    styles: [\"ngb-alert{display:block}\"]\n                }] }\n    ];\n    /** @nocollapse */\n    NgbAlert.ctorParameters = function () { return [\n        { type: NgbAlertConfig },\n        { type: Renderer2 },\n        { type: ElementRef }\n    ]; };\n    NgbAlert.propDecorators = {\n        dismissible: [{ type: Input }],\n        type: [{ type: Input }],\n        close: [{ type: Output }]\n    };\n    return NgbAlert;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbAlertModule = /** @class */ (function () {\n    function NgbAlertModule() {\n    }\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     */\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    NgbAlertModule.forRoot = /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    function () { return { ngModule: NgbAlertModule }; };\n    NgbAlertModule.decorators = [\n        { type: NgModule, args: [{ declarations: [NgbAlert], exports: [NgbAlert], imports: [CommonModule], entryComponents: [NgbAlert] },] }\n    ];\n    return NgbAlertModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbButtonLabel = /** @class */ (function () {\n    function NgbButtonLabel() {\n    }\n    NgbButtonLabel.decorators = [\n        { type: Directive, args: [{\n                    selector: '[ngbButtonLabel]',\n                    host: { '[class.btn]': 'true', '[class.active]': 'active', '[class.disabled]': 'disabled', '[class.focus]': 'focused' }\n                },] }\n    ];\n    return NgbButtonLabel;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar NGB_CHECKBOX_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return NgbCheckBox; }),\n    multi: true\n};\n/**\n * Easily create Bootstrap-style checkbox buttons. A value of a checked button is bound to a variable\n * specified via ngModel.\n */\nvar NgbCheckBox = /** @class */ (function () {\n    function NgbCheckBox(_label) {\n        this._label = _label;\n        /**\n         * A flag indicating if a given checkbox button is disabled.\n         */\n        this.disabled = false;\n        /**\n         * Value to be propagated as model when the checkbox is checked.\n         */\n        this.valueChecked = true;\n        /**\n         * Value to be propagated as model when the checkbox is unchecked.\n         */\n        this.valueUnChecked = false;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    Object.defineProperty(NgbCheckBox.prototype, \"focused\", {\n        set: /**\n         * @param {?} isFocused\n         * @return {?}\n         */\n        function (isFocused) {\n            this._label.focused = isFocused;\n            if (!isFocused) {\n                this.onTouched();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NgbCheckBox.prototype.onInputChange = /**\n     * @param {?} $event\n     * @return {?}\n     */\n    function ($event) {\n        /** @type {?} */\n        var modelToPropagate = $event.target.checked ? this.valueChecked : this.valueUnChecked;\n        this.onChange(modelToPropagate);\n        this.onTouched();\n        this.writeValue(modelToPropagate);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NgbCheckBox.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onChange = fn; };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NgbCheckBox.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NgbCheckBox.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this.disabled = isDisabled;\n        this._label.disabled = isDisabled;\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgbCheckBox.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.checked = value === this.valueChecked;\n        this._label.active = this.checked;\n    };\n    NgbCheckBox.decorators = [\n        { type: Directive, args: [{\n                    selector: '[ngbButton][type=checkbox]',\n                    host: {\n                        'autocomplete': 'off',\n                        '[checked]': 'checked',\n                        '[disabled]': 'disabled',\n                        '(change)': 'onInputChange($event)',\n                        '(focus)': 'focused = true',\n                        '(blur)': 'focused = false'\n                    },\n                    providers: [NGB_CHECKBOX_VALUE_ACCESSOR]\n                },] }\n    ];\n    /** @nocollapse */\n    NgbCheckBox.ctorParameters = function () { return [\n        { type: NgbButtonLabel }\n    ]; };\n    NgbCheckBox.propDecorators = {\n        disabled: [{ type: Input }],\n        valueChecked: [{ type: Input }],\n        valueUnChecked: [{ type: Input }]\n    };\n    return NgbCheckBox;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar NGB_RADIO_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return NgbRadioGroup; }),\n    multi: true\n};\n/** @type {?} */\nvar nextId$1 = 0;\n/**\n * Easily create Bootstrap-style radio buttons. A value of a selected button is bound to a variable\n * specified via ngModel.\n */\nvar NgbRadioGroup = /** @class */ (function () {\n    function NgbRadioGroup() {\n        this._radios = new Set();\n        this._value = null;\n        /**\n         * The name of the group. Unless enclosed inputs specify a name, this name is used as the name of the\n         * enclosed inputs. If not specified, a name is generated automatically.\n         */\n        this.name = \"ngb-radio-\" + nextId$1++;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    Object.defineProperty(NgbRadioGroup.prototype, \"disabled\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._disabled; },\n        set: /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        function (isDisabled) { this.setDisabledState(isDisabled); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} radio\n     * @return {?}\n     */\n    NgbRadioGroup.prototype.onRadioChange = /**\n     * @param {?} radio\n     * @return {?}\n     */\n    function (radio) {\n        this.writeValue(radio.value);\n        this.onChange(radio.value);\n    };\n    /**\n     * @return {?}\n     */\n    NgbRadioGroup.prototype.onRadioValueUpdate = /**\n     * @return {?}\n     */\n    function () { this._updateRadiosValue(); };\n    /**\n     * @param {?} radio\n     * @return {?}\n     */\n    NgbRadioGroup.prototype.register = /**\n     * @param {?} radio\n     * @return {?}\n     */\n    function (radio) { this._radios.add(radio); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NgbRadioGroup.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onChange = fn; };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NgbRadioGroup.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NgbRadioGroup.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._disabled = isDisabled;\n        this._updateRadiosDisabled();\n    };\n    /**\n     * @param {?} radio\n     * @return {?}\n     */\n    NgbRadioGroup.prototype.unregister = /**\n     * @param {?} radio\n     * @return {?}\n     */\n    function (radio) { this._radios.delete(radio); };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgbRadioGroup.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._value = value;\n        this._updateRadiosValue();\n    };\n    /**\n     * @return {?}\n     */\n    NgbRadioGroup.prototype._updateRadiosValue = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._radios.forEach(function (radio) { return radio.updateValue(_this._value); });\n    };\n    /**\n     * @return {?}\n     */\n    NgbRadioGroup.prototype._updateRadiosDisabled = /**\n     * @return {?}\n     */\n    function () { this._radios.forEach(function (radio) { return radio.updateDisabled(); }); };\n    NgbRadioGroup.decorators = [\n        { type: Directive, args: [{ selector: '[ngbRadioGroup]', host: { 'role': 'group' }, providers: [NGB_RADIO_VALUE_ACCESSOR] },] }\n    ];\n    NgbRadioGroup.propDecorators = {\n        name: [{ type: Input }]\n    };\n    return NgbRadioGroup;\n}());\n/**\n * Marks an input of type \"radio\" as part of the NgbRadioGroup.\n */\nvar NgbRadio = /** @class */ (function () {\n    function NgbRadio(_group, _label, _renderer, _element) {\n        this._group = _group;\n        this._label = _label;\n        this._renderer = _renderer;\n        this._element = _element;\n        this._value = null;\n        this._group.register(this);\n        this.updateDisabled();\n    }\n    Object.defineProperty(NgbRadio.prototype, \"value\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._value; },\n        /**\n         * You can specify model value of a given radio by binding to the value property.\n         */\n        set: /**\n         * You can specify model value of a given radio by binding to the value property.\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._value = value;\n            /** @type {?} */\n            var stringValue = value ? value.toString() : '';\n            this._renderer.setProperty(this._element.nativeElement, 'value', stringValue);\n            this._group.onRadioValueUpdate();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbRadio.prototype, \"disabled\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._group.disabled || this._disabled; },\n        /**\n         * A flag indicating if a given radio button is disabled.\n         */\n        set: /**\n         * A flag indicating if a given radio button is disabled.\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        function (isDisabled) {\n            this._disabled = isDisabled !== false;\n            this.updateDisabled();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbRadio.prototype, \"focused\", {\n        set: /**\n         * @param {?} isFocused\n         * @return {?}\n         */\n        function (isFocused) {\n            if (this._label) {\n                this._label.focused = isFocused;\n            }\n            if (!isFocused) {\n                this._group.onTouched();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbRadio.prototype, \"checked\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._checked; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbRadio.prototype, \"nameAttr\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.name || this._group.name; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NgbRadio.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () { this._group.unregister(this); };\n    /**\n     * @return {?}\n     */\n    NgbRadio.prototype.onChange = /**\n     * @return {?}\n     */\n    function () { this._group.onRadioChange(this); };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgbRadio.prototype.updateValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._checked = this.value === value;\n        this._label.active = this._checked;\n    };\n    /**\n     * @return {?}\n     */\n    NgbRadio.prototype.updateDisabled = /**\n     * @return {?}\n     */\n    function () { this._label.disabled = this.disabled; };\n    NgbRadio.decorators = [\n        { type: Directive, args: [{\n                    selector: '[ngbButton][type=radio]',\n                    host: {\n                        '[checked]': 'checked',\n                        '[disabled]': 'disabled',\n                        '[name]': 'nameAttr',\n                        '(change)': 'onChange()',\n                        '(focus)': 'focused = true',\n                        '(blur)': 'focused = false'\n                    }\n                },] }\n    ];\n    /** @nocollapse */\n    NgbRadio.ctorParameters = function () { return [\n        { type: NgbRadioGroup },\n        { type: NgbButtonLabel },\n        { type: Renderer2 },\n        { type: ElementRef }\n    ]; };\n    NgbRadio.propDecorators = {\n        name: [{ type: Input }],\n        value: [{ type: Input, args: ['value',] }],\n        disabled: [{ type: Input, args: ['disabled',] }]\n    };\n    return NgbRadio;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar NGB_BUTTON_DIRECTIVES = [NgbButtonLabel, NgbCheckBox, NgbRadioGroup, NgbRadio];\nvar NgbButtonsModule = /** @class */ (function () {\n    function NgbButtonsModule() {\n    }\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     */\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    NgbButtonsModule.forRoot = /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    function () { return { ngModule: NgbButtonsModule }; };\n    NgbButtonsModule.decorators = [\n        { type: NgModule, args: [{ declarations: NGB_BUTTON_DIRECTIVES, exports: NGB_BUTTON_DIRECTIVES },] }\n    ];\n    return NgbButtonsModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Configuration service for the NgbCarousel component.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the carousels used in the application.\n */\nvar NgbCarouselConfig = /** @class */ (function () {\n    function NgbCarouselConfig() {\n        this.interval = 5000;\n        this.wrap = true;\n        this.keyboard = true;\n        this.pauseOnHover = true;\n        this.showNavigationArrows = true;\n        this.showNavigationIndicators = true;\n    }\n    NgbCarouselConfig.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */ NgbCarouselConfig.ngInjectableDef = defineInjectable({ factory: function NgbCarouselConfig_Factory() { return new NgbCarouselConfig(); }, token: NgbCarouselConfig, providedIn: \"root\" });\n    return NgbCarouselConfig;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar nextId$2 = 0;\n/**\n * Represents an individual slide to be used within a carousel.\n */\nvar NgbSlide = /** @class */ (function () {\n    function NgbSlide(tplRef) {\n        this.tplRef = tplRef;\n        /**\n         * Unique slide identifier. Must be unique for the entire document for proper accessibility support.\n         * Will be auto-generated if not provided.\n         */\n        this.id = \"ngb-slide-\" + nextId$2++;\n    }\n    NgbSlide.decorators = [\n        { type: Directive, args: [{ selector: 'ng-template[ngbSlide]' },] }\n    ];\n    /** @nocollapse */\n    NgbSlide.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    NgbSlide.propDecorators = {\n        id: [{ type: Input }]\n    };\n    return NgbSlide;\n}());\n/**\n * Directive to easily create carousels based on Bootstrap's markup.\n */\nvar NgbCarousel = /** @class */ (function () {\n    function NgbCarousel(config, _platformId, _ngZone, _cd) {\n        this._platformId = _platformId;\n        this._ngZone = _ngZone;\n        this._cd = _cd;\n        this._start$ = new Subject();\n        this._stop$ = new Subject();\n        /**\n         * A carousel slide event fired when the slide transition is completed.\n         * See NgbSlideEvent for payload details\n         */\n        this.slide = new EventEmitter();\n        this.interval = config.interval;\n        this.wrap = config.wrap;\n        this.keyboard = config.keyboard;\n        this.pauseOnHover = config.pauseOnHover;\n        this.showNavigationArrows = config.showNavigationArrows;\n        this.showNavigationIndicators = config.showNavigationIndicators;\n    }\n    /**\n     * @return {?}\n     */\n    NgbCarousel.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // setInterval() doesn't play well with SSR and protractor,\n        // so we should run it in the browser and outside Angular\n        if (isPlatformBrowser(this._platformId)) {\n            this._ngZone.runOutsideAngular(function () {\n                _this._start$\n                    .pipe(map(function () { return _this.interval; }), filter(function (interval) { return interval > 0 && _this.slides.length > 0; }), switchMap(function (interval) { return timer(interval).pipe(takeUntil(_this._stop$)); }))\n                    .subscribe(function () { return _this._ngZone.run(function () { return _this.next(); }); });\n                _this._start$.next();\n            });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgbCarousel.prototype.ngAfterContentChecked = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var activeSlide = this._getSlideById(this.activeId);\n        this.activeId = activeSlide ? activeSlide.id : (this.slides.length ? this.slides.first.id : null);\n    };\n    /**\n     * @return {?}\n     */\n    NgbCarousel.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () { this._stop$.next(); };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgbCarousel.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if ('interval' in changes && !changes['interval'].isFirstChange()) {\n            this._start$.next();\n        }\n    };\n    /**\n     * Navigate to a slide with the specified identifier.\n     */\n    /**\n     * Navigate to a slide with the specified identifier.\n     * @param {?} slideId\n     * @return {?}\n     */\n    NgbCarousel.prototype.select = /**\n     * Navigate to a slide with the specified identifier.\n     * @param {?} slideId\n     * @return {?}\n     */\n    function (slideId) { this._cycleToSelected(slideId, this._getSlideEventDirection(this.activeId, slideId)); };\n    /**\n     * Navigate to the next slide.\n     */\n    /**\n     * Navigate to the next slide.\n     * @return {?}\n     */\n    NgbCarousel.prototype.prev = /**\n     * Navigate to the next slide.\n     * @return {?}\n     */\n    function () { this._cycleToSelected(this._getPrevSlide(this.activeId), NgbSlideEventDirection.RIGHT); };\n    /**\n     * Navigate to the next slide.\n     */\n    /**\n     * Navigate to the next slide.\n     * @return {?}\n     */\n    NgbCarousel.prototype.next = /**\n     * Navigate to the next slide.\n     * @return {?}\n     */\n    function () { this._cycleToSelected(this._getNextSlide(this.activeId), NgbSlideEventDirection.LEFT); };\n    /**\n     * Stops the carousel from cycling through items.\n     */\n    /**\n     * Stops the carousel from cycling through items.\n     * @return {?}\n     */\n    NgbCarousel.prototype.pause = /**\n     * Stops the carousel from cycling through items.\n     * @return {?}\n     */\n    function () { this._stop$.next(); };\n    /**\n     * Restarts cycling through the carousel slides from left to right.\n     */\n    /**\n     * Restarts cycling through the carousel slides from left to right.\n     * @return {?}\n     */\n    NgbCarousel.prototype.cycle = /**\n     * Restarts cycling through the carousel slides from left to right.\n     * @return {?}\n     */\n    function () { this._start$.next(); };\n    /**\n     * @param {?} slideIdx\n     * @param {?} direction\n     * @return {?}\n     */\n    NgbCarousel.prototype._cycleToSelected = /**\n     * @param {?} slideIdx\n     * @param {?} direction\n     * @return {?}\n     */\n    function (slideIdx, direction) {\n        /** @type {?} */\n        var selectedSlide = this._getSlideById(slideIdx);\n        if (selectedSlide && selectedSlide.id !== this.activeId) {\n            this.slide.emit({ prev: this.activeId, current: selectedSlide.id, direction: direction });\n            this._start$.next();\n            this.activeId = selectedSlide.id;\n        }\n        // we get here after the interval fires or any external API call like next(), prev() or select()\n        this._cd.markForCheck();\n    };\n    /**\n     * @param {?} currentActiveSlideId\n     * @param {?} nextActiveSlideId\n     * @return {?}\n     */\n    NgbCarousel.prototype._getSlideEventDirection = /**\n     * @param {?} currentActiveSlideId\n     * @param {?} nextActiveSlideId\n     * @return {?}\n     */\n    function (currentActiveSlideId, nextActiveSlideId) {\n        /** @type {?} */\n        var currentActiveSlideIdx = this._getSlideIdxById(currentActiveSlideId);\n        /** @type {?} */\n        var nextActiveSlideIdx = this._getSlideIdxById(nextActiveSlideId);\n        return currentActiveSlideIdx > nextActiveSlideIdx ? NgbSlideEventDirection.RIGHT : NgbSlideEventDirection.LEFT;\n    };\n    /**\n     * @param {?} slideId\n     * @return {?}\n     */\n    NgbCarousel.prototype._getSlideById = /**\n     * @param {?} slideId\n     * @return {?}\n     */\n    function (slideId) { return this.slides.find(function (slide) { return slide.id === slideId; }); };\n    /**\n     * @param {?} slideId\n     * @return {?}\n     */\n    NgbCarousel.prototype._getSlideIdxById = /**\n     * @param {?} slideId\n     * @return {?}\n     */\n    function (slideId) {\n        return this.slides.toArray().indexOf(this._getSlideById(slideId));\n    };\n    /**\n     * @param {?} currentSlideId\n     * @return {?}\n     */\n    NgbCarousel.prototype._getNextSlide = /**\n     * @param {?} currentSlideId\n     * @return {?}\n     */\n    function (currentSlideId) {\n        /** @type {?} */\n        var slideArr = this.slides.toArray();\n        /** @type {?} */\n        var currentSlideIdx = this._getSlideIdxById(currentSlideId);\n        /** @type {?} */\n        var isLastSlide = currentSlideIdx === slideArr.length - 1;\n        return isLastSlide ? (this.wrap ? slideArr[0].id : slideArr[slideArr.length - 1].id) :\n            slideArr[currentSlideIdx + 1].id;\n    };\n    /**\n     * @param {?} currentSlideId\n     * @return {?}\n     */\n    NgbCarousel.prototype._getPrevSlide = /**\n     * @param {?} currentSlideId\n     * @return {?}\n     */\n    function (currentSlideId) {\n        /** @type {?} */\n        var slideArr = this.slides.toArray();\n        /** @type {?} */\n        var currentSlideIdx = this._getSlideIdxById(currentSlideId);\n        /** @type {?} */\n        var isFirstSlide = currentSlideIdx === 0;\n        return isFirstSlide ? (this.wrap ? slideArr[slideArr.length - 1].id : slideArr[0].id) :\n            slideArr[currentSlideIdx - 1].id;\n    };\n    NgbCarousel.decorators = [\n        { type: Component, args: [{\n                    selector: 'ngb-carousel',\n                    exportAs: 'ngbCarousel',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: {\n                        'class': 'carousel slide',\n                        '[style.display]': '\"block\"',\n                        'tabIndex': '0',\n                        '(mouseenter)': 'pauseOnHover && pause()',\n                        '(mouseleave)': 'pauseOnHover && cycle()',\n                        '(keydown.arrowLeft)': 'keyboard && prev()',\n                        '(keydown.arrowRight)': 'keyboard && next()'\n                    },\n                    template: \"\\n    <ol class=\\\"carousel-indicators\\\" *ngIf=\\\"showNavigationIndicators\\\">\\n      <li *ngFor=\\\"let slide of slides\\\" [id]=\\\"slide.id\\\" [class.active]=\\\"slide.id === activeId\\\"\\n          (click)=\\\"select(slide.id); pauseOnHover && pause()\\\"></li>\\n    </ol>\\n    <div class=\\\"carousel-inner\\\">\\n      <div *ngFor=\\\"let slide of slides\\\" class=\\\"carousel-item\\\" [class.active]=\\\"slide.id === activeId\\\">\\n        <ng-template [ngTemplateOutlet]=\\\"slide.tplRef\\\"></ng-template>\\n      </div>\\n    </div>\\n    <a class=\\\"carousel-control-prev\\\" role=\\\"button\\\" (click)=\\\"prev()\\\" *ngIf=\\\"showNavigationArrows\\\">\\n      <span class=\\\"carousel-control-prev-icon\\\" aria-hidden=\\\"true\\\"></span>\\n      <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.carousel.previous\\\">Previous</span>\\n    </a>\\n    <a class=\\\"carousel-control-next\\\" role=\\\"button\\\" (click)=\\\"next()\\\" *ngIf=\\\"showNavigationArrows\\\">\\n      <span class=\\\"carousel-control-next-icon\\\" aria-hidden=\\\"true\\\"></span>\\n      <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.carousel.next\\\">Next</span>\\n    </a>\\n  \"\n                }] }\n    ];\n    /** @nocollapse */\n    NgbCarousel.ctorParameters = function () { return [\n        { type: NgbCarouselConfig },\n        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n        { type: NgZone },\n        { type: ChangeDetectorRef }\n    ]; };\n    NgbCarousel.propDecorators = {\n        slides: [{ type: ContentChildren, args: [NgbSlide,] }],\n        activeId: [{ type: Input }],\n        interval: [{ type: Input }],\n        wrap: [{ type: Input }],\n        keyboard: [{ type: Input }],\n        pauseOnHover: [{ type: Input }],\n        showNavigationArrows: [{ type: Input }],\n        showNavigationIndicators: [{ type: Input }],\n        slide: [{ type: Output }]\n    };\n    return NgbCarousel;\n}());\n/** @enum {string} */\nvar NgbSlideEventDirection = {\n    LEFT: (/** @type {?} */ ('left')),\n    RIGHT: (/** @type {?} */ ('right')),\n};\n/** @type {?} */\nvar NGB_CAROUSEL_DIRECTIVES = [NgbCarousel, NgbSlide];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbCarouselModule = /** @class */ (function () {\n    function NgbCarouselModule() {\n    }\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     */\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    NgbCarouselModule.forRoot = /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    function () { return { ngModule: NgbCarouselModule }; };\n    NgbCarouselModule.decorators = [\n        { type: NgModule, args: [{ declarations: NGB_CAROUSEL_DIRECTIVES, exports: NGB_CAROUSEL_DIRECTIVES, imports: [CommonModule] },] }\n    ];\n    return NgbCarouselModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * The NgbCollapse directive provides a simple way to hide and show an element with animations.\n */\nvar NgbCollapse = /** @class */ (function () {\n    function NgbCollapse() {\n        /**\n         * A flag indicating collapsed (true) or open (false) state.\n         */\n        this.collapsed = false;\n    }\n    NgbCollapse.decorators = [\n        { type: Directive, args: [{\n                    selector: '[ngbCollapse]',\n                    exportAs: 'ngbCollapse',\n                    host: { '[class.collapse]': 'true', '[class.show]': '!collapsed' }\n                },] }\n    ];\n    NgbCollapse.propDecorators = {\n        collapsed: [{ type: Input, args: ['ngbCollapse',] }]\n    };\n    return NgbCollapse;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbCollapseModule = /** @class */ (function () {\n    function NgbCollapseModule() {\n    }\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     */\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    NgbCollapseModule.forRoot = /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    function () { return { ngModule: NgbCollapseModule }; };\n    NgbCollapseModule.decorators = [\n        { type: NgModule, args: [{ declarations: [NgbCollapse], exports: [NgbCollapse] },] }\n    ];\n    return NgbCollapseModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Simple class used for a date representation that datepicker also uses internally\n *\n * \\@since 3.0.0\n */\nvar  /**\n * Simple class used for a date representation that datepicker also uses internally\n *\n * \\@since 3.0.0\n */\nNgbDate = /** @class */ (function () {\n    function NgbDate(year, month, day) {\n        this.year = isInteger(year) ? year : null;\n        this.month = isInteger(month) ? month : null;\n        this.day = isInteger(day) ? day : null;\n    }\n    /**\n     * Static method. Creates a new date object from the NgbDateStruct, ex. NgbDate.from({year: 2000,\n     * month: 5, day: 1}). If the 'date' is already of NgbDate, the method will return the same object\n     */\n    /**\n     * Static method. Creates a new date object from the NgbDateStruct, ex. NgbDate.from({year: 2000,\n     * month: 5, day: 1}). If the 'date' is already of NgbDate, the method will return the same object\n     * @param {?} date\n     * @return {?}\n     */\n    NgbDate.from = /**\n     * Static method. Creates a new date object from the NgbDateStruct, ex. NgbDate.from({year: 2000,\n     * month: 5, day: 1}). If the 'date' is already of NgbDate, the method will return the same object\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        if (date instanceof NgbDate) {\n            return date;\n        }\n        return date ? new NgbDate(date.year, date.month, date.day) : null;\n    };\n    /**\n     * Checks if current date is equal to another date\n     */\n    /**\n     * Checks if current date is equal to another date\n     * @param {?} other\n     * @return {?}\n     */\n    NgbDate.prototype.equals = /**\n     * Checks if current date is equal to another date\n     * @param {?} other\n     * @return {?}\n     */\n    function (other) {\n        return other && this.year === other.year && this.month === other.month && this.day === other.day;\n    };\n    /**\n     * Checks if current date is before another date\n     */\n    /**\n     * Checks if current date is before another date\n     * @param {?} other\n     * @return {?}\n     */\n    NgbDate.prototype.before = /**\n     * Checks if current date is before another date\n     * @param {?} other\n     * @return {?}\n     */\n    function (other) {\n        if (!other) {\n            return false;\n        }\n        if (this.year === other.year) {\n            if (this.month === other.month) {\n                return this.day === other.day ? false : this.day < other.day;\n            }\n            else {\n                return this.month < other.month;\n            }\n        }\n        else {\n            return this.year < other.year;\n        }\n    };\n    /**\n     * Checks if current date is after another date\n     */\n    /**\n     * Checks if current date is after another date\n     * @param {?} other\n     * @return {?}\n     */\n    NgbDate.prototype.after = /**\n     * Checks if current date is after another date\n     * @param {?} other\n     * @return {?}\n     */\n    function (other) {\n        if (!other) {\n            return false;\n        }\n        if (this.year === other.year) {\n            if (this.month === other.month) {\n                return this.day === other.day ? false : this.day > other.day;\n            }\n            else {\n                return this.month > other.month;\n            }\n        }\n        else {\n            return this.year > other.year;\n        }\n    };\n    return NgbDate;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @param {?} jsDate\n * @return {?}\n */\nfunction fromJSDate(jsDate) {\n    return new NgbDate(jsDate.getFullYear(), jsDate.getMonth() + 1, jsDate.getDate());\n}\n/**\n * @param {?} date\n * @return {?}\n */\nfunction toJSDate(date) {\n    /** @type {?} */\n    var jsDate = new Date(date.year, date.month - 1, date.day, 12);\n    // this is done avoid 30 -> 1930 conversion\n    if (!isNaN(jsDate.getTime())) {\n        jsDate.setFullYear(date.year);\n    }\n    return jsDate;\n}\n/**\n * @return {?}\n */\nfunction NGB_DATEPICKER_CALENDAR_FACTORY() {\n    return new NgbCalendarGregorian();\n}\n/**\n * Calendar used by the datepicker.\n * Default implementation uses Gregorian calendar.\n * @abstract\n */\nvar NgbCalendar = /** @class */ (function () {\n    function NgbCalendar() {\n    }\n    NgbCalendar.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root', useFactory: NGB_DATEPICKER_CALENDAR_FACTORY },] }\n    ];\n    /** @nocollapse */ NgbCalendar.ngInjectableDef = defineInjectable({ factory: NGB_DATEPICKER_CALENDAR_FACTORY, token: NgbCalendar, providedIn: \"root\" });\n    return NgbCalendar;\n}());\nvar NgbCalendarGregorian = /** @class */ (function (_super) {\n    __extends(NgbCalendarGregorian, _super);\n    function NgbCalendarGregorian() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    NgbCalendarGregorian.prototype.getDaysPerWeek = /**\n     * @return {?}\n     */\n    function () { return 7; };\n    /**\n     * @return {?}\n     */\n    NgbCalendarGregorian.prototype.getMonths = /**\n     * @return {?}\n     */\n    function () { return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; };\n    /**\n     * @return {?}\n     */\n    NgbCalendarGregorian.prototype.getWeeksPerMonth = /**\n     * @return {?}\n     */\n    function () { return 6; };\n    /**\n     * @param {?} date\n     * @param {?=} period\n     * @param {?=} number\n     * @return {?}\n     */\n    NgbCalendarGregorian.prototype.getNext = /**\n     * @param {?} date\n     * @param {?=} period\n     * @param {?=} number\n     * @return {?}\n     */\n    function (date, period, number) {\n        if (period === void 0) { period = 'd'; }\n        if (number === void 0) { number = 1; }\n        /** @type {?} */\n        var jsDate = toJSDate(date);\n        switch (period) {\n            case 'y':\n                return new NgbDate(date.year + number, 1, 1);\n            case 'm':\n                jsDate = new Date(date.year, date.month + number - 1, 1, 12);\n                break;\n            case 'd':\n                jsDate.setDate(jsDate.getDate() + number);\n                break;\n            default:\n                return date;\n        }\n        return fromJSDate(jsDate);\n    };\n    /**\n     * @param {?} date\n     * @param {?=} period\n     * @param {?=} number\n     * @return {?}\n     */\n    NgbCalendarGregorian.prototype.getPrev = /**\n     * @param {?} date\n     * @param {?=} period\n     * @param {?=} number\n     * @return {?}\n     */\n    function (date, period, number) {\n        if (period === void 0) { period = 'd'; }\n        if (number === void 0) { number = 1; }\n        return this.getNext(date, period, -number);\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NgbCalendarGregorian.prototype.getWeekday = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        /** @type {?} */\n        var jsDate = toJSDate(date);\n        /** @type {?} */\n        var day = jsDate.getDay();\n        // in JS Date Sun=0, in ISO 8601 Sun=7\n        return day === 0 ? 7 : day;\n    };\n    /**\n     * @param {?} week\n     * @param {?} firstDayOfWeek\n     * @return {?}\n     */\n    NgbCalendarGregorian.prototype.getWeekNumber = /**\n     * @param {?} week\n     * @param {?} firstDayOfWeek\n     * @return {?}\n     */\n    function (week, firstDayOfWeek) {\n        // in JS Date Sun=0, in ISO 8601 Sun=7\n        if (firstDayOfWeek === 7) {\n            firstDayOfWeek = 0;\n        }\n        /** @type {?} */\n        var thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;\n        /** @type {?} */\n        var date = week[thursdayIndex];\n        /** @type {?} */\n        var jsDate = toJSDate(date);\n        jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7)); // Thursday\n        // Thursday\n        /** @type {?} */\n        var time = jsDate.getTime();\n        jsDate.setMonth(0); // Compare with Jan 1\n        jsDate.setDate(1);\n        return Math.floor(Math.round((time - jsDate.getTime()) / 86400000) / 7) + 1;\n    };\n    /**\n     * @return {?}\n     */\n    NgbCalendarGregorian.prototype.getToday = /**\n     * @return {?}\n     */\n    function () { return fromJSDate(new Date()); };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NgbCalendarGregorian.prototype.isValid = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        if (!date || !isInteger(date.year) || !isInteger(date.month) || !isInteger(date.day)) {\n            return false;\n        }\n        // year 0 doesn't exist in Gregorian calendar\n        if (date.year === 0) {\n            return false;\n        }\n        /** @type {?} */\n        var jsDate = toJSDate(date);\n        return !isNaN(jsDate.getTime()) && jsDate.getFullYear() === date.year && jsDate.getMonth() + 1 === date.month &&\n            jsDate.getDate() === date.day;\n    };\n    NgbCalendarGregorian.decorators = [\n        { type: Injectable }\n    ];\n    return NgbCalendarGregorian;\n}(NgbCalendar));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @param {?} prev\n * @param {?} next\n * @return {?}\n */\nfunction isChangedDate(prev, next) {\n    return !dateComparator(prev, next);\n}\n/**\n * @param {?} prev\n * @param {?} next\n * @return {?}\n */\nfunction dateComparator(prev, next) {\n    return (!prev && !next) || (!!prev && !!next && prev.equals(next));\n}\n/**\n * @param {?} minDate\n * @param {?} maxDate\n * @return {?}\n */\nfunction checkMinBeforeMax(minDate, maxDate) {\n    if (maxDate && minDate && maxDate.before(minDate)) {\n        throw new Error(\"'maxDate' \" + maxDate + \" should be greater than 'minDate' \" + minDate);\n    }\n}\n/**\n * @param {?} date\n * @param {?} minDate\n * @param {?} maxDate\n * @return {?}\n */\nfunction checkDateInRange(date, minDate, maxDate) {\n    if (date && minDate && date.before(minDate)) {\n        return minDate;\n    }\n    if (date && maxDate && date.after(maxDate)) {\n        return maxDate;\n    }\n    return date;\n}\n/**\n * @param {?} date\n * @param {?} state\n * @return {?}\n */\nfunction isDateSelectable(date, state) {\n    var minDate = state.minDate, maxDate = state.maxDate, disabled = state.disabled, markDisabled = state.markDisabled;\n    // clang-format off\n    return !(!isDefined(date) ||\n        disabled ||\n        (markDisabled && markDisabled(date, { year: date.year, month: date.month })) ||\n        (minDate && date.before(minDate)) ||\n        (maxDate && date.after(maxDate)));\n    // clang-format on\n}\n/**\n * @param {?} calendar\n * @param {?} date\n * @param {?} minDate\n * @param {?} maxDate\n * @return {?}\n */\nfunction generateSelectBoxMonths(calendar, date, minDate, maxDate) {\n    if (!date) {\n        return [];\n    }\n    /** @type {?} */\n    var months = calendar.getMonths(date.year);\n    if (minDate && date.year === minDate.year) {\n        /** @type {?} */\n        var index = months.findIndex(function (month) { return month === minDate.month; });\n        months = months.slice(index);\n    }\n    if (maxDate && date.year === maxDate.year) {\n        /** @type {?} */\n        var index = months.findIndex(function (month) { return month === maxDate.month; });\n        months = months.slice(0, index + 1);\n    }\n    return months;\n}\n/**\n * @param {?} date\n * @param {?} minDate\n * @param {?} maxDate\n * @return {?}\n */\nfunction generateSelectBoxYears(date, minDate, maxDate) {\n    if (!date) {\n        return [];\n    }\n    /** @type {?} */\n    var start = minDate && minDate.year || date.year - 10;\n    /** @type {?} */\n    var end = maxDate && maxDate.year || date.year + 10;\n    return Array.from({ length: end - start + 1 }, function (e, i) { return start + i; });\n}\n/**\n * @param {?} calendar\n * @param {?} date\n * @param {?} maxDate\n * @return {?}\n */\nfunction nextMonthDisabled(calendar, date, maxDate) {\n    return maxDate && calendar.getNext(date, 'm').after(maxDate);\n}\n/**\n * @param {?} calendar\n * @param {?} date\n * @param {?} minDate\n * @return {?}\n */\nfunction prevMonthDisabled(calendar, date, minDate) {\n    /** @type {?} */\n    var prevDate = calendar.getPrev(date, 'm');\n    return minDate && (prevDate.year === minDate.year && prevDate.month < minDate.month ||\n        prevDate.year < minDate.year && minDate.month === 1);\n}\n/**\n * @param {?} calendar\n * @param {?} date\n * @param {?} state\n * @param {?} i18n\n * @param {?} force\n * @return {?}\n */\nfunction buildMonths(calendar, date, state, i18n, force) {\n    var displayMonths = state.displayMonths, months = state.months;\n    // move old months to a temporary array\n    /** @type {?} */\n    var monthsToReuse = months.splice(0, months.length);\n    // generate new first dates, nullify or reuse months\n    /** @type {?} */\n    var firstDates = Array.from({ length: displayMonths }, function (_, i) {\n        /** @type {?} */\n        var firstDate = calendar.getNext(date, 'm', i);\n        months[i] = null;\n        if (!force) {\n            /** @type {?} */\n            var reusedIndex = monthsToReuse.findIndex(function (month) { return month.firstDate.equals(firstDate); });\n            // move reused month back to months\n            if (reusedIndex !== -1) {\n                months[i] = monthsToReuse.splice(reusedIndex, 1)[0];\n            }\n        }\n        return firstDate;\n    });\n    // rebuild nullified months\n    firstDates.forEach(function (firstDate, i) {\n        if (months[i] === null) {\n            months[i] = buildMonth(calendar, firstDate, state, i18n, monthsToReuse.shift() || (/** @type {?} */ ({})));\n        }\n    });\n    return months;\n}\n/**\n * @param {?} calendar\n * @param {?} date\n * @param {?} state\n * @param {?} i18n\n * @param {?=} month\n * @return {?}\n */\nfunction buildMonth(calendar, date, state, i18n, month) {\n    if (month === void 0) { month = (/** @type {?} */ ({})); }\n    var dayTemplateData = state.dayTemplateData, minDate = state.minDate, maxDate = state.maxDate, firstDayOfWeek = state.firstDayOfWeek, markDisabled = state.markDisabled, outsideDays = state.outsideDays;\n    month.firstDate = null;\n    month.lastDate = null;\n    month.number = date.month;\n    month.year = date.year;\n    month.weeks = month.weeks || [];\n    month.weekdays = month.weekdays || [];\n    date = getFirstViewDate(calendar, date, firstDayOfWeek);\n    // month has weeks\n    for (var week = 0; week < calendar.getWeeksPerMonth(); week++) {\n        /** @type {?} */\n        var weekObject = month.weeks[week];\n        if (!weekObject) {\n            weekObject = month.weeks[week] = { number: 0, days: [], collapsed: true };\n        }\n        /** @type {?} */\n        var days = weekObject.days;\n        // week has days\n        for (var day = 0; day < calendar.getDaysPerWeek(); day++) {\n            if (week === 0) {\n                month.weekdays[day] = calendar.getWeekday(date);\n            }\n            /** @type {?} */\n            var newDate = new NgbDate(date.year, date.month, date.day);\n            /** @type {?} */\n            var nextDate = calendar.getNext(newDate);\n            /** @type {?} */\n            var ariaLabel = i18n.getDayAriaLabel(newDate);\n            // marking date as disabled\n            /** @type {?} */\n            var disabled = !!((minDate && newDate.before(minDate)) || (maxDate && newDate.after(maxDate)));\n            if (!disabled && markDisabled) {\n                disabled = markDisabled(newDate, { month: month.number, year: month.year });\n            }\n            // adding user-provided data to the context\n            /** @type {?} */\n            var contextUserData = dayTemplateData ? dayTemplateData(newDate, { month: month.number, year: month.year }) : undefined;\n            // saving first date of the month\n            if (month.firstDate === null && newDate.month === month.number) {\n                month.firstDate = newDate;\n            }\n            // saving last date of the month\n            if (newDate.month === month.number && nextDate.month !== month.number) {\n                month.lastDate = newDate;\n            }\n            /** @type {?} */\n            var dayObject = days[day];\n            if (!dayObject) {\n                dayObject = days[day] = (/** @type {?} */ ({}));\n            }\n            dayObject.date = newDate;\n            dayObject.context = Object.assign(dayObject.context || {}, {\n                $implicit: newDate,\n                date: newDate,\n                data: contextUserData,\n                currentMonth: month.number, disabled: disabled,\n                focused: false,\n                selected: false\n            });\n            dayObject.tabindex = -1;\n            dayObject.ariaLabel = ariaLabel;\n            dayObject.hidden = false;\n            date = nextDate;\n        }\n        weekObject.number = calendar.getWeekNumber(days.map(function (day) { return day.date; }), firstDayOfWeek);\n        // marking week as collapsed\n        weekObject.collapsed = outsideDays === 'collapsed' && days[0].date.month !== month.number &&\n            days[days.length - 1].date.month !== month.number;\n    }\n    return month;\n}\n/**\n * @param {?} calendar\n * @param {?} date\n * @param {?} firstDayOfWeek\n * @return {?}\n */\nfunction getFirstViewDate(calendar, date, firstDayOfWeek) {\n    /** @type {?} */\n    var daysPerWeek = calendar.getDaysPerWeek();\n    /** @type {?} */\n    var firstMonthDate = new NgbDate(date.year, date.month, 1);\n    /** @type {?} */\n    var dayOfWeek = calendar.getWeekday(firstMonthDate) % daysPerWeek;\n    return calendar.getPrev(firstMonthDate, 'd', (daysPerWeek + dayOfWeek - firstDayOfWeek) % daysPerWeek);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @param {?} locale\n * @return {?}\n */\nfunction NGB_DATEPICKER_18N_FACTORY(locale) {\n    return new NgbDatepickerI18nDefault(locale);\n}\n/**\n * Type of the service supplying month and weekday names to to NgbDatepicker component.\n * The default implementation of this service honors the Angular locale, and uses the registered locale data,\n * as explained in the Angular i18n guide.\n * See the i18n demo for how to extend this class and define a custom provider for i18n.\n * @abstract\n */\nvar NgbDatepickerI18n = /** @class */ (function () {\n    function NgbDatepickerI18n() {\n    }\n    /**\n     * Returns the textual representation of a day that is rendered in a day cell\n     *\n     * @since 3.0.0\n     */\n    /**\n     * Returns the textual representation of a day that is rendered in a day cell\n     *\n     * \\@since 3.0.0\n     * @param {?} date\n     * @return {?}\n     */\n    NgbDatepickerI18n.prototype.getDayNumerals = /**\n     * Returns the textual representation of a day that is rendered in a day cell\n     *\n     * \\@since 3.0.0\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) { return \"\" + date.day; };\n    /**\n     * Returns the textual representation of a week number rendered by date picker\n     *\n     * @since 3.0.0\n     */\n    /**\n     * Returns the textual representation of a week number rendered by date picker\n     *\n     * \\@since 3.0.0\n     * @param {?} weekNumber\n     * @return {?}\n     */\n    NgbDatepickerI18n.prototype.getWeekNumerals = /**\n     * Returns the textual representation of a week number rendered by date picker\n     *\n     * \\@since 3.0.0\n     * @param {?} weekNumber\n     * @return {?}\n     */\n    function (weekNumber) { return \"\" + weekNumber; };\n    /**\n     * Returns the textual representation of a year that is rendered\n     * in date picker year select box\n     *\n     * @since 3.0.0\n     */\n    /**\n     * Returns the textual representation of a year that is rendered\n     * in date picker year select box\n     *\n     * \\@since 3.0.0\n     * @param {?} year\n     * @return {?}\n     */\n    NgbDatepickerI18n.prototype.getYearNumerals = /**\n     * Returns the textual representation of a year that is rendered\n     * in date picker year select box\n     *\n     * \\@since 3.0.0\n     * @param {?} year\n     * @return {?}\n     */\n    function (year) { return \"\" + year; };\n    NgbDatepickerI18n.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root', useFactory: NGB_DATEPICKER_18N_FACTORY, deps: [LOCALE_ID] },] }\n    ];\n    /** @nocollapse */ NgbDatepickerI18n.ngInjectableDef = defineInjectable({ factory: function NgbDatepickerI18n_Factory() { return NGB_DATEPICKER_18N_FACTORY(inject(LOCALE_ID)); }, token: NgbDatepickerI18n, providedIn: \"root\" });\n    return NgbDatepickerI18n;\n}());\nvar NgbDatepickerI18nDefault = /** @class */ (function (_super) {\n    __extends(NgbDatepickerI18nDefault, _super);\n    function NgbDatepickerI18nDefault(_locale) {\n        var _this = _super.call(this) || this;\n        _this._locale = _locale;\n        /** @type {?} */\n        var weekdaysStartingOnSunday = getLocaleDayNames(_locale, FormStyle.Standalone, TranslationWidth.Short);\n        _this._weekdaysShort = weekdaysStartingOnSunday.map(function (day, index) { return weekdaysStartingOnSunday[(index + 1) % 7]; });\n        _this._monthsShort = getLocaleMonthNames(_locale, FormStyle.Standalone, TranslationWidth.Abbreviated);\n        _this._monthsFull = getLocaleMonthNames(_locale, FormStyle.Standalone, TranslationWidth.Wide);\n        return _this;\n    }\n    /**\n     * @param {?} weekday\n     * @return {?}\n     */\n    NgbDatepickerI18nDefault.prototype.getWeekdayShortName = /**\n     * @param {?} weekday\n     * @return {?}\n     */\n    function (weekday) { return this._weekdaysShort[weekday - 1]; };\n    /**\n     * @param {?} month\n     * @return {?}\n     */\n    NgbDatepickerI18nDefault.prototype.getMonthShortName = /**\n     * @param {?} month\n     * @return {?}\n     */\n    function (month) { return this._monthsShort[month - 1]; };\n    /**\n     * @param {?} month\n     * @return {?}\n     */\n    NgbDatepickerI18nDefault.prototype.getMonthFullName = /**\n     * @param {?} month\n     * @return {?}\n     */\n    function (month) { return this._monthsFull[month - 1]; };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NgbDatepickerI18nDefault.prototype.getDayAriaLabel = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        /** @type {?} */\n        var jsDate = new Date(date.year, date.month - 1, date.day);\n        return formatDate(jsDate, 'fullDate', this._locale);\n    };\n    NgbDatepickerI18nDefault.decorators = [\n        { type: Injectable }\n    ];\n    /** @nocollapse */\n    NgbDatepickerI18nDefault.ctorParameters = function () { return [\n        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n    ]; };\n    return NgbDatepickerI18nDefault;\n}(NgbDatepickerI18n));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbDatepickerService = /** @class */ (function () {\n    function NgbDatepickerService(_calendar, _i18n) {\n        this._calendar = _calendar;\n        this._i18n = _i18n;\n        this._model$ = new Subject();\n        this._select$ = new Subject();\n        this._state = {\n            disabled: false,\n            displayMonths: 1,\n            firstDayOfWeek: 1,\n            focusVisible: false,\n            months: [],\n            navigation: 'select',\n            outsideDays: 'visible',\n            prevDisabled: false,\n            nextDisabled: false,\n            selectBoxes: { years: [], months: [] },\n            selectedDate: null\n        };\n    }\n    Object.defineProperty(NgbDatepickerService.prototype, \"model$\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._model$.pipe(filter(function (model) { return model.months.length > 0; })); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbDatepickerService.prototype, \"select$\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._select$.pipe(filter(function (date) { return date !== null; })); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbDatepickerService.prototype, \"dayTemplateData\", {\n        set: /**\n         * @param {?} dayTemplateData\n         * @return {?}\n         */\n        function (dayTemplateData) {\n            if (this._state.dayTemplateData !== dayTemplateData) {\n                this._nextState({ dayTemplateData: dayTemplateData });\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbDatepickerService.prototype, \"disabled\", {\n        set: /**\n         * @param {?} disabled\n         * @return {?}\n         */\n        function (disabled) {\n            if (this._state.disabled !== disabled) {\n                this._nextState({ disabled: disabled });\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbDatepickerService.prototype, \"displayMonths\", {\n        set: /**\n         * @param {?} displayMonths\n         * @return {?}\n         */\n        function (displayMonths) {\n            displayMonths = toInteger(displayMonths);\n            if (isInteger(displayMonths) && displayMonths > 0 && this._state.displayMonths !== displayMonths) {\n                this._nextState({ displayMonths: displayMonths });\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbDatepickerService.prototype, \"firstDayOfWeek\", {\n        set: /**\n         * @param {?} firstDayOfWeek\n         * @return {?}\n         */\n        function (firstDayOfWeek) {\n            firstDayOfWeek = toInteger(firstDayOfWeek);\n            if (isInteger(firstDayOfWeek) && firstDayOfWeek >= 0 && this._state.firstDayOfWeek !== firstDayOfWeek) {\n                this._nextState({ firstDayOfWeek: firstDayOfWeek });\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbDatepickerService.prototype, \"focusVisible\", {\n        set: /**\n         * @param {?} focusVisible\n         * @return {?}\n         */\n        function (focusVisible) {\n            if (this._state.focusVisible !== focusVisible && !this._state.disabled) {\n                this._nextState({ focusVisible: focusVisible });\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbDatepickerService.prototype, \"maxDate\", {\n        set: /**\n         * @param {?} date\n         * @return {?}\n         */\n        function (date) {\n            /** @type {?} */\n            var maxDate = this.toValidDate(date, null);\n            if (isChangedDate(this._state.maxDate, maxDate)) {\n                this._nextState({ maxDate: maxDate });\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbDatepickerService.prototype, \"markDisabled\", {\n        set: /**\n         * @param {?} markDisabled\n         * @return {?}\n         */\n        function (markDisabled) {\n            if (this._state.markDisabled !== markDisabled) {\n                this._nextState({ markDisabled: markDisabled });\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbDatepickerService.prototype, \"minDate\", {\n        set: /**\n         * @param {?} date\n         * @return {?}\n         */\n        function (date) {\n            /** @type {?} */\n            var minDate = this.toValidDate(date, null);\n            if (isChangedDate(this._state.minDate, minDate)) {\n                this._nextState({ minDate: minDate });\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbDatepickerService.prototype, \"navigation\", {\n        set: /**\n         * @param {?} navigation\n         * @return {?}\n         */\n        function (navigation) {\n            if (this._state.navigation !== navigation) {\n                this._nextState({ navigation: navigation });\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbDatepickerService.prototype, \"outsideDays\", {\n        set: /**\n         * @param {?} outsideDays\n         * @return {?}\n         */\n        function (outsideDays) {\n            if (this._state.outsideDays !== outsideDays) {\n                this._nextState({ outsideDays: outsideDays });\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NgbDatepickerService.prototype.focus = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        if (!this._state.disabled && this._calendar.isValid(date) && isChangedDate(this._state.focusDate, date)) {\n            this._nextState({ focusDate: date });\n        }\n    };\n    /**\n     * @param {?=} period\n     * @param {?=} number\n     * @return {?}\n     */\n    NgbDatepickerService.prototype.focusMove = /**\n     * @param {?=} period\n     * @param {?=} number\n     * @return {?}\n     */\n    function (period, number) {\n        this.focus(this._calendar.getNext(this._state.focusDate, period, number));\n    };\n    /**\n     * @return {?}\n     */\n    NgbDatepickerService.prototype.focusSelect = /**\n     * @return {?}\n     */\n    function () {\n        if (isDateSelectable(this._state.focusDate, this._state)) {\n            this.select(this._state.focusDate, { emitEvent: true });\n        }\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NgbDatepickerService.prototype.open = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        /** @type {?} */\n        var firstDate = this.toValidDate(date, this._calendar.getToday());\n        if (!this._state.disabled) {\n            this._nextState({ firstDate: firstDate });\n        }\n    };\n    /**\n     * @param {?} date\n     * @param {?=} options\n     * @return {?}\n     */\n    NgbDatepickerService.prototype.select = /**\n     * @param {?} date\n     * @param {?=} options\n     * @return {?}\n     */\n    function (date, options) {\n        if (options === void 0) { options = {}; }\n        /** @type {?} */\n        var selectedDate = this.toValidDate(date, null);\n        if (!this._state.disabled) {\n            if (isChangedDate(this._state.selectedDate, selectedDate)) {\n                this._nextState({ selectedDate: selectedDate });\n            }\n            if (options.emitEvent && isDateSelectable(selectedDate, this._state)) {\n                this._select$.next(selectedDate);\n            }\n        }\n    };\n    /**\n     * @param {?} date\n     * @param {?=} defaultValue\n     * @return {?}\n     */\n    NgbDatepickerService.prototype.toValidDate = /**\n     * @param {?} date\n     * @param {?=} defaultValue\n     * @return {?}\n     */\n    function (date, defaultValue) {\n        /** @type {?} */\n        var ngbDate = NgbDate.from(date);\n        if (defaultValue === undefined) {\n            defaultValue = this._calendar.getToday();\n        }\n        return this._calendar.isValid(ngbDate) ? ngbDate : defaultValue;\n    };\n    /**\n     * @param {?} patch\n     * @return {?}\n     */\n    NgbDatepickerService.prototype._nextState = /**\n     * @param {?} patch\n     * @return {?}\n     */\n    function (patch) {\n        /** @type {?} */\n        var newState = this._updateState(patch);\n        this._patchContexts(newState);\n        this._state = newState;\n        this._model$.next(this._state);\n    };\n    /**\n     * @param {?} state\n     * @return {?}\n     */\n    NgbDatepickerService.prototype._patchContexts = /**\n     * @param {?} state\n     * @return {?}\n     */\n    function (state) {\n        var months = state.months, displayMonths = state.displayMonths, selectedDate = state.selectedDate, focusDate = state.focusDate, focusVisible = state.focusVisible, disabled = state.disabled, outsideDays = state.outsideDays;\n        state.months.forEach(function (month) {\n            month.weeks.forEach(function (week) {\n                week.days.forEach(function (day) {\n                    // patch focus flag\n                    if (focusDate) {\n                        day.context.focused = focusDate.equals(day.date) && focusVisible;\n                    }\n                    // calculating tabindex\n                    day.tabindex = !disabled && day.date.equals(focusDate) && focusDate.month === month.number ? 0 : -1;\n                    // override context disabled\n                    if (disabled === true) {\n                        day.context.disabled = true;\n                    }\n                    // patch selection flag\n                    if (selectedDate !== undefined) {\n                        day.context.selected = selectedDate !== null && selectedDate.equals(day.date);\n                    }\n                    // visibility\n                    if (month.number !== day.date.month) {\n                        day.hidden = outsideDays === 'hidden' || outsideDays === 'collapsed' ||\n                            (displayMonths > 1 && day.date.after(months[0].firstDate) &&\n                                day.date.before(months[displayMonths - 1].lastDate));\n                    }\n                });\n            });\n        });\n    };\n    /**\n     * @param {?} patch\n     * @return {?}\n     */\n    NgbDatepickerService.prototype._updateState = /**\n     * @param {?} patch\n     * @return {?}\n     */\n    function (patch) {\n        // patching fields\n        /** @type {?} */\n        var state = Object.assign({}, this._state, patch);\n        /** @type {?} */\n        var startDate = state.firstDate;\n        // min/max dates changed\n        if ('minDate' in patch || 'maxDate' in patch) {\n            checkMinBeforeMax(state.minDate, state.maxDate);\n            state.focusDate = checkDateInRange(state.focusDate, state.minDate, state.maxDate);\n            state.firstDate = checkDateInRange(state.firstDate, state.minDate, state.maxDate);\n            startDate = state.focusDate;\n        }\n        // disabled\n        if ('disabled' in patch) {\n            state.focusVisible = false;\n        }\n        // initial rebuild via 'select()'\n        if ('selectedDate' in patch && this._state.months.length === 0) {\n            startDate = state.selectedDate;\n        }\n        // focus date changed\n        if ('focusDate' in patch) {\n            state.focusDate = checkDateInRange(state.focusDate, state.minDate, state.maxDate);\n            startDate = state.focusDate;\n            // nothing to rebuild if only focus changed and it is still visible\n            if (state.months.length !== 0 && !state.focusDate.before(state.firstDate) &&\n                !state.focusDate.after(state.lastDate)) {\n                return state;\n            }\n        }\n        // first date changed\n        if ('firstDate' in patch) {\n            state.firstDate = checkDateInRange(state.firstDate, state.minDate, state.maxDate);\n            startDate = state.firstDate;\n        }\n        // rebuilding months\n        if (startDate) {\n            /** @type {?} */\n            var forceRebuild = 'dayTemplateData' in patch || 'firstDayOfWeek' in patch || 'markDisabled' in patch ||\n                'minDate' in patch || 'maxDate' in patch || 'disabled' in patch || 'outsideDays' in patch;\n            /** @type {?} */\n            var months = buildMonths(this._calendar, startDate, state, this._i18n, forceRebuild);\n            // updating months and boundary dates\n            state.months = months;\n            state.firstDate = months.length > 0 ? months[0].firstDate : undefined;\n            state.lastDate = months.length > 0 ? months[months.length - 1].lastDate : undefined;\n            // reset selected date if 'markDisabled' returns true\n            if ('selectedDate' in patch && !isDateSelectable(state.selectedDate, state)) {\n                state.selectedDate = null;\n            }\n            // adjusting focus after months were built\n            if ('firstDate' in patch) {\n                if (state.focusDate === undefined || state.focusDate.before(state.firstDate) ||\n                    state.focusDate.after(state.lastDate)) {\n                    state.focusDate = startDate;\n                }\n            }\n            // adjusting months/years for the select box navigation\n            /** @type {?} */\n            var yearChanged = !this._state.firstDate || this._state.firstDate.year !== state.firstDate.year;\n            /** @type {?} */\n            var monthChanged = !this._state.firstDate || this._state.firstDate.month !== state.firstDate.month;\n            if (state.navigation === 'select') {\n                // years ->  boundaries (min/max were changed)\n                if ('minDate' in patch || 'maxDate' in patch || state.selectBoxes.years.length === 0 || yearChanged) {\n                    state.selectBoxes.years = generateSelectBoxYears(state.firstDate, state.minDate, state.maxDate);\n                }\n                // months -> when current year or boundaries change\n                if ('minDate' in patch || 'maxDate' in patch || state.selectBoxes.months.length === 0 || yearChanged) {\n                    state.selectBoxes.months =\n                        generateSelectBoxMonths(this._calendar, state.firstDate, state.minDate, state.maxDate);\n                }\n            }\n            else {\n                state.selectBoxes = { years: [], months: [] };\n            }\n            // updating navigation arrows -> boundaries change (min/max) or month/year changes\n            if ((state.navigation === 'arrows' || state.navigation === 'select') &&\n                (monthChanged || yearChanged || 'minDate' in patch || 'maxDate' in patch || 'disabled' in patch)) {\n                state.prevDisabled = state.disabled || prevMonthDisabled(this._calendar, state.firstDate, state.minDate);\n                state.nextDisabled = state.disabled || nextMonthDisabled(this._calendar, state.lastDate, state.maxDate);\n            }\n        }\n        return state;\n    };\n    NgbDatepickerService.decorators = [\n        { type: Injectable }\n    ];\n    /** @nocollapse */\n    NgbDatepickerService.ctorParameters = function () { return [\n        { type: NgbCalendar },\n        { type: NgbDatepickerI18n }\n    ]; };\n    return NgbDatepickerService;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @enum {number} */\nvar Key = {\n    Tab: 9,\n    Enter: 13,\n    Escape: 27,\n    Space: 32,\n    PageUp: 33,\n    PageDown: 34,\n    End: 35,\n    Home: 36,\n    ArrowLeft: 37,\n    ArrowUp: 38,\n    ArrowRight: 39,\n    ArrowDown: 40,\n};\nKey[Key.Tab] = 'Tab';\nKey[Key.Enter] = 'Enter';\nKey[Key.Escape] = 'Escape';\nKey[Key.Space] = 'Space';\nKey[Key.PageUp] = 'PageUp';\nKey[Key.PageDown] = 'PageDown';\nKey[Key.End] = 'End';\nKey[Key.Home] = 'Home';\nKey[Key.ArrowLeft] = 'ArrowLeft';\nKey[Key.ArrowUp] = 'ArrowUp';\nKey[Key.ArrowRight] = 'ArrowRight';\nKey[Key.ArrowDown] = 'ArrowDown';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbDatepickerKeyMapService = /** @class */ (function () {\n    function NgbDatepickerKeyMapService(_service, _calendar) {\n        var _this = this;\n        this._service = _service;\n        this._calendar = _calendar;\n        _service.model$.subscribe(function (model) {\n            _this._minDate = model.minDate;\n            _this._maxDate = model.maxDate;\n            _this._firstViewDate = model.firstDate;\n            _this._lastViewDate = model.lastDate;\n        });\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgbDatepickerKeyMapService.prototype.processKey = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        // tslint:disable-next-line:deprecation\n        var which = event.which;\n        if (Key[toString(which)]) {\n            switch (which) {\n                case Key.PageUp:\n                    this._service.focusMove(event.shiftKey ? 'y' : 'm', -1);\n                    break;\n                case Key.PageDown:\n                    this._service.focusMove(event.shiftKey ? 'y' : 'm', 1);\n                    break;\n                case Key.End:\n                    this._service.focus(event.shiftKey ? this._maxDate : this._lastViewDate);\n                    break;\n                case Key.Home:\n                    this._service.focus(event.shiftKey ? this._minDate : this._firstViewDate);\n                    break;\n                case Key.ArrowLeft:\n                    this._service.focusMove('d', -1);\n                    break;\n                case Key.ArrowUp:\n                    this._service.focusMove('d', -this._calendar.getDaysPerWeek());\n                    break;\n                case Key.ArrowRight:\n                    this._service.focusMove('d', 1);\n                    break;\n                case Key.ArrowDown:\n                    this._service.focusMove('d', this._calendar.getDaysPerWeek());\n                    break;\n                case Key.Enter:\n                case Key.Space:\n                    this._service.focusSelect();\n                    break;\n                default:\n                    return;\n            }\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    };\n    NgbDatepickerKeyMapService.decorators = [\n        { type: Injectable }\n    ];\n    /** @nocollapse */\n    NgbDatepickerKeyMapService.ctorParameters = function () { return [\n        { type: NgbDatepickerService },\n        { type: NgbCalendar }\n    ]; };\n    return NgbDatepickerKeyMapService;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @enum {number} */\nvar NavigationEvent = {\n    PREV: 0,\n    NEXT: 1,\n};\nNavigationEvent[NavigationEvent.PREV] = 'PREV';\nNavigationEvent[NavigationEvent.NEXT] = 'NEXT';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Configuration service for the NgbDatepicker component.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the datepickers used in the application.\n */\nvar NgbDatepickerConfig = /** @class */ (function () {\n    function NgbDatepickerConfig() {\n        this.displayMonths = 1;\n        this.firstDayOfWeek = 1;\n        this.navigation = 'select';\n        this.outsideDays = 'visible';\n        this.showWeekdays = true;\n        this.showWeekNumbers = false;\n    }\n    NgbDatepickerConfig.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */ NgbDatepickerConfig.ngInjectableDef = defineInjectable({ factory: function NgbDatepickerConfig_Factory() { return new NgbDatepickerConfig(); }, token: NgbDatepickerConfig, providedIn: \"root\" });\n    return NgbDatepickerConfig;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction NGB_DATEPICKER_DATE_ADAPTER_FACTORY() {\n    return new NgbDateStructAdapter();\n}\n/**\n * An abstract class used as the DI token that does conversion between the internal\n * datepicker NgbDateStruct model and any provided user date model, ex. string, native date, etc.\n *\n * Adapter is used for conversion when binding datepicker to a model with forms, ex. [(ngModel)]=\"userDateModel\"\n *\n * Default implementation assumes NgbDateStruct for user model as well.\n * @abstract\n * @template D\n */\nvar NgbDateAdapter = /** @class */ (function () {\n    function NgbDateAdapter() {\n    }\n    NgbDateAdapter.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root', useFactory: NGB_DATEPICKER_DATE_ADAPTER_FACTORY },] }\n    ];\n    /** @nocollapse */ NgbDateAdapter.ngInjectableDef = defineInjectable({ factory: NGB_DATEPICKER_DATE_ADAPTER_FACTORY, token: NgbDateAdapter, providedIn: \"root\" });\n    return NgbDateAdapter;\n}());\nvar NgbDateStructAdapter = /** @class */ (function (_super) {\n    __extends(NgbDateStructAdapter, _super);\n    function NgbDateStructAdapter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Converts a NgbDateStruct value into NgbDateStruct value\n     */\n    /**\n     * Converts a NgbDateStruct value into NgbDateStruct value\n     * @param {?} date\n     * @return {?}\n     */\n    NgbDateStructAdapter.prototype.fromModel = /**\n     * Converts a NgbDateStruct value into NgbDateStruct value\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return (date && isInteger(date.year) && isInteger(date.month) && isInteger(date.day)) ?\n            { year: date.year, month: date.month, day: date.day } :\n            null;\n    };\n    /**\n     * Converts a NgbDateStruct value into NgbDateStruct value\n     */\n    /**\n     * Converts a NgbDateStruct value into NgbDateStruct value\n     * @param {?} date\n     * @return {?}\n     */\n    NgbDateStructAdapter.prototype.toModel = /**\n     * Converts a NgbDateStruct value into NgbDateStruct value\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return (date && isInteger(date.year) && isInteger(date.month) && isInteger(date.day)) ?\n            { year: date.year, month: date.month, day: date.day } :\n            null;\n    };\n    NgbDateStructAdapter.decorators = [\n        { type: Injectable }\n    ];\n    return NgbDateStructAdapter;\n}(NgbDateAdapter));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar NGB_DATEPICKER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return NgbDatepicker; }),\n    multi: true\n};\n/**\n * A lightweight and highly configurable datepicker directive\n */\nvar NgbDatepicker = /** @class */ (function () {\n    function NgbDatepicker(_keyMapService, _service, _calendar, i18n, config, _cd, _elementRef, _ngbDateAdapter, _ngZone) {\n        var _this = this;\n        this._keyMapService = _keyMapService;\n        this._service = _service;\n        this._calendar = _calendar;\n        this.i18n = i18n;\n        this._cd = _cd;\n        this._elementRef = _elementRef;\n        this._ngbDateAdapter = _ngbDateAdapter;\n        this._ngZone = _ngZone;\n        /**\n         * An event fired when navigation happens and currently displayed month changes.\n         * See NgbDatepickerNavigateEvent for the payload info.\n         */\n        this.navigate = new EventEmitter();\n        /**\n         * An event fired when user selects a date using keyboard or mouse.\n         * The payload of the event is currently selected NgbDate.\n         */\n        this.select = new EventEmitter();\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        ['dayTemplate', 'dayTemplateData', 'displayMonths', 'firstDayOfWeek', 'footerTemplate', 'markDisabled', 'minDate',\n            'maxDate', 'navigation', 'outsideDays', 'showWeekdays', 'showWeekNumbers', 'startDate']\n            .forEach(function (input) { return _this[input] = config[input]; });\n        this._selectSubscription = _service.select$.subscribe(function (date) { _this.select.emit(date); });\n        this._subscription = _service.model$.subscribe(function (model) {\n            /** @type {?} */\n            var newDate = model.firstDate;\n            /** @type {?} */\n            var oldDate = _this.model ? _this.model.firstDate : null;\n            /** @type {?} */\n            var newSelectedDate = model.selectedDate;\n            /** @type {?} */\n            var newFocusedDate = model.focusDate;\n            /** @type {?} */\n            var oldFocusedDate = _this.model ? _this.model.focusDate : null;\n            _this.model = model;\n            // handling selection change\n            if (isChangedDate(newSelectedDate, _this._controlValue)) {\n                _this._controlValue = newSelectedDate;\n                _this.onTouched();\n                _this.onChange(_this._ngbDateAdapter.toModel(newSelectedDate));\n            }\n            // handling focus change\n            if (isChangedDate(newFocusedDate, oldFocusedDate) && oldFocusedDate && model.focusVisible) {\n                _this.focus();\n            }\n            // emitting navigation event if the first month changes\n            if (!newDate.equals(oldDate)) {\n                _this.navigate.emit({\n                    current: oldDate ? { year: oldDate.year, month: oldDate.month } : null,\n                    next: { year: newDate.year, month: newDate.month }\n                });\n            }\n            _cd.markForCheck();\n        });\n    }\n    /**\n     * Manually focus the focusable day in the datepicker\n     */\n    /**\n     * Manually focus the focusable day in the datepicker\n     * @return {?}\n     */\n    NgbDatepicker.prototype.focus = /**\n     * Manually focus the focusable day in the datepicker\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n            /** @type {?} */\n            var elementToFocus = _this._elementRef.nativeElement.querySelector('div.ngb-dp-day[tabindex=\"0\"]');\n            if (elementToFocus) {\n                elementToFocus.focus();\n            }\n        });\n    };\n    /**\n     * Navigates current view to provided date.\n     * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n     * If nothing or invalid date provided calendar will open current month.\n     * Use 'startDate' input as an alternative\n     */\n    /**\n     * Navigates current view to provided date.\n     * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n     * If nothing or invalid date provided calendar will open current month.\n     * Use 'startDate' input as an alternative\n     * @param {?=} date\n     * @return {?}\n     */\n    NgbDatepicker.prototype.navigateTo = /**\n     * Navigates current view to provided date.\n     * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n     * If nothing or invalid date provided calendar will open current month.\n     * Use 'startDate' input as an alternative\n     * @param {?=} date\n     * @return {?}\n     */\n    function (date) {\n        this._service.open(NgbDate.from(date ? date.day ? (/** @type {?} */ (date)) : __assign({}, date, { day: 1 }) : null));\n    };\n    /**\n     * @return {?}\n     */\n    NgbDatepicker.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._subscription.unsubscribe();\n        this._selectSubscription.unsubscribe();\n    };\n    /**\n     * @return {?}\n     */\n    NgbDatepicker.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.model === undefined) {\n            ['dayTemplateData', 'displayMonths', 'markDisabled', 'firstDayOfWeek', 'navigation', 'minDate', 'maxDate',\n                'outsideDays']\n                .forEach(function (input) { return _this._service[input] = _this[input]; });\n            this.navigateTo(this.startDate);\n        }\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgbDatepicker.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        var _this = this;\n        ['dayTemplateData', 'displayMonths', 'markDisabled', 'firstDayOfWeek', 'navigation', 'minDate', 'maxDate',\n            'outsideDays']\n            .filter(function (input) { return input in changes; })\n            .forEach(function (input) { return _this._service[input] = _this[input]; });\n        if ('startDate' in changes) {\n            this.navigateTo(this.startDate);\n        }\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NgbDatepicker.prototype.onDateSelect = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        this._service.focus(date);\n        this._service.select(date, { emitEvent: true });\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgbDatepicker.prototype.onKeyDown = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) { this._keyMapService.processKey(event); };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NgbDatepicker.prototype.onNavigateDateSelect = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) { this._service.open(date); };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgbDatepicker.prototype.onNavigateEvent = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        switch (event) {\n            case NavigationEvent.PREV:\n                this._service.open(this._calendar.getPrev(this.model.firstDate, 'm', 1));\n                break;\n            case NavigationEvent.NEXT:\n                this._service.open(this._calendar.getNext(this.model.firstDate, 'm', 1));\n                break;\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NgbDatepicker.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onChange = fn; };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NgbDatepicker.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NgbDatepicker.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) { this._service.disabled = isDisabled; };\n    /**\n     * @param {?} focusVisible\n     * @return {?}\n     */\n    NgbDatepicker.prototype.showFocus = /**\n     * @param {?} focusVisible\n     * @return {?}\n     */\n    function (focusVisible) { this._service.focusVisible = focusVisible; };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgbDatepicker.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._controlValue = NgbDate.from(this._ngbDateAdapter.fromModel(value));\n        this._service.select(this._controlValue);\n    };\n    NgbDatepicker.decorators = [\n        { type: Component, args: [{\n                    exportAs: 'ngbDatepicker',\n                    selector: 'ngb-datepicker',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    template: \"\\n    <ng-template #dt let-date=\\\"date\\\" let-currentMonth=\\\"currentMonth\\\" let-selected=\\\"selected\\\" let-disabled=\\\"disabled\\\" let-focused=\\\"focused\\\">\\n      <div ngbDatepickerDayView\\n        [date]=\\\"date\\\"\\n        [currentMonth]=\\\"currentMonth\\\"\\n        [selected]=\\\"selected\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [focused]=\\\"focused\\\">\\n      </div>\\n    </ng-template>\\n\\n    <div class=\\\"ngb-dp-header bg-light\\\">\\n      <ngb-datepicker-navigation *ngIf=\\\"navigation !== 'none'\\\"\\n        [date]=\\\"model.firstDate\\\"\\n        [months]=\\\"model.months\\\"\\n        [disabled]=\\\"model.disabled\\\"\\n        [showSelect]=\\\"model.navigation === 'select'\\\"\\n        [prevDisabled]=\\\"model.prevDisabled\\\"\\n        [nextDisabled]=\\\"model.nextDisabled\\\"\\n        [selectBoxes]=\\\"model.selectBoxes\\\"\\n        (navigate)=\\\"onNavigateEvent($event)\\\"\\n        (select)=\\\"onNavigateDateSelect($event)\\\">\\n      </ngb-datepicker-navigation>\\n    </div>\\n\\n    <div class=\\\"ngb-dp-months\\\" (keydown)=\\\"onKeyDown($event)\\\" (focusin)=\\\"showFocus(true)\\\" (focusout)=\\\"showFocus(false)\\\">\\n      <ng-template ngFor let-month [ngForOf]=\\\"model.months\\\" let-i=\\\"index\\\">\\n        <div class=\\\"ngb-dp-month\\\">\\n          <div *ngIf=\\\"navigation === 'none' || (displayMonths > 1 && navigation === 'select')\\\"\\n                class=\\\"ngb-dp-month-name bg-light\\\">\\n            {{ i18n.getMonthFullName(month.number, month.year) }} {{ i18n.getYearNumerals(month.year) }}\\n          </div>\\n          <ngb-datepicker-month-view\\n            [month]=\\\"month\\\"\\n            [dayTemplate]=\\\"dayTemplate || dt\\\"\\n            [showWeekdays]=\\\"showWeekdays\\\"\\n            [showWeekNumbers]=\\\"showWeekNumbers\\\"\\n            (select)=\\\"onDateSelect($event)\\\">\\n          </ngb-datepicker-month-view>\\n        </div>\\n      </ng-template>\\n    </div>\\n\\n    <ng-template [ngTemplateOutlet]=\\\"footerTemplate\\\"></ng-template>\\n  \",\n                    providers: [NGB_DATEPICKER_VALUE_ACCESSOR, NgbDatepickerService, NgbDatepickerKeyMapService],\n                    styles: [\"ngb-datepicker{border:1px solid #dfdfdf;border-radius:.25rem;display:inline-block}.ngb-dp-month{pointer-events:none}.ngb-dp-header{border-bottom:0;border-radius:.25rem .25rem 0 0;padding-top:.25rem}ngb-datepicker-month-view{pointer-events:auto}.ngb-dp-month-name{font-size:larger;height:2rem;line-height:2rem;text-align:center}.ngb-dp-month+.ngb-dp-month>.ngb-dp-month-name,.ngb-dp-month+.ngb-dp-month>ngb-datepicker-month-view>.ngb-dp-week{padding-left:1rem}.ngb-dp-month:last-child .ngb-dp-week{padding-right:.25rem}.ngb-dp-month:first-child .ngb-dp-week{padding-left:.25rem}.ngb-dp-month>ngb-datepicker-month-view>.ngb-dp-week:last-child{padding-bottom:.25rem}.ngb-dp-months{display:-ms-flexbox;display:flex}\"]\n                }] }\n    ];\n    /** @nocollapse */\n    NgbDatepicker.ctorParameters = function () { return [\n        { type: NgbDatepickerKeyMapService },\n        { type: NgbDatepickerService },\n        { type: NgbCalendar },\n        { type: NgbDatepickerI18n },\n        { type: NgbDatepickerConfig },\n        { type: ChangeDetectorRef },\n        { type: ElementRef },\n        { type: NgbDateAdapter },\n        { type: NgZone }\n    ]; };\n    NgbDatepicker.propDecorators = {\n        dayTemplate: [{ type: Input }],\n        dayTemplateData: [{ type: Input }],\n        displayMonths: [{ type: Input }],\n        firstDayOfWeek: [{ type: Input }],\n        footerTemplate: [{ type: Input }],\n        markDisabled: [{ type: Input }],\n        maxDate: [{ type: Input }],\n        minDate: [{ type: Input }],\n        navigation: [{ type: Input }],\n        outsideDays: [{ type: Input }],\n        showWeekdays: [{ type: Input }],\n        showWeekNumbers: [{ type: Input }],\n        startDate: [{ type: Input }],\n        navigate: [{ type: Output }],\n        select: [{ type: Output }]\n    };\n    return NgbDatepicker;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbDatepickerMonthView = /** @class */ (function () {\n    function NgbDatepickerMonthView(i18n) {\n        this.i18n = i18n;\n        this.select = new EventEmitter();\n    }\n    /**\n     * @param {?} day\n     * @return {?}\n     */\n    NgbDatepickerMonthView.prototype.doSelect = /**\n     * @param {?} day\n     * @return {?}\n     */\n    function (day) {\n        if (!day.context.disabled && !day.hidden) {\n            this.select.emit(day.date);\n        }\n    };\n    NgbDatepickerMonthView.decorators = [\n        { type: Component, args: [{\n                    selector: 'ngb-datepicker-month-view',\n                    host: { 'role': 'grid' },\n                    encapsulation: ViewEncapsulation.None,\n                    template: \"\\n    <div *ngIf=\\\"showWeekdays\\\" class=\\\"ngb-dp-week ngb-dp-weekdays bg-light\\\">\\n      <div *ngIf=\\\"showWeekNumbers\\\" class=\\\"ngb-dp-weekday ngb-dp-showweek\\\"></div>\\n      <div *ngFor=\\\"let w of month.weekdays\\\" class=\\\"ngb-dp-weekday small\\\">\\n        {{ i18n.getWeekdayShortName(w) }}\\n      </div>\\n    </div>\\n    <ng-template ngFor let-week [ngForOf]=\\\"month.weeks\\\">\\n      <div *ngIf=\\\"!week.collapsed\\\" class=\\\"ngb-dp-week\\\" role=\\\"row\\\">\\n        <div *ngIf=\\\"showWeekNumbers\\\" class=\\\"ngb-dp-week-number small text-muted\\\">{{ i18n.getWeekNumerals(week.number) }}</div>\\n        <div *ngFor=\\\"let day of week.days\\\" (click)=\\\"doSelect(day)\\\" class=\\\"ngb-dp-day\\\" role=\\\"gridcell\\\"\\n          [class.disabled]=\\\"day.context.disabled\\\"\\n          [tabindex]=\\\"day.tabindex\\\"\\n          [class.hidden]=\\\"day.hidden\\\"\\n          [attr.aria-label]=\\\"day.ariaLabel\\\">\\n          <ng-template [ngIf]=\\\"!day.hidden\\\">\\n            <ng-template [ngTemplateOutlet]=\\\"dayTemplate\\\" [ngTemplateOutletContext]=\\\"day.context\\\"></ng-template>\\n          </ng-template>\\n        </div>\\n      </div>\\n    </ng-template>\\n  \",\n                    styles: [\"ngb-datepicker-month-view{display:block}.ngb-dp-week-number,.ngb-dp-weekday{line-height:2rem;text-align:center;font-style:italic}.ngb-dp-weekday{color:#5bc0de;color:var(--info)}.ngb-dp-week{border-radius:.25rem;display:-ms-flexbox;display:flex}.ngb-dp-weekdays{border-bottom:1px solid rgba(0,0,0,.125);border-radius:0}.ngb-dp-day,.ngb-dp-week-number,.ngb-dp-weekday{width:2rem;height:2rem}.ngb-dp-day{cursor:pointer}.ngb-dp-day.disabled,.ngb-dp-day.hidden{cursor:default}\"]\n                }] }\n    ];\n    /** @nocollapse */\n    NgbDatepickerMonthView.ctorParameters = function () { return [\n        { type: NgbDatepickerI18n }\n    ]; };\n    NgbDatepickerMonthView.propDecorators = {\n        dayTemplate: [{ type: Input }],\n        month: [{ type: Input }],\n        showWeekdays: [{ type: Input }],\n        showWeekNumbers: [{ type: Input }],\n        select: [{ type: Output }]\n    };\n    return NgbDatepickerMonthView;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbDatepickerNavigation = /** @class */ (function () {\n    function NgbDatepickerNavigation(i18n) {\n        this.i18n = i18n;\n        this.navigation = NavigationEvent;\n        this.months = [];\n        this.navigate = new EventEmitter();\n        this.select = new EventEmitter();\n    }\n    NgbDatepickerNavigation.decorators = [\n        { type: Component, args: [{\n                    selector: 'ngb-datepicker-navigation',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    template: \"\\n    <div class=\\\"ngb-dp-arrow\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-link ngb-dp-arrow-btn\\\" (click)=\\\"navigate.emit(navigation.PREV)\\\" [disabled]=\\\"prevDisabled\\\"\\n              i18n-aria-label=\\\"@@ngb.datepicker.previous-month\\\" aria-label=\\\"Previous month\\\"\\n              i18n-title=\\\"@@ngb.datepicker.previous-month\\\" title=\\\"Previous month\\\">\\n        <span class=\\\"ngb-dp-navigation-chevron\\\"></span>\\n      </button>\\n    </div>\\n    <ngb-datepicker-navigation-select *ngIf=\\\"showSelect\\\" class=\\\"ngb-dp-navigation-select\\\"\\n      [date]=\\\"date\\\"\\n      [disabled] = \\\"disabled\\\"\\n      [months]=\\\"selectBoxes.months\\\"\\n      [years]=\\\"selectBoxes.years\\\"\\n      (select)=\\\"select.emit($event)\\\">\\n    </ngb-datepicker-navigation-select>\\n\\n    <ng-template *ngIf=\\\"!showSelect\\\" ngFor let-month [ngForOf]=\\\"months\\\" let-i=\\\"index\\\">\\n      <div class=\\\"ngb-dp-arrow\\\" *ngIf=\\\"i > 0\\\"></div>\\n      <div class=\\\"ngb-dp-month-name\\\">\\n        {{ i18n.getMonthFullName(month.number, month.year) }} {{ i18n.getYearNumerals(month.year) }}\\n      </div>\\n      <div class=\\\"ngb-dp-arrow\\\" *ngIf=\\\"i !== months.length - 1\\\"></div>\\n    </ng-template>\\n    <div class=\\\"ngb-dp-arrow right\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-link ngb-dp-arrow-btn\\\" (click)=\\\"navigate.emit(navigation.NEXT)\\\" [disabled]=\\\"nextDisabled\\\"\\n              i18n-aria-label=\\\"@@ngb.datepicker.next-month\\\" aria-label=\\\"Next month\\\"\\n              i18n-title=\\\"@@ngb.datepicker.next-month\\\" title=\\\"Next month\\\">\\n        <span class=\\\"ngb-dp-navigation-chevron\\\"></span>\\n      </button>\\n    </div>\\n    \",\n                    styles: [\"ngb-datepicker-navigation{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.ngb-dp-navigation-chevron{border-style:solid;border-width:.2em .2em 0 0;display:inline-block;width:.75em;height:.75em;margin-left:.25em;margin-right:.15em;-webkit-transform:rotate(-135deg);transform:rotate(-135deg)}.right .ngb-dp-navigation-chevron{-webkit-transform:rotate(45deg);transform:rotate(45deg);margin-left:.15em;margin-right:.25em}.ngb-dp-arrow{display:-ms-flexbox;display:flex;-ms-flex:1 1 auto;flex:1 1 auto;padding-right:0;padding-left:0;margin:0;width:2rem;height:2rem}.ngb-dp-arrow.right{-ms-flex-pack:end;justify-content:flex-end}.ngb-dp-arrow-btn{padding:0 .25rem;margin:0 .5rem;border:none;background-color:transparent;z-index:1}.ngb-dp-arrow-btn:focus{outline:auto 1px}.ngb-dp-month-name{font-size:larger;height:2rem;line-height:2rem;text-align:center}.ngb-dp-navigation-select{display:-ms-flexbox;display:flex;-ms-flex:1 1 9rem;flex:1 1 9rem}\"]\n                }] }\n    ];\n    /** @nocollapse */\n    NgbDatepickerNavigation.ctorParameters = function () { return [\n        { type: NgbDatepickerI18n }\n    ]; };\n    NgbDatepickerNavigation.propDecorators = {\n        date: [{ type: Input }],\n        disabled: [{ type: Input }],\n        months: [{ type: Input }],\n        showSelect: [{ type: Input }],\n        prevDisabled: [{ type: Input }],\n        nextDisabled: [{ type: Input }],\n        selectBoxes: [{ type: Input }],\n        navigate: [{ type: Output }],\n        select: [{ type: Output }]\n    };\n    return NgbDatepickerNavigation;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar FOCUSABLE_ELEMENTS_SELECTOR = [\n    'a[href]', 'button:not([disabled])', 'input:not([disabled]):not([type=\"hidden\"])', 'select:not([disabled])',\n    'textarea:not([disabled])', '[contenteditable]', '[tabindex]:not([tabindex=\"-1\"])'\n].join(', ');\n/**\n * Returns first and last focusable elements inside of a given element based on specific CSS selector\n * @param {?} element\n * @return {?}\n */\nfunction getFocusableBoundaryElements(element) {\n    /** @type {?} */\n    var list = element.querySelectorAll(FOCUSABLE_ELEMENTS_SELECTOR);\n    return [list[0], list[list.length - 1]];\n}\n/**\n * Function that enforces browser focus to be trapped inside a DOM element.\n *\n * Works only for clicks inside the element and navigation with 'Tab', ignoring clicks outside of the element\n *\n * \\@param element The element around which focus will be trapped inside\n * \\@param stopFocusTrap$ The observable stream. When completed the focus trap will clean up listeners\n * and free internal resources\n * \\@param refocusOnClick Put the focus back to the last focused element whenever a click occurs on element (default to\n * false)\n * @type {?}\n */\nvar ngbFocusTrap = function (element, stopFocusTrap$, refocusOnClick) {\n    if (refocusOnClick === void 0) { refocusOnClick = false; }\n    // last focused element\n    /** @type {?} */\n    var lastFocusedElement$ = fromEvent(element, 'focusin').pipe(takeUntil(stopFocusTrap$), map(function (e) { return e.target; }));\n    // 'tab' / 'shift+tab' stream\n    fromEvent(element, 'keydown')\n        .pipe(takeUntil(stopFocusTrap$), \n    // tslint:disable:deprecation\n    filter(function (e) { return e.which === Key.Tab; }), \n    // tslint:enable:deprecation\n    withLatestFrom(lastFocusedElement$))\n        .subscribe(function (_a) {\n        var _b = __read(_a, 2), tabEvent = _b[0], focusedElement = _b[1];\n        var _c = __read(getFocusableBoundaryElements(element), 2), first = _c[0], last = _c[1];\n        if ((focusedElement === first || focusedElement === element) && tabEvent.shiftKey) {\n            last.focus();\n            tabEvent.preventDefault();\n        }\n        if (focusedElement === last && !tabEvent.shiftKey) {\n            first.focus();\n            tabEvent.preventDefault();\n        }\n    });\n    // inside click\n    if (refocusOnClick) {\n        fromEvent(element, 'click')\n            .pipe(takeUntil(stopFocusTrap$), withLatestFrom(lastFocusedElement$), map(function (arr) { return (/** @type {?} */ (arr[1])); }))\n            .subscribe(function (lastFocusedElement) { return lastFocusedElement.focus(); });\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n// previous version:\n// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js\nvar \n// previous version:\n// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js\nPositioning = /** @class */ (function () {\n    function Positioning() {\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    Positioning.prototype.getAllStyles = /**\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) { return window.getComputedStyle(element); };\n    /**\n     * @param {?} element\n     * @param {?} prop\n     * @return {?}\n     */\n    Positioning.prototype.getStyle = /**\n     * @param {?} element\n     * @param {?} prop\n     * @return {?}\n     */\n    function (element, prop) { return this.getAllStyles(element)[prop]; };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    Positioning.prototype.isStaticPositioned = /**\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        return (this.getStyle(element, 'position') || 'static') === 'static';\n    };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    Positioning.prototype.offsetParent = /**\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        /** @type {?} */\n        var offsetParentEl = (/** @type {?} */ (element.offsetParent)) || document.documentElement;\n        while (offsetParentEl && offsetParentEl !== document.documentElement && this.isStaticPositioned(offsetParentEl)) {\n            offsetParentEl = (/** @type {?} */ (offsetParentEl.offsetParent));\n        }\n        return offsetParentEl || document.documentElement;\n    };\n    /**\n     * @param {?} element\n     * @param {?=} round\n     * @return {?}\n     */\n    Positioning.prototype.position = /**\n     * @param {?} element\n     * @param {?=} round\n     * @return {?}\n     */\n    function (element, round) {\n        if (round === void 0) { round = true; }\n        /** @type {?} */\n        var elPosition;\n        /** @type {?} */\n        var parentOffset = { width: 0, height: 0, top: 0, bottom: 0, left: 0, right: 0 };\n        if (this.getStyle(element, 'position') === 'fixed') {\n            elPosition = element.getBoundingClientRect();\n        }\n        else {\n            /** @type {?} */\n            var offsetParentEl = this.offsetParent(element);\n            elPosition = this.offset(element, false);\n            if (offsetParentEl !== document.documentElement) {\n                parentOffset = this.offset(offsetParentEl, false);\n            }\n            parentOffset.top += offsetParentEl.clientTop;\n            parentOffset.left += offsetParentEl.clientLeft;\n        }\n        elPosition.top -= parentOffset.top;\n        elPosition.bottom -= parentOffset.top;\n        elPosition.left -= parentOffset.left;\n        elPosition.right -= parentOffset.left;\n        if (round) {\n            elPosition.top = Math.round(elPosition.top);\n            elPosition.bottom = Math.round(elPosition.bottom);\n            elPosition.left = Math.round(elPosition.left);\n            elPosition.right = Math.round(elPosition.right);\n        }\n        return elPosition;\n    };\n    /**\n     * @param {?} element\n     * @param {?=} round\n     * @return {?}\n     */\n    Positioning.prototype.offset = /**\n     * @param {?} element\n     * @param {?=} round\n     * @return {?}\n     */\n    function (element, round) {\n        if (round === void 0) { round = true; }\n        /** @type {?} */\n        var elBcr = element.getBoundingClientRect();\n        /** @type {?} */\n        var viewportOffset = {\n            top: window.pageYOffset - document.documentElement.clientTop,\n            left: window.pageXOffset - document.documentElement.clientLeft\n        };\n        /** @type {?} */\n        var elOffset = {\n            height: elBcr.height || element.offsetHeight,\n            width: elBcr.width || element.offsetWidth,\n            top: elBcr.top + viewportOffset.top,\n            bottom: elBcr.bottom + viewportOffset.top,\n            left: elBcr.left + viewportOffset.left,\n            right: elBcr.right + viewportOffset.left\n        };\n        if (round) {\n            elOffset.height = Math.round(elOffset.height);\n            elOffset.width = Math.round(elOffset.width);\n            elOffset.top = Math.round(elOffset.top);\n            elOffset.bottom = Math.round(elOffset.bottom);\n            elOffset.left = Math.round(elOffset.left);\n            elOffset.right = Math.round(elOffset.right);\n        }\n        return elOffset;\n    };\n    /**\n     * @param {?} hostElement\n     * @param {?} targetElement\n     * @param {?} placement\n     * @param {?=} appendToBody\n     * @return {?}\n     */\n    Positioning.prototype.positionElements = /**\n     * @param {?} hostElement\n     * @param {?} targetElement\n     * @param {?} placement\n     * @param {?=} appendToBody\n     * @return {?}\n     */\n    function (hostElement, targetElement, placement, appendToBody) {\n        /** @type {?} */\n        var hostElPosition = appendToBody ? this.offset(hostElement, false) : this.position(hostElement, false);\n        /** @type {?} */\n        var targetElStyles = this.getAllStyles(targetElement);\n        /** @type {?} */\n        var targetElBCR = targetElement.getBoundingClientRect();\n        /** @type {?} */\n        var placementPrimary = placement.split('-')[0] || 'top';\n        /** @type {?} */\n        var placementSecondary = placement.split('-')[1] || 'center';\n        /** @type {?} */\n        var targetElPosition = {\n            'height': targetElBCR.height || targetElement.offsetHeight,\n            'width': targetElBCR.width || targetElement.offsetWidth,\n            'top': 0,\n            'bottom': targetElBCR.height || targetElement.offsetHeight,\n            'left': 0,\n            'right': targetElBCR.width || targetElement.offsetWidth\n        };\n        switch (placementPrimary) {\n            case 'top':\n                targetElPosition.top =\n                    hostElPosition.top - (targetElement.offsetHeight + parseFloat(targetElStyles.marginBottom));\n                break;\n            case 'bottom':\n                targetElPosition.top = hostElPosition.top + hostElPosition.height;\n                break;\n            case 'left':\n                targetElPosition.left =\n                    hostElPosition.left - (targetElement.offsetWidth + parseFloat(targetElStyles.marginRight));\n                break;\n            case 'right':\n                targetElPosition.left = hostElPosition.left + hostElPosition.width;\n                break;\n        }\n        switch (placementSecondary) {\n            case 'top':\n                targetElPosition.top = hostElPosition.top;\n                break;\n            case 'bottom':\n                targetElPosition.top = hostElPosition.top + hostElPosition.height - targetElement.offsetHeight;\n                break;\n            case 'left':\n                targetElPosition.left = hostElPosition.left;\n                break;\n            case 'right':\n                targetElPosition.left = hostElPosition.left + hostElPosition.width - targetElement.offsetWidth;\n                break;\n            case 'center':\n                if (placementPrimary === 'top' || placementPrimary === 'bottom') {\n                    targetElPosition.left = hostElPosition.left + hostElPosition.width / 2 - targetElement.offsetWidth / 2;\n                }\n                else {\n                    targetElPosition.top = hostElPosition.top + hostElPosition.height / 2 - targetElement.offsetHeight / 2;\n                }\n                break;\n        }\n        targetElPosition.top = Math.round(targetElPosition.top);\n        targetElPosition.bottom = Math.round(targetElPosition.bottom);\n        targetElPosition.left = Math.round(targetElPosition.left);\n        targetElPosition.right = Math.round(targetElPosition.right);\n        return targetElPosition;\n    };\n    // get the available placements of the target element in the viewport depending on the host element\n    // get the available placements of the target element in the viewport depending on the host element\n    /**\n     * @param {?} hostElement\n     * @param {?} targetElement\n     * @return {?}\n     */\n    Positioning.prototype.getAvailablePlacements = \n    // get the available placements of the target element in the viewport depending on the host element\n    /**\n     * @param {?} hostElement\n     * @param {?} targetElement\n     * @return {?}\n     */\n    function (hostElement, targetElement) {\n        /** @type {?} */\n        var availablePlacements = [];\n        /** @type {?} */\n        var hostElemClientRect = hostElement.getBoundingClientRect();\n        /** @type {?} */\n        var targetElemClientRect = targetElement.getBoundingClientRect();\n        /** @type {?} */\n        var html = document.documentElement;\n        /** @type {?} */\n        var windowHeight = window.innerHeight || html.clientHeight;\n        /** @type {?} */\n        var windowWidth = window.innerWidth || html.clientWidth;\n        /** @type {?} */\n        var hostElemClientRectHorCenter = hostElemClientRect.left + hostElemClientRect.width / 2;\n        /** @type {?} */\n        var hostElemClientRectVerCenter = hostElemClientRect.top + hostElemClientRect.height / 2;\n        // left: check if target width can be placed between host left and viewport start and also height of target is\n        // inside viewport\n        if (targetElemClientRect.width < hostElemClientRect.left) {\n            // check for left only\n            if (hostElemClientRectVerCenter > targetElemClientRect.height / 2 &&\n                windowHeight - hostElemClientRectVerCenter > targetElemClientRect.height / 2) {\n                availablePlacements.splice(availablePlacements.length, 1, 'left');\n            }\n            // check for left-top and left-bottom\n            this.setSecondaryPlacementForLeftRight(hostElemClientRect, targetElemClientRect, 'left', availablePlacements);\n        }\n        // top: target height is less than host top\n        if (targetElemClientRect.height < hostElemClientRect.top) {\n            if (hostElemClientRectHorCenter > targetElemClientRect.width / 2 &&\n                windowWidth - hostElemClientRectHorCenter > targetElemClientRect.width / 2) {\n                availablePlacements.splice(availablePlacements.length, 1, 'top');\n            }\n            this.setSecondaryPlacementForTopBottom(hostElemClientRect, targetElemClientRect, 'top', availablePlacements);\n        }\n        // right: check if target width can be placed between host right and viewport end and also height of target is\n        // inside viewport\n        if (windowWidth - hostElemClientRect.right > targetElemClientRect.width) {\n            // check for right only\n            if (hostElemClientRectVerCenter > targetElemClientRect.height / 2 &&\n                windowHeight - hostElemClientRectVerCenter > targetElemClientRect.height / 2) {\n                availablePlacements.splice(availablePlacements.length, 1, 'right');\n            }\n            // check for right-top and right-bottom\n            this.setSecondaryPlacementForLeftRight(hostElemClientRect, targetElemClientRect, 'right', availablePlacements);\n        }\n        // bottom: check if there is enough space between host bottom and viewport end for target height\n        if (windowHeight - hostElemClientRect.bottom > targetElemClientRect.height) {\n            if (hostElemClientRectHorCenter > targetElemClientRect.width / 2 &&\n                windowWidth - hostElemClientRectHorCenter > targetElemClientRect.width / 2) {\n                availablePlacements.splice(availablePlacements.length, 1, 'bottom');\n            }\n            this.setSecondaryPlacementForTopBottom(hostElemClientRect, targetElemClientRect, 'bottom', availablePlacements);\n        }\n        return availablePlacements;\n    };\n    /**\n     * check if secondary placement for left and right are available i.e. left-top, left-bottom, right-top, right-bottom\n     * primaryplacement: left|right\n     * availablePlacementArr: array in which available placements to be set\n     */\n    /**\n     * check if secondary placement for left and right are available i.e. left-top, left-bottom, right-top, right-bottom\n     * primaryplacement: left|right\n     * availablePlacementArr: array in which available placements to be set\n     * @param {?} hostElemClientRect\n     * @param {?} targetElemClientRect\n     * @param {?} primaryPlacement\n     * @param {?} availablePlacementArr\n     * @return {?}\n     */\n    Positioning.prototype.setSecondaryPlacementForLeftRight = /**\n     * check if secondary placement for left and right are available i.e. left-top, left-bottom, right-top, right-bottom\n     * primaryplacement: left|right\n     * availablePlacementArr: array in which available placements to be set\n     * @param {?} hostElemClientRect\n     * @param {?} targetElemClientRect\n     * @param {?} primaryPlacement\n     * @param {?} availablePlacementArr\n     * @return {?}\n     */\n    function (hostElemClientRect, targetElemClientRect, primaryPlacement, availablePlacementArr) {\n        /** @type {?} */\n        var html = document.documentElement;\n        // check for left-bottom\n        if (targetElemClientRect.height <= hostElemClientRect.bottom) {\n            availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-bottom');\n        }\n        if ((window.innerHeight || html.clientHeight) - hostElemClientRect.top >= targetElemClientRect.height) {\n            availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-top');\n        }\n    };\n    /**\n     * check if secondary placement for top and bottom are available i.e. top-left, top-right, bottom-left, bottom-right\n     * primaryplacement: top|bottom\n     * availablePlacementArr: array in which available placements to be set\n     */\n    /**\n     * check if secondary placement for top and bottom are available i.e. top-left, top-right, bottom-left, bottom-right\n     * primaryplacement: top|bottom\n     * availablePlacementArr: array in which available placements to be set\n     * @param {?} hostElemClientRect\n     * @param {?} targetElemClientRect\n     * @param {?} primaryPlacement\n     * @param {?} availablePlacementArr\n     * @return {?}\n     */\n    Positioning.prototype.setSecondaryPlacementForTopBottom = /**\n     * check if secondary placement for top and bottom are available i.e. top-left, top-right, bottom-left, bottom-right\n     * primaryplacement: top|bottom\n     * availablePlacementArr: array in which available placements to be set\n     * @param {?} hostElemClientRect\n     * @param {?} targetElemClientRect\n     * @param {?} primaryPlacement\n     * @param {?} availablePlacementArr\n     * @return {?}\n     */\n    function (hostElemClientRect, targetElemClientRect, primaryPlacement, availablePlacementArr) {\n        /** @type {?} */\n        var html = document.documentElement;\n        // check for left-bottom\n        if ((window.innerWidth || html.clientWidth) - hostElemClientRect.left >= targetElemClientRect.width) {\n            availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-left');\n        }\n        if (targetElemClientRect.width <= hostElemClientRect.right) {\n            availablePlacementArr.splice(availablePlacementArr.length, 1, primaryPlacement + '-right');\n        }\n    };\n    return Positioning;\n}());\n/** @type {?} */\nvar positionService = new Positioning();\n/*\n * Accept the placement array and applies the appropriate placement dependent on the viewport.\n * Returns the applied placement.\n * In case of auto placement, placements are selected in order\n *   'top', 'bottom', 'left', 'right',\n *   'top-left', 'top-right',\n *   'bottom-left', 'bottom-right',\n *   'left-top', 'left-bottom',\n *   'right-top', 'right-bottom'.\n * */\n/**\n * @param {?} hostElement\n * @param {?} targetElement\n * @param {?} placement\n * @param {?=} appendToBody\n * @return {?}\n */\nfunction positionElements(hostElement, targetElement, placement, appendToBody) {\n    var e_1, _a;\n    /** @type {?} */\n    var placementVals = Array.isArray(placement) ? placement : [(/** @type {?} */ (placement))];\n    // replace auto placement with other placements\n    /** @type {?} */\n    var hasAuto = placementVals.findIndex(function (val) { return val === 'auto'; });\n    if (hasAuto >= 0) {\n        ['top', 'bottom', 'left', 'right', 'top-left', 'top-right', 'bottom-left', 'bottom-right', 'left-top',\n            'left-bottom', 'right-top', 'right-bottom',\n        ].forEach(function (obj) {\n            if (placementVals.find(function (val) { return val.search('^' + obj) !== -1; }) == null) {\n                placementVals.splice(hasAuto++, 1, (/** @type {?} */ (obj)));\n            }\n        });\n    }\n    // coordinates where to position\n    /** @type {?} */\n    var topVal = 0;\n    /** @type {?} */\n    var leftVal = 0;\n    /** @type {?} */\n    var appliedPlacement;\n    // get available placements\n    /** @type {?} */\n    var availablePlacements = positionService.getAvailablePlacements(hostElement, targetElement);\n    var _loop_1 = function (item, index) {\n        // check if passed placement is present in the available placement or otherwise apply the last placement in the\n        // passed placement list\n        if ((availablePlacements.find(function (val) { return val === item; }) != null) || (placementVals.length === index + 1)) {\n            appliedPlacement = (/** @type {?} */ (item));\n            /** @type {?} */\n            var pos = positionService.positionElements(hostElement, targetElement, item, appendToBody);\n            topVal = pos.top;\n            leftVal = pos.left;\n            return \"break\";\n        }\n    };\n    try {\n        // iterate over all the passed placements\n        for (var _b = __values(toItemIndexes(placementVals)), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var _d = _c.value, item = _d.item, index = _d.index;\n            var state_1 = _loop_1(item, index);\n            if (state_1 === \"break\")\n                break;\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    targetElement.style.top = topVal + \"px\";\n    targetElement.style.left = leftVal + \"px\";\n    return appliedPlacement;\n}\n// function to get index and item of an array\n/**\n * @template T\n * @param {?} a\n * @return {?}\n */\nfunction toItemIndexes(a) {\n    return a.map(function (item, index) { return ({ item: item, index: index }); });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction NGB_DATEPICKER_PARSER_FORMATTER_FACTORY() {\n    return new NgbDateISOParserFormatter();\n}\n/**\n * Abstract type serving as a DI token for the service parsing and formatting dates for the NgbInputDatepicker\n * directive. A default implementation using the ISO 8601 format is provided, but you can provide another implementation\n * to use an alternative format.\n * @abstract\n */\nvar NgbDateParserFormatter = /** @class */ (function () {\n    function NgbDateParserFormatter() {\n    }\n    NgbDateParserFormatter.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root', useFactory: NGB_DATEPICKER_PARSER_FORMATTER_FACTORY },] }\n    ];\n    /** @nocollapse */ NgbDateParserFormatter.ngInjectableDef = defineInjectable({ factory: NGB_DATEPICKER_PARSER_FORMATTER_FACTORY, token: NgbDateParserFormatter, providedIn: \"root\" });\n    return NgbDateParserFormatter;\n}());\nvar NgbDateISOParserFormatter = /** @class */ (function (_super) {\n    __extends(NgbDateISOParserFormatter, _super);\n    function NgbDateISOParserFormatter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgbDateISOParserFormatter.prototype.parse = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        if (value) {\n            /** @type {?} */\n            var dateParts = value.trim().split('-');\n            if (dateParts.length === 1 && isNumber(dateParts[0])) {\n                return { year: toInteger(dateParts[0]), month: null, day: null };\n            }\n            else if (dateParts.length === 2 && isNumber(dateParts[0]) && isNumber(dateParts[1])) {\n                return { year: toInteger(dateParts[0]), month: toInteger(dateParts[1]), day: null };\n            }\n            else if (dateParts.length === 3 && isNumber(dateParts[0]) && isNumber(dateParts[1]) && isNumber(dateParts[2])) {\n                return { year: toInteger(dateParts[0]), month: toInteger(dateParts[1]), day: toInteger(dateParts[2]) };\n            }\n        }\n        return null;\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NgbDateISOParserFormatter.prototype.format = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return date ?\n            date.year + \"-\" + (isNumber(date.month) ? padNumber(date.month) : '') + \"-\" + (isNumber(date.day) ? padNumber(date.day) : '') :\n            '';\n    };\n    NgbDateISOParserFormatter.decorators = [\n        { type: Injectable }\n    ];\n    return NgbDateISOParserFormatter;\n}(NgbDateParserFormatter));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar NGB_DATEPICKER_VALUE_ACCESSOR$1 = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return NgbInputDatepicker; }),\n    multi: true\n};\n/** @type {?} */\nvar NGB_DATEPICKER_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return NgbInputDatepicker; }),\n    multi: true\n};\n/**\n * A directive that makes it possible to have datepickers on input fields.\n * Manages integration with the input field itself (data entry) and ngModel (validation etc.).\n */\nvar NgbInputDatepicker = /** @class */ (function () {\n    function NgbInputDatepicker(_parserFormatter, _elRef, _vcRef, _renderer, _cfr, _ngZone, _service, _calendar, _dateAdapter, _document) {\n        var _this = this;\n        this._parserFormatter = _parserFormatter;\n        this._elRef = _elRef;\n        this._vcRef = _vcRef;\n        this._renderer = _renderer;\n        this._cfr = _cfr;\n        this._ngZone = _ngZone;\n        this._service = _service;\n        this._calendar = _calendar;\n        this._dateAdapter = _dateAdapter;\n        this._document = _document;\n        this._closed$ = new Subject();\n        this._cRef = null;\n        this._disabled = false;\n        /**\n         * Indicates whether the datepicker popup should be closed automatically after date selection / outside click or not.\n         *\n         * By default the popup will close on both date selection and outside click. If the value is 'false' the popup has to\n         * be closed manually via '.close()' or '.toggle()' methods. If the value is set to 'inside' the popup will close on\n         * date selection only. For the 'outside' the popup will close only on the outside click.\n         *\n         * \\@since 3.0.0\n         */\n        this.autoClose = true;\n        /**\n         * Placement of a datepicker popup accepts:\n         *    \"top\", \"top-left\", \"top-right\", \"bottom\", \"bottom-left\", \"bottom-right\",\n         *    \"left\", \"left-top\", \"left-bottom\", \"right\", \"right-top\", \"right-bottom\"\n         * and array of above values.\n         */\n        this.placement = 'bottom-left';\n        /**\n         * An event fired when user selects a date using keyboard or mouse.\n         * The payload of the event is currently selected NgbDate.\n         *\n         * \\@since 1.1.1\n         */\n        this.dateSelect = new EventEmitter();\n        /**\n         * An event fired when navigation happens and currently displayed month changes.\n         * See NgbDatepickerNavigateEvent for the payload info.\n         */\n        this.navigate = new EventEmitter();\n        this._onChange = function (_) { };\n        this._onTouched = function () { };\n        this._validatorChange = function () { };\n        this._zoneSubscription = _ngZone.onStable.subscribe(function () {\n            if (_this._cRef) {\n                positionElements(_this._elRef.nativeElement, _this._cRef.location.nativeElement, _this.placement, _this.container === 'body');\n            }\n        });\n    }\n    Object.defineProperty(NgbInputDatepicker.prototype, \"disabled\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = value === '' || (value && value !== 'false');\n            if (this.isOpen()) {\n                this._cRef.instance.setDisabledState(this._disabled);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NgbInputDatepicker.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange = fn; };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NgbInputDatepicker.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onTouched = fn; };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NgbInputDatepicker.prototype.registerOnValidatorChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._validatorChange = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NgbInputDatepicker.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) { this.disabled = isDisabled; };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    NgbInputDatepicker.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        /** @type {?} */\n        var value = c.value;\n        if (value === null || value === undefined) {\n            return null;\n        }\n        /** @type {?} */\n        var ngbDate = this._fromDateStruct(this._dateAdapter.fromModel(value));\n        if (!this._calendar.isValid(ngbDate)) {\n            return { 'ngbDate': { invalid: c.value } };\n        }\n        if (this.minDate && ngbDate.before(NgbDate.from(this.minDate))) {\n            return { 'ngbDate': { requiredBefore: this.minDate } };\n        }\n        if (this.maxDate && ngbDate.after(NgbDate.from(this.maxDate))) {\n            return { 'ngbDate': { requiredAfter: this.maxDate } };\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgbInputDatepicker.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._model = this._fromDateStruct(this._dateAdapter.fromModel(value));\n        this._writeModelValue(this._model);\n    };\n    /**\n     * @param {?} value\n     * @param {?=} updateView\n     * @return {?}\n     */\n    NgbInputDatepicker.prototype.manualDateChange = /**\n     * @param {?} value\n     * @param {?=} updateView\n     * @return {?}\n     */\n    function (value, updateView) {\n        if (updateView === void 0) { updateView = false; }\n        /** @type {?} */\n        var inputValueChanged = value !== this._inputValue;\n        if (inputValueChanged) {\n            this._inputValue = value;\n            this._model = this._fromDateStruct(this._parserFormatter.parse(value));\n        }\n        if (inputValueChanged || !updateView) {\n            this._onChange(this._model ? this._dateAdapter.toModel(this._model) : (value === '' ? null : value));\n        }\n        if (updateView && this._model) {\n            this._writeModelValue(this._model);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgbInputDatepicker.prototype.isOpen = /**\n     * @return {?}\n     */\n    function () { return !!this._cRef; };\n    /**\n     * Opens the datepicker with the selected date indicated by the ngModel value.\n     */\n    /**\n     * Opens the datepicker with the selected date indicated by the ngModel value.\n     * @return {?}\n     */\n    NgbInputDatepicker.prototype.open = /**\n     * Opens the datepicker with the selected date indicated by the ngModel value.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this.isOpen()) {\n            /** @type {?} */\n            var cf = this._cfr.resolveComponentFactory(NgbDatepicker);\n            this._cRef = this._vcRef.createComponent(cf);\n            this._applyPopupStyling(this._cRef.location.nativeElement);\n            this._applyDatepickerInputs(this._cRef.instance);\n            this._subscribeForDatepickerOutputs(this._cRef.instance);\n            this._cRef.instance.ngOnInit();\n            this._cRef.instance.writeValue(this._dateAdapter.toModel(this._model));\n            // date selection event handling\n            this._cRef.instance.registerOnChange(function (selectedDate) {\n                _this.writeValue(selectedDate);\n                _this._onChange(selectedDate);\n            });\n            this._cRef.changeDetectorRef.detectChanges();\n            this._cRef.instance.setDisabledState(this.disabled);\n            if (this.container === 'body') {\n                window.document.querySelector(this.container).appendChild(this._cRef.location.nativeElement);\n            }\n            // focus handling\n            ngbFocusTrap(this._cRef.location.nativeElement, this._closed$, true);\n            this._cRef.instance.focus();\n            // closing on ESC and outside clicks\n            if (this.autoClose) {\n                this._ngZone.runOutsideAngular(function () {\n                    /** @type {?} */\n                    var escapes$ = fromEvent(_this._document, 'keyup')\n                        .pipe(takeUntil(_this._closed$), \n                    // tslint:disable-next-line:deprecation\n                    filter(function (e) { return e.which === Key.Escape; }));\n                    /** @type {?} */\n                    var outsideClicks$;\n                    if (_this.autoClose === true || _this.autoClose === 'outside') {\n                        // we don't know how the popup was opened, so if it was opened with a click,\n                        // we have to skip the first one to avoid closing it immediately\n                        /** @type {?} */\n                        var isOpening_1 = true;\n                        requestAnimationFrame(function () { return isOpening_1 = false; });\n                        outsideClicks$ = fromEvent(_this._document, 'click')\n                            .pipe(takeUntil(_this._closed$), filter(function (event) { return !isOpening_1 && _this._shouldCloseOnOutsideClick(event); }));\n                    }\n                    else {\n                        outsideClicks$ = NEVER;\n                    }\n                    race([escapes$, outsideClicks$]).subscribe(function () { return _this._ngZone.run(function () { return _this.close(); }); });\n                });\n            }\n        }\n    };\n    /**\n     * Closes the datepicker popup.\n     */\n    /**\n     * Closes the datepicker popup.\n     * @return {?}\n     */\n    NgbInputDatepicker.prototype.close = /**\n     * Closes the datepicker popup.\n     * @return {?}\n     */\n    function () {\n        if (this.isOpen()) {\n            this._vcRef.remove(this._vcRef.indexOf(this._cRef.hostView));\n            this._cRef = null;\n            this._closed$.next();\n        }\n    };\n    /**\n     * Toggles the datepicker popup (opens when closed and closes when opened).\n     */\n    /**\n     * Toggles the datepicker popup (opens when closed and closes when opened).\n     * @return {?}\n     */\n    NgbInputDatepicker.prototype.toggle = /**\n     * Toggles the datepicker popup (opens when closed and closes when opened).\n     * @return {?}\n     */\n    function () {\n        if (this.isOpen()) {\n            this.close();\n        }\n        else {\n            this.open();\n        }\n    };\n    /**\n     * Navigates current view to provided date.\n     * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n     * If nothing or invalid date provided calendar will open current month.\n     * Use 'startDate' input as an alternative\n     */\n    /**\n     * Navigates current view to provided date.\n     * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n     * If nothing or invalid date provided calendar will open current month.\n     * Use 'startDate' input as an alternative\n     * @param {?=} date\n     * @return {?}\n     */\n    NgbInputDatepicker.prototype.navigateTo = /**\n     * Navigates current view to provided date.\n     * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\n     * If nothing or invalid date provided calendar will open current month.\n     * Use 'startDate' input as an alternative\n     * @param {?=} date\n     * @return {?}\n     */\n    function (date) {\n        if (this.isOpen()) {\n            this._cRef.instance.navigateTo(date);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgbInputDatepicker.prototype.onBlur = /**\n     * @return {?}\n     */\n    function () { this._onTouched(); };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgbInputDatepicker.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if (changes['minDate'] || changes['maxDate']) {\n            this._validatorChange();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgbInputDatepicker.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.close();\n        this._zoneSubscription.unsubscribe();\n    };\n    /**\n     * @param {?} datepickerInstance\n     * @return {?}\n     */\n    NgbInputDatepicker.prototype._applyDatepickerInputs = /**\n     * @param {?} datepickerInstance\n     * @return {?}\n     */\n    function (datepickerInstance) {\n        var _this = this;\n        ['dayTemplate', 'dayTemplateData', 'displayMonths', 'firstDayOfWeek', 'footerTemplate', 'markDisabled', 'minDate',\n            'maxDate', 'navigation', 'outsideDays', 'showNavigation', 'showWeekdays', 'showWeekNumbers']\n            .forEach(function (optionName) {\n            if (_this[optionName] !== undefined) {\n                datepickerInstance[optionName] = _this[optionName];\n            }\n        });\n        datepickerInstance.startDate = this.startDate || this._model;\n    };\n    /**\n     * @param {?} nativeElement\n     * @return {?}\n     */\n    NgbInputDatepicker.prototype._applyPopupStyling = /**\n     * @param {?} nativeElement\n     * @return {?}\n     */\n    function (nativeElement) {\n        this._renderer.addClass(nativeElement, 'dropdown-menu');\n        this._renderer.setStyle(nativeElement, 'padding', '0');\n        this._renderer.addClass(nativeElement, 'show');\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgbInputDatepicker.prototype._shouldCloseOnOutsideClick = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        return ![this._elRef.nativeElement, this._cRef.location.nativeElement].some(function (el) { return el.contains(event.target); });\n    };\n    /**\n     * @param {?} datepickerInstance\n     * @return {?}\n     */\n    NgbInputDatepicker.prototype._subscribeForDatepickerOutputs = /**\n     * @param {?} datepickerInstance\n     * @return {?}\n     */\n    function (datepickerInstance) {\n        var _this = this;\n        datepickerInstance.navigate.subscribe(function (date) { return _this.navigate.emit(date); });\n        datepickerInstance.select.subscribe(function (date) {\n            _this.dateSelect.emit(date);\n            if (_this.autoClose === true || _this.autoClose === 'inside') {\n                _this.close();\n            }\n        });\n    };\n    /**\n     * @param {?} model\n     * @return {?}\n     */\n    NgbInputDatepicker.prototype._writeModelValue = /**\n     * @param {?} model\n     * @return {?}\n     */\n    function (model) {\n        /** @type {?} */\n        var value = this._parserFormatter.format(model);\n        this._inputValue = value;\n        this._renderer.setProperty(this._elRef.nativeElement, 'value', value);\n        if (this.isOpen()) {\n            this._cRef.instance.writeValue(this._dateAdapter.toModel(model));\n            this._onTouched();\n        }\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NgbInputDatepicker.prototype._fromDateStruct = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        /** @type {?} */\n        var ngbDate = date ? new NgbDate(date.year, date.month, date.day) : null;\n        return this._calendar.isValid(ngbDate) ? ngbDate : null;\n    };\n    NgbInputDatepicker.decorators = [\n        { type: Directive, args: [{\n                    selector: 'input[ngbDatepicker]',\n                    exportAs: 'ngbDatepicker',\n                    host: {\n                        '(input)': 'manualDateChange($event.target.value)',\n                        '(change)': 'manualDateChange($event.target.value, true)',\n                        '(blur)': 'onBlur()',\n                        '[disabled]': 'disabled'\n                    },\n                    providers: [NGB_DATEPICKER_VALUE_ACCESSOR$1, NGB_DATEPICKER_VALIDATOR, NgbDatepickerService]\n                },] }\n    ];\n    /** @nocollapse */\n    NgbInputDatepicker.ctorParameters = function () { return [\n        { type: NgbDateParserFormatter },\n        { type: ElementRef },\n        { type: ViewContainerRef },\n        { type: Renderer2 },\n        { type: ComponentFactoryResolver },\n        { type: NgZone },\n        { type: NgbDatepickerService },\n        { type: NgbCalendar },\n        { type: NgbDateAdapter },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    NgbInputDatepicker.propDecorators = {\n        autoClose: [{ type: Input }],\n        dayTemplate: [{ type: Input }],\n        dayTemplateData: [{ type: Input }],\n        displayMonths: [{ type: Input }],\n        firstDayOfWeek: [{ type: Input }],\n        footerTemplate: [{ type: Input }],\n        markDisabled: [{ type: Input }],\n        minDate: [{ type: Input }],\n        maxDate: [{ type: Input }],\n        navigation: [{ type: Input }],\n        outsideDays: [{ type: Input }],\n        placement: [{ type: Input }],\n        showWeekdays: [{ type: Input }],\n        showWeekNumbers: [{ type: Input }],\n        startDate: [{ type: Input }],\n        container: [{ type: Input }],\n        dateSelect: [{ type: Output }],\n        navigate: [{ type: Output }],\n        disabled: [{ type: Input }]\n    };\n    return NgbInputDatepicker;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbDatepickerDayView = /** @class */ (function () {\n    function NgbDatepickerDayView(i18n) {\n        this.i18n = i18n;\n    }\n    /**\n     * @return {?}\n     */\n    NgbDatepickerDayView.prototype.isMuted = /**\n     * @return {?}\n     */\n    function () { return !this.selected && (this.date.month !== this.currentMonth || this.disabled); };\n    NgbDatepickerDayView.decorators = [\n        { type: Component, args: [{\n                    selector: '[ngbDatepickerDayView]',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    host: {\n                        'class': 'btn-light',\n                        '[class.bg-primary]': 'selected',\n                        '[class.text-white]': 'selected',\n                        '[class.text-muted]': 'isMuted()',\n                        '[class.outside]': 'isMuted()',\n                        '[class.active]': 'focused'\n                    },\n                    template: \"{{ i18n.getDayNumerals(date) }}\",\n                    styles: [\"[ngbDatepickerDayView]{text-align:center;width:2rem;height:2rem;line-height:2rem;border-radius:.25rem;background:0 0}[ngbDatepickerDayView].outside{opacity:.5}\"]\n                }] }\n    ];\n    /** @nocollapse */\n    NgbDatepickerDayView.ctorParameters = function () { return [\n        { type: NgbDatepickerI18n }\n    ]; };\n    NgbDatepickerDayView.propDecorators = {\n        currentMonth: [{ type: Input }],\n        date: [{ type: Input }],\n        disabled: [{ type: Input }],\n        focused: [{ type: Input }],\n        selected: [{ type: Input }]\n    };\n    return NgbDatepickerDayView;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbDatepickerNavigationSelect = /** @class */ (function () {\n    function NgbDatepickerNavigationSelect(i18n) {\n        this.i18n = i18n;\n        this.select = new EventEmitter();\n    }\n    /**\n     * @param {?} month\n     * @return {?}\n     */\n    NgbDatepickerNavigationSelect.prototype.changeMonth = /**\n     * @param {?} month\n     * @return {?}\n     */\n    function (month) { this.select.emit(new NgbDate(this.date.year, toInteger(month), 1)); };\n    /**\n     * @param {?} year\n     * @return {?}\n     */\n    NgbDatepickerNavigationSelect.prototype.changeYear = /**\n     * @param {?} year\n     * @return {?}\n     */\n    function (year) { this.select.emit(new NgbDate(toInteger(year), this.date.month, 1)); };\n    NgbDatepickerNavigationSelect.decorators = [\n        { type: Component, args: [{\n                    selector: 'ngb-datepicker-navigation-select',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    template: \"\\n    <select\\n      [disabled]=\\\"disabled\\\"\\n      class=\\\"custom-select\\\"\\n      [value]=\\\"date?.month\\\"\\n      i18n-aria-label=\\\"@@ngb.datepicker.select-month\\\" aria-label=\\\"Select month\\\"\\n      i18n-title=\\\"@@ngb.datepicker.select-month\\\" title=\\\"Select month\\\"\\n      (change)=\\\"changeMonth($event.target.value)\\\">\\n        <option *ngFor=\\\"let m of months\\\" [attr.aria-label]=\\\"i18n.getMonthFullName(m, date?.year)\\\"\\n                [value]=\\\"m\\\">{{ i18n.getMonthShortName(m, date?.year) }}</option>\\n    </select><select\\n      [disabled]=\\\"disabled\\\"\\n      class=\\\"custom-select\\\"\\n      [value]=\\\"date?.year\\\"\\n      i18n-aria-label=\\\"@@ngb.datepicker.select-year\\\" aria-label=\\\"Select year\\\"\\n      i18n-title=\\\"@@ngb.datepicker.select-year\\\" title=\\\"Select year\\\"\\n      (change)=\\\"changeYear($event.target.value)\\\">\\n        <option *ngFor=\\\"let y of years\\\" [value]=\\\"y\\\">{{ i18n.getYearNumerals(y) }}</option>\\n    </select>\\n  \",\n                    styles: [\"ngb-datepicker-navigation-select>.custom-select{-ms-flex:1 1 auto;flex:1 1 auto;padding:0 .5rem;font-size:.875rem;height:1.85rem}\"]\n                }] }\n    ];\n    /** @nocollapse */\n    NgbDatepickerNavigationSelect.ctorParameters = function () { return [\n        { type: NgbDatepickerI18n }\n    ]; };\n    NgbDatepickerNavigationSelect.propDecorators = {\n        date: [{ type: Input }],\n        disabled: [{ type: Input }],\n        months: [{ type: Input }],\n        years: [{ type: Input }],\n        select: [{ type: Output }]\n    };\n    return NgbDatepickerNavigationSelect;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nvar NgbCalendarHijri = /** @class */ (function (_super) {\n    __extends(NgbCalendarHijri, _super);\n    function NgbCalendarHijri() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    NgbCalendarHijri.prototype.getDaysPerWeek = /**\n     * @return {?}\n     */\n    function () { return 7; };\n    /**\n     * @return {?}\n     */\n    NgbCalendarHijri.prototype.getMonths = /**\n     * @return {?}\n     */\n    function () { return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; };\n    /**\n     * @return {?}\n     */\n    NgbCalendarHijri.prototype.getWeeksPerMonth = /**\n     * @return {?}\n     */\n    function () { return 6; };\n    /**\n     * @param {?} date\n     * @param {?=} period\n     * @param {?=} number\n     * @return {?}\n     */\n    NgbCalendarHijri.prototype.getNext = /**\n     * @param {?} date\n     * @param {?=} period\n     * @param {?=} number\n     * @return {?}\n     */\n    function (date, period, number) {\n        if (period === void 0) { period = 'd'; }\n        if (number === void 0) { number = 1; }\n        date = new NgbDate(date.year, date.month, date.day);\n        switch (period) {\n            case 'y':\n                date = this._setYear(date, date.year + number);\n                date.month = 1;\n                date.day = 1;\n                return date;\n            case 'm':\n                date = this._setMonth(date, date.month + number);\n                date.day = 1;\n                return date;\n            case 'd':\n                return this._setDay(date, date.day + number);\n            default:\n                return date;\n        }\n    };\n    /**\n     * @param {?} date\n     * @param {?=} period\n     * @param {?=} number\n     * @return {?}\n     */\n    NgbCalendarHijri.prototype.getPrev = /**\n     * @param {?} date\n     * @param {?=} period\n     * @param {?=} number\n     * @return {?}\n     */\n    function (date, period, number) {\n        if (period === void 0) { period = 'd'; }\n        if (number === void 0) { number = 1; }\n        return this.getNext(date, period, -number);\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NgbCalendarHijri.prototype.getWeekday = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        /** @type {?} */\n        var day = this.toGregorian(date).getDay();\n        // in JS Date Sun=0, in ISO 8601 Sun=7\n        return day === 0 ? 7 : day;\n    };\n    /**\n     * @param {?} week\n     * @param {?} firstDayOfWeek\n     * @return {?}\n     */\n    NgbCalendarHijri.prototype.getWeekNumber = /**\n     * @param {?} week\n     * @param {?} firstDayOfWeek\n     * @return {?}\n     */\n    function (week, firstDayOfWeek) {\n        // in JS Date Sun=0, in ISO 8601 Sun=7\n        if (firstDayOfWeek === 7) {\n            firstDayOfWeek = 0;\n        }\n        /** @type {?} */\n        var thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;\n        /** @type {?} */\n        var date = week[thursdayIndex];\n        /** @type {?} */\n        var jsDate = this.toGregorian(date);\n        jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7)); // Thursday\n        // Thursday\n        /** @type {?} */\n        var time = jsDate.getTime();\n        /** @type {?} */\n        var MuhDate = this.toGregorian(new NgbDate(date.year, 1, 1));\n        return Math.floor(Math.round((time - MuhDate.getTime()) / 86400000) / 7) + 1;\n    };\n    /**\n     * @return {?}\n     */\n    NgbCalendarHijri.prototype.getToday = /**\n     * @return {?}\n     */\n    function () { return this.fromGregorian(new Date()); };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NgbCalendarHijri.prototype.isValid = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return date && isNumber(date.year) && isNumber(date.month) && isNumber(date.day) &&\n            !isNaN(this.toGregorian(date).getTime());\n    };\n    /**\n     * @param {?} date\n     * @param {?} day\n     * @return {?}\n     */\n    NgbCalendarHijri.prototype._setDay = /**\n     * @param {?} date\n     * @param {?} day\n     * @return {?}\n     */\n    function (date, day) {\n        day = +day;\n        /** @type {?} */\n        var mDays = this.getDaysPerMonth(date.month, date.year);\n        if (day <= 0) {\n            while (day <= 0) {\n                date = this._setMonth(date, date.month - 1);\n                mDays = this.getDaysPerMonth(date.month, date.year);\n                day += mDays;\n            }\n        }\n        else if (day > mDays) {\n            while (day > mDays) {\n                day -= mDays;\n                date = this._setMonth(date, date.month + 1);\n                mDays = this.getDaysPerMonth(date.month, date.year);\n            }\n        }\n        date.day = day;\n        return date;\n    };\n    /**\n     * @param {?} date\n     * @param {?} month\n     * @return {?}\n     */\n    NgbCalendarHijri.prototype._setMonth = /**\n     * @param {?} date\n     * @param {?} month\n     * @return {?}\n     */\n    function (date, month) {\n        month = +month;\n        date.year = date.year + Math.floor((month - 1) / 12);\n        date.month = Math.floor(((month - 1) % 12 + 12) % 12) + 1;\n        return date;\n    };\n    /**\n     * @param {?} date\n     * @param {?} year\n     * @return {?}\n     */\n    NgbCalendarHijri.prototype._setYear = /**\n     * @param {?} date\n     * @param {?} year\n     * @return {?}\n     */\n    function (date, year) {\n        date.year = +year;\n        return date;\n    };\n    NgbCalendarHijri.decorators = [\n        { type: Injectable }\n    ];\n    return NgbCalendarHijri;\n}(NgbCalendar));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Checks if islamic year is a leap year\n * @param {?} hYear\n * @return {?}\n */\nfunction isIslamicLeapYear(hYear) {\n    return (14 + 11 * hYear) % 30 < 11;\n}\n/**\n * Checks if gregorian years is a leap year\n * @param {?} gDate\n * @return {?}\n */\nfunction isGregorianLeapYear(gDate) {\n    /** @type {?} */\n    var year = gDate.getFullYear();\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\n/**\n * Returns the start of Hijri Month.\n * `hMonth` is 0 for Muharram, 1 for Safar, etc.\n * `hYear` is any Hijri hYear.\n * @param {?} hYear\n * @param {?} hMonth\n * @return {?}\n */\nfunction getIslamicMonthStart(hYear, hMonth) {\n    return Math.ceil(29.5 * hMonth) + (hYear - 1) * 354 + Math.floor((3 + 11 * hYear) / 30.0);\n}\n/**\n * Returns the start of Hijri year.\n * `year` is any Hijri year.\n * @param {?} year\n * @return {?}\n */\nfunction getIslamicYearStart(year) {\n    return (year - 1) * 354 + Math.floor((3 + 11 * year) / 30.0);\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction mod(a, b) {\n    return a - b * Math.floor(a / b);\n}\n/**\n * The civil calendar is one type of Hijri calendars used in islamic countries.\n * Uses a fixed cycle of alternating 29- and 30-day months,\n * with a leap day added to the last month of 11 out of every 30 years.\n * http://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types\n * All the calculations here are based on the equations from \"Calendrical Calculations\" By Edward M. Reingold, Nachum\n * Dershowitz.\n * @type {?}\n */\nvar GREGORIAN_EPOCH = 1721425.5;\n/** @type {?} */\nvar ISLAMIC_EPOCH = 1948439.5;\nvar NgbCalendarIslamicCivil = /** @class */ (function (_super) {\n    __extends(NgbCalendarIslamicCivil, _super);\n    function NgbCalendarIslamicCivil() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Returns the equivalent islamic(civil) date value for a give input Gregorian date.\n     * `gDate` is a JS Date to be converted to Hijri.\n     */\n    /**\n     * Returns the equivalent islamic(civil) date value for a give input Gregorian date.\n     * `gDate` is a JS Date to be converted to Hijri.\n     * @param {?} gDate\n     * @return {?}\n     */\n    NgbCalendarIslamicCivil.prototype.fromGregorian = /**\n     * Returns the equivalent islamic(civil) date value for a give input Gregorian date.\n     * `gDate` is a JS Date to be converted to Hijri.\n     * @param {?} gDate\n     * @return {?}\n     */\n    function (gDate) {\n        /** @type {?} */\n        var gYear = gDate.getFullYear();\n        /** @type {?} */\n        var gMonth = gDate.getMonth();\n        /** @type {?} */\n        var gDay = gDate.getDate();\n        /** @type {?} */\n        var julianDay = GREGORIAN_EPOCH - 1 + 365 * (gYear - 1) + Math.floor((gYear - 1) / 4) +\n            -Math.floor((gYear - 1) / 100) + Math.floor((gYear - 1) / 400) +\n            Math.floor((367 * (gMonth + 1) - 362) / 12 + (gMonth + 1 <= 2 ? 0 : isGregorianLeapYear(gDate) ? -1 : -2) + gDay);\n        julianDay = Math.floor(julianDay) + 0.5;\n        /** @type {?} */\n        var days = julianDay - ISLAMIC_EPOCH;\n        /** @type {?} */\n        var hYear = Math.floor((30 * days + 10646) / 10631.0);\n        /** @type {?} */\n        var hMonth = Math.ceil((days - 29 - getIslamicYearStart(hYear)) / 29.5);\n        hMonth = Math.min(hMonth, 11);\n        /** @type {?} */\n        var hDay = Math.ceil(days - getIslamicMonthStart(hYear, hMonth)) + 1;\n        return new NgbDate(hYear, hMonth + 1, hDay);\n    };\n    /**\n     * Returns the equivalent JS date value for a give input islamic(civil) date.\n     * `hDate` is an islamic(civil) date to be converted to Gregorian.\n     */\n    /**\n     * Returns the equivalent JS date value for a give input islamic(civil) date.\n     * `hDate` is an islamic(civil) date to be converted to Gregorian.\n     * @param {?} hDate\n     * @return {?}\n     */\n    NgbCalendarIslamicCivil.prototype.toGregorian = /**\n     * Returns the equivalent JS date value for a give input islamic(civil) date.\n     * `hDate` is an islamic(civil) date to be converted to Gregorian.\n     * @param {?} hDate\n     * @return {?}\n     */\n    function (hDate) {\n        /** @type {?} */\n        var hYear = hDate.year;\n        /** @type {?} */\n        var hMonth = hDate.month - 1;\n        /** @type {?} */\n        var hDay = hDate.day;\n        /** @type {?} */\n        var julianDay = hDay + Math.ceil(29.5 * hMonth) + (hYear - 1) * 354 + Math.floor((3 + 11 * hYear) / 30) + ISLAMIC_EPOCH - 1;\n        /** @type {?} */\n        var wjd = Math.floor(julianDay - 0.5) + 0.5;\n        /** @type {?} */\n        var depoch = wjd - GREGORIAN_EPOCH;\n        /** @type {?} */\n        var quadricent = Math.floor(depoch / 146097);\n        /** @type {?} */\n        var dqc = mod(depoch, 146097);\n        /** @type {?} */\n        var cent = Math.floor(dqc / 36524);\n        /** @type {?} */\n        var dcent = mod(dqc, 36524);\n        /** @type {?} */\n        var quad = Math.floor(dcent / 1461);\n        /** @type {?} */\n        var dquad = mod(dcent, 1461);\n        /** @type {?} */\n        var yindex = Math.floor(dquad / 365);\n        /** @type {?} */\n        var year = quadricent * 400 + cent * 100 + quad * 4 + yindex;\n        if (!(cent === 4 || yindex === 4)) {\n            year++;\n        }\n        /** @type {?} */\n        var gYearStart = GREGORIAN_EPOCH + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) +\n            Math.floor((year - 1) / 400);\n        /** @type {?} */\n        var yearday = wjd - gYearStart;\n        /** @type {?} */\n        var tjd = GREGORIAN_EPOCH - 1 + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) +\n            Math.floor((year - 1) / 400) + Math.floor(739 / 12 + (isGregorianLeapYear(new Date(year, 3, 1)) ? -1 : -2) + 1);\n        /** @type {?} */\n        var leapadj = wjd < tjd ? 0 : isGregorianLeapYear(new Date(year, 3, 1)) ? 1 : 2;\n        /** @type {?} */\n        var month = Math.floor(((yearday + leapadj) * 12 + 373) / 367);\n        /** @type {?} */\n        var tjd2 = GREGORIAN_EPOCH - 1 + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) +\n            Math.floor((year - 1) / 400) +\n            Math.floor((367 * month - 362) / 12 + (month <= 2 ? 0 : isGregorianLeapYear(new Date(year, month - 1, 1)) ? -1 : -2) +\n                1);\n        /** @type {?} */\n        var day = wjd - tjd2 + 1;\n        return new Date(year, month - 1, day);\n    };\n    /**\n     * Returns the number of days in a specific Hijri month.\n     * `month` is 1 for Muharram, 2 for Safar, etc.\n     * `year` is any Hijri year.\n     */\n    /**\n     * Returns the number of days in a specific Hijri month.\n     * `month` is 1 for Muharram, 2 for Safar, etc.\n     * `year` is any Hijri year.\n     * @param {?} month\n     * @param {?} year\n     * @return {?}\n     */\n    NgbCalendarIslamicCivil.prototype.getDaysPerMonth = /**\n     * Returns the number of days in a specific Hijri month.\n     * `month` is 1 for Muharram, 2 for Safar, etc.\n     * `year` is any Hijri year.\n     * @param {?} month\n     * @param {?} year\n     * @return {?}\n     */\n    function (month, year) {\n        year = year + Math.floor(month / 13);\n        month = ((month - 1) % 12) + 1;\n        /** @type {?} */\n        var length = 29 + month % 2;\n        if (month === 12 && isIslamicLeapYear(year)) {\n            length++;\n        }\n        return length;\n    };\n    NgbCalendarIslamicCivil.decorators = [\n        { type: Injectable }\n    ];\n    return NgbCalendarIslamicCivil;\n}(NgbCalendarHijri));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Umalqura calendar is one type of Hijri calendars used in islamic countries.\n * This Calendar is used by Saudi Arabia for administrative purpose.\n * Unlike tabular calendars, the algorithm involves astronomical calculation, but it's still deterministic.\n * http://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types\n * @type {?}\n */\nvar GREGORIAN_FIRST_DATE = new Date(1882, 10, 12);\n/** @type {?} */\nvar GREGORIAN_LAST_DATE = new Date(2174, 10, 25);\n/** @type {?} */\nvar HIJRI_BEGIN = 1300;\n/** @type {?} */\nvar HIJRI_END = 1600;\n/** @type {?} */\nvar ONE_DAY = 1000 * 60 * 60 * 24;\n/** @type {?} */\nvar MONTH_LENGTH = [\n    // 1300-1304\n    '101010101010', '110101010100', '111011001001', '011011010100', '011011101010',\n    // 1305-1309\n    '001101101100', '101010101101', '010101010101', '011010101001', '011110010010',\n    // 1310-1314\n    '101110101001', '010111010100', '101011011010', '010101011100', '110100101101',\n    // 1315-1319\n    '011010010101', '011101001010', '101101010100', '101101101010', '010110101101',\n    // 1320-1324\n    '010010101110', '101001001111', '010100010111', '011010001011', '011010100101',\n    // 1325-1329\n    '101011010101', '001011010110', '100101011011', '010010011101', '101001001101',\n    // 1330-1334\n    '110100100110', '110110010101', '010110101100', '100110110110', '001010111010',\n    // 1335-1339\n    '101001011011', '010100101011', '101010010101', '011011001010', '101011101001',\n    // 1340-1344\n    '001011110100', '100101110110', '001010110110', '100101010110', '101011001010',\n    // 1345-1349\n    '101110100100', '101111010010', '010111011001', '001011011100', '100101101101',\n    // 1350-1354\n    '010101001101', '101010100101', '101101010010', '101110100101', '010110110100',\n    // 1355-1359\n    '100110110110', '010101010111', '001010010111', '010101001011', '011010100011',\n    // 1360-1364\n    '011101010010', '101101100101', '010101101010', '101010101011', '010100101011',\n    // 1365-1369\n    '110010010101', '110101001010', '110110100101', '010111001010', '101011010110',\n    // 1370-1374\n    '100101010111', '010010101011', '100101001011', '101010100101', '101101010010',\n    // 1375-1379\n    '101101101010', '010101110101', '001001110110', '100010110111', '010001011011',\n    // 1380-1384\n    '010101010101', '010110101001', '010110110100', '100111011010', '010011011101',\n    // 1385-1389\n    '001001101110', '100100110110', '101010101010', '110101010100', '110110110010',\n    // 1390-1394\n    '010111010101', '001011011010', '100101011011', '010010101011', '101001010101',\n    // 1395-1399\n    '101101001001', '101101100100', '101101110001', '010110110100', '101010110101',\n    // 1400-1404\n    '101001010101', '110100100101', '111010010010', '111011001001', '011011010100',\n    // 1405-1409\n    '101011101001', '100101101011', '010010101011', '101010010011', '110101001001',\n    // 1410-1414\n    '110110100100', '110110110010', '101010111001', '010010111010', '101001011011',\n    // 1415-1419\n    '010100101011', '101010010101', '101100101010', '101101010101', '010101011100',\n    // 1420-1424\n    '010010111101', '001000111101', '100100011101', '101010010101', '101101001010',\n    // 1425-1429\n    '101101011010', '010101101101', '001010110110', '100100111011', '010010011011',\n    // 1430-1434\n    '011001010101', '011010101001', '011101010100', '101101101010', '010101101100',\n    // 1435-1439\n    '101010101101', '010101010101', '101100101001', '101110010010', '101110101001',\n    // 1440-1444\n    '010111010100', '101011011010', '010101011010', '101010101011', '010110010101',\n    // 1445-1449\n    '011101001001', '011101100100', '101110101010', '010110110101', '001010110110',\n    // 1450-1454\n    '101001010110', '111001001101', '101100100101', '101101010010', '101101101010',\n    // 1455-1459\n    '010110101101', '001010101110', '100100101111', '010010010111', '011001001011',\n    // 1460-1464\n    '011010100101', '011010101100', '101011010110', '010101011101', '010010011101',\n    // 1465-1469\n    '101001001101', '110100010110', '110110010101', '010110101010', '010110110101',\n    // 1470-1474\n    '001011011010', '100101011011', '010010101101', '010110010101', '011011001010',\n    // 1475-1479\n    '011011100100', '101011101010', '010011110101', '001010110110', '100101010110',\n    // 1480-1484\n    '101010101010', '101101010100', '101111010010', '010111011001', '001011101010',\n    // 1485-1489\n    '100101101101', '010010101101', '101010010101', '101101001010', '101110100101',\n    // 1490-1494\n    '010110110010', '100110110101', '010011010110', '101010010111', '010101000111',\n    // 1495-1499\n    '011010010011', '011101001001', '101101010101', '010101101010', '101001101011',\n    // 1500-1504\n    '010100101011', '101010001011', '110101000110', '110110100011', '010111001010',\n    // 1505-1509\n    '101011010110', '010011011011', '001001101011', '100101001011', '101010100101',\n    // 1510-1514\n    '101101010010', '101101101001', '010101110101', '000101110110', '100010110111',\n    // 1515-1519\n    '001001011011', '010100101011', '010101100101', '010110110100', '100111011010',\n    // 1520-1524\n    '010011101101', '000101101101', '100010110110', '101010100110', '110101010010',\n    // 1525-1529\n    '110110101001', '010111010100', '101011011010', '100101011011', '010010101011',\n    // 1530-1534\n    '011001010011', '011100101001', '011101100010', '101110101001', '010110110010',\n    // 1535-1539\n    '101010110101', '010101010101', '101100100101', '110110010010', '111011001001',\n    // 1540-1544\n    '011011010010', '101011101001', '010101101011', '010010101011', '101001010101',\n    // 1545-1549\n    '110100101001', '110101010100', '110110101010', '100110110101', '010010111010',\n    // 1550-1554\n    '101000111011', '010010011011', '101001001101', '101010101010', '101011010101',\n    // 1555-1559\n    '001011011010', '100101011101', '010001011110', '101000101110', '110010011010',\n    // 1560-1564\n    '110101010101', '011010110010', '011010111001', '010010111010', '101001011101',\n    // 1565-1569\n    '010100101101', '101010010101', '101101010010', '101110101000', '101110110100',\n    // 1570-1574\n    '010110111001', '001011011010', '100101011010', '101101001010', '110110100100',\n    // 1575-1579\n    '111011010001', '011011101000', '101101101010', '010101101101', '010100110101',\n    // 1580-1584\n    '011010010101', '110101001010', '110110101000', '110111010100', '011011011010',\n    // 1585-1589\n    '010101011011', '001010011101', '011000101011', '101100010101', '101101001010',\n    // 1590-1594\n    '101110010101', '010110101010', '101010101110', '100100101110', '110010001111',\n    // 1595-1599\n    '010100100111', '011010010101', '011010101010', '101011010110', '010101011101',\n    // 1600\n    '001010011101'\n];\n/**\n * @param {?} date1\n * @param {?} date2\n * @return {?}\n */\nfunction getDaysDiff(date1, date2) {\n    /** @type {?} */\n    var diff = Math.abs(date1.getTime() - date2.getTime());\n    return Math.round(diff / ONE_DAY);\n}\nvar NgbCalendarIslamicUmalqura = /** @class */ (function (_super) {\n    __extends(NgbCalendarIslamicUmalqura, _super);\n    function NgbCalendarIslamicUmalqura() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n    * Returns the equivalent islamic(Umalqura) date value for a give input Gregorian date.\n    * `gdate` is s JS Date to be converted to Hijri.\n    */\n    /**\n     * Returns the equivalent islamic(Umalqura) date value for a give input Gregorian date.\n     * `gdate` is s JS Date to be converted to Hijri.\n     * @param {?} gDate\n     * @return {?}\n     */\n    NgbCalendarIslamicUmalqura.prototype.fromGregorian = /**\n     * Returns the equivalent islamic(Umalqura) date value for a give input Gregorian date.\n     * `gdate` is s JS Date to be converted to Hijri.\n     * @param {?} gDate\n     * @return {?}\n     */\n    function (gDate) {\n        /** @type {?} */\n        var hDay = 1;\n        /** @type {?} */\n        var hMonth = 0;\n        /** @type {?} */\n        var hYear = 1300;\n        /** @type {?} */\n        var daysDiff = getDaysDiff(gDate, GREGORIAN_FIRST_DATE);\n        if (gDate.getTime() - GREGORIAN_FIRST_DATE.getTime() >= 0 && gDate.getTime() - GREGORIAN_LAST_DATE.getTime() <= 0) {\n            /** @type {?} */\n            var year = 1300;\n            for (var i = 0; i < MONTH_LENGTH.length; i++, year++) {\n                for (var j = 0; j < 12; j++) {\n                    /** @type {?} */\n                    var numOfDays = +MONTH_LENGTH[i][j] + 29;\n                    if (daysDiff <= numOfDays) {\n                        hDay = daysDiff + 1;\n                        if (hDay > numOfDays) {\n                            hDay = 1;\n                            j++;\n                        }\n                        if (j > 11) {\n                            j = 0;\n                            year++;\n                        }\n                        hMonth = j;\n                        hYear = year;\n                        return new NgbDate(hYear, hMonth + 1, hDay);\n                    }\n                    daysDiff = daysDiff - numOfDays;\n                }\n            }\n        }\n        else {\n            return _super.prototype.fromGregorian.call(this, gDate);\n        }\n    };\n    /**\n    * Converts the current Hijri date to Gregorian.\n    */\n    /**\n     * Converts the current Hijri date to Gregorian.\n     * @param {?} hDate\n     * @return {?}\n     */\n    NgbCalendarIslamicUmalqura.prototype.toGregorian = /**\n     * Converts the current Hijri date to Gregorian.\n     * @param {?} hDate\n     * @return {?}\n     */\n    function (hDate) {\n        /** @type {?} */\n        var hYear = hDate.year;\n        /** @type {?} */\n        var hMonth = hDate.month - 1;\n        /** @type {?} */\n        var hDay = hDate.day;\n        /** @type {?} */\n        var gDate = new Date(GREGORIAN_FIRST_DATE);\n        /** @type {?} */\n        var dayDiff = hDay - 1;\n        if (hYear >= HIJRI_BEGIN && hYear <= HIJRI_END) {\n            for (var y = 0; y < hYear - HIJRI_BEGIN; y++) {\n                for (var m = 0; m < 12; m++) {\n                    dayDiff += +MONTH_LENGTH[y][m] + 29;\n                }\n            }\n            for (var m = 0; m < hMonth; m++) {\n                dayDiff += +MONTH_LENGTH[hYear - HIJRI_BEGIN][m] + 29;\n            }\n            gDate.setDate(GREGORIAN_FIRST_DATE.getDate() + dayDiff);\n        }\n        else {\n            gDate = _super.prototype.toGregorian.call(this, hDate);\n        }\n        return gDate;\n    };\n    /**\n    * Returns the number of days in a specific Hijri hMonth.\n    * `hMonth` is 1 for Muharram, 2 for Safar, etc.\n    * `hYear` is any Hijri hYear.\n    */\n    /**\n     * Returns the number of days in a specific Hijri hMonth.\n     * `hMonth` is 1 for Muharram, 2 for Safar, etc.\n     * `hYear` is any Hijri hYear.\n     * @param {?} hMonth\n     * @param {?} hYear\n     * @return {?}\n     */\n    NgbCalendarIslamicUmalqura.prototype.getDaysPerMonth = /**\n     * Returns the number of days in a specific Hijri hMonth.\n     * `hMonth` is 1 for Muharram, 2 for Safar, etc.\n     * `hYear` is any Hijri hYear.\n     * @param {?} hMonth\n     * @param {?} hYear\n     * @return {?}\n     */\n    function (hMonth, hYear) {\n        if (hYear >= HIJRI_BEGIN && hYear <= HIJRI_END) {\n            /** @type {?} */\n            var pos = hYear - HIJRI_BEGIN;\n            return +MONTH_LENGTH[pos][hMonth - 1] + 29;\n        }\n        return _super.prototype.getDaysPerMonth.call(this, hMonth, hYear);\n    };\n    NgbCalendarIslamicUmalqura.decorators = [\n        { type: Injectable }\n    ];\n    return NgbCalendarIslamicUmalqura;\n}(NgbCalendarIslamicCivil));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Returns the equivalent JS date value for a give input Jalali date.\n * `jalaliDate` is an Jalali date to be converted to Gregorian.\n * @param {?} jalaliDate\n * @return {?}\n */\nfunction toGregorian(jalaliDate) {\n    /** @type {?} */\n    var jdn = jalaliToJulian(jalaliDate.year, jalaliDate.month, jalaliDate.day);\n    /** @type {?} */\n    var date = julianToGregorian(jdn);\n    date.setHours(6, 30, 3, 200);\n    return date;\n}\n/**\n * Returns the equivalent jalali date value for a give input Gregorian date.\n * `gdate` is a JS Date to be converted to jalali.\n * utc to local\n * @param {?} gdate\n * @return {?}\n */\nfunction fromGregorian(gdate) {\n    /** @type {?} */\n    var g2d = gregorianToJulian(gdate.getFullYear(), gdate.getMonth() + 1, gdate.getDate());\n    return julianToJalali(g2d);\n}\n/**\n * @param {?} date\n * @param {?} yearValue\n * @return {?}\n */\nfunction setJalaliYear(date, yearValue) {\n    date.year = +yearValue;\n    return date;\n}\n/**\n * @param {?} date\n * @param {?} month\n * @return {?}\n */\nfunction setJalaliMonth(date, month) {\n    month = +month;\n    date.year = date.year + Math.floor((month - 1) / 12);\n    date.month = Math.floor(((month - 1) % 12 + 12) % 12) + 1;\n    return date;\n}\n/**\n * @param {?} date\n * @param {?} day\n * @return {?}\n */\nfunction setJalaliDay(date, day) {\n    /** @type {?} */\n    var mDays = getDaysPerMonth(date.month, date.year);\n    if (day <= 0) {\n        while (day <= 0) {\n            date = setJalaliMonth(date, date.month - 1);\n            mDays = getDaysPerMonth(date.month, date.year);\n            day += mDays;\n        }\n    }\n    else if (day > mDays) {\n        while (day > mDays) {\n            day -= mDays;\n            date = setJalaliMonth(date, date.month + 1);\n            mDays = getDaysPerMonth(date.month, date.year);\n        }\n    }\n    date.day = day;\n    return date;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction mod$1(a, b) {\n    return a - b * Math.floor(a / b);\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction div(a, b) {\n    return Math.trunc(a / b);\n}\n/*\n This function determines if the Jalali (Persian) year is\n leap (366-day long) or is the common year (365 days), and\n finds the day in March (Gregorian calendar) of the first\n day of the Jalali year (jalaliYear).\n @param jalaliYear Jalali calendar year (-61 to 3177)\n @return\n leap: number of years since the last leap year (0 to 4)\n gYear: Gregorian year of the beginning of Jalali year\n march: the March day of Farvardin the 1st (1st day of jalaliYear)\n @see: http://www.astro.uni.torun.pl/~kb/Papers/EMP/PersianC-EMP.htm\n @see: http://www.fourmilab.ch/documents/calendar/\n */\n/**\n * @param {?} jalaliYear\n * @return {?}\n */\nfunction jalCal(jalaliYear) {\n    // Jalali years starting the 33-year rule.\n    /** @type {?} */\n    var breaks = [-61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210, 1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178];\n    /** @type {?} */\n    var breaksLength = breaks.length;\n    /** @type {?} */\n    var gYear = jalaliYear + 621;\n    /** @type {?} */\n    var leapJ = -14;\n    /** @type {?} */\n    var jp = breaks[0];\n    if (jalaliYear < jp || jalaliYear >= breaks[breaksLength - 1]) {\n        throw new Error('Invalid Jalali year ' + jalaliYear);\n    }\n    // Find the limiting years for the Jalali year jalaliYear.\n    /** @type {?} */\n    var jump;\n    for (var i = 1; i < breaksLength; i += 1) {\n        /** @type {?} */\n        var jm = breaks[i];\n        jump = jm - jp;\n        if (jalaliYear < jm) {\n            break;\n        }\n        leapJ = leapJ + div(jump, 33) * 8 + div(mod$1(jump, 33), 4);\n        jp = jm;\n    }\n    /** @type {?} */\n    var n = jalaliYear - jp;\n    // Find the number of leap years from AD 621 to the beginning\n    // of the current Jalali year in the Persian calendar.\n    leapJ = leapJ + div(n, 33) * 8 + div(mod$1(n, 33) + 3, 4);\n    if (mod$1(jump, 33) === 4 && jump - n === 4) {\n        leapJ += 1;\n    }\n    // And the same in the Gregorian calendar (until the year gYear).\n    /** @type {?} */\n    var leapG = div(gYear, 4) - div((div(gYear, 100) + 1) * 3, 4) - 150;\n    // Determine the Gregorian date of Farvardin the 1st.\n    /** @type {?} */\n    var march = 20 + leapJ - leapG;\n    // Find how many years have passed since the last leap year.\n    if (jump - n < 6) {\n        n = n - jump + div(jump + 4, 33) * 33;\n    }\n    /** @type {?} */\n    var leap = mod$1(mod$1(n + 1, 33) - 1, 4);\n    if (leap === -1) {\n        leap = 4;\n    }\n    return { leap: leap, gy: gYear, march: march };\n}\n/*\n Calculates Gregorian and Julian calendar dates from the Julian Day number\n (jdn) for the period since jdn=-34839655 (i.e. the year -100100 of both\n calendars) to some millions years ahead of the present.\n @param jdn Julian Day number\n @return\n gYear: Calendar year (years BC numbered 0, -1, -2, ...)\n gMonth: Calendar month (1 to 12)\n gDay: Calendar day of the month M (1 to 28/29/30/31)\n */\n/**\n * @param {?} julianDayNumber\n * @return {?}\n */\nfunction julianToGregorian(julianDayNumber) {\n    /** @type {?} */\n    var j = 4 * julianDayNumber + 139361631;\n    j = j + div(div(4 * julianDayNumber + 183187720, 146097) * 3, 4) * 4 - 3908;\n    /** @type {?} */\n    var i = div(mod$1(j, 1461), 4) * 5 + 308;\n    /** @type {?} */\n    var gDay = div(mod$1(i, 153), 5) + 1;\n    /** @type {?} */\n    var gMonth = mod$1(div(i, 153), 12) + 1;\n    /** @type {?} */\n    var gYear = div(j, 1461) - 100100 + div(8 - gMonth, 6);\n    return new Date(gYear, gMonth - 1, gDay);\n}\n/*\n Converts a date of the Jalali calendar to the Julian Day number.\n @param jy Jalali year (1 to 3100)\n @param jm Jalali month (1 to 12)\n @param jd Jalali day (1 to 29/31)\n @return Julian Day number\n */\n/**\n * @param {?} gy\n * @param {?} gm\n * @param {?} gd\n * @return {?}\n */\nfunction gregorianToJulian(gy, gm, gd) {\n    /** @type {?} */\n    var d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4) + div(153 * mod$1(gm + 9, 12) + 2, 5) + gd - 34840408;\n    d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752;\n    return d;\n}\n/*\n Converts the Julian Day number to a date in the Jalali calendar.\n @param julianDayNumber Julian Day number\n @return\n jalaliYear: Jalali year (1 to 3100)\n jalaliMonth: Jalali month (1 to 12)\n jalaliDay: Jalali day (1 to 29/31)\n */\n/**\n * @param {?} julianDayNumber\n * @return {?}\n */\nfunction julianToJalali(julianDayNumber) {\n    /** @type {?} */\n    var gy = julianToGregorian(julianDayNumber).getFullYear() // Calculate Gregorian year (gy).\n    ;\n    /** @type {?} */\n    var jalaliYear = gy - 621;\n    /** @type {?} */\n    var r = jalCal(jalaliYear);\n    /** @type {?} */\n    var gregorianDay = gregorianToJulian(gy, 3, r.march);\n    /** @type {?} */\n    var jalaliDay;\n    /** @type {?} */\n    var jalaliMonth;\n    /** @type {?} */\n    var numberOfDays;\n    // Find number of days that passed since 1 Farvardin.\n    numberOfDays = julianDayNumber - gregorianDay;\n    if (numberOfDays >= 0) {\n        if (numberOfDays <= 185) {\n            // The first 6 months.\n            jalaliMonth = 1 + div(numberOfDays, 31);\n            jalaliDay = mod$1(numberOfDays, 31) + 1;\n            return new NgbDate(jalaliYear, jalaliMonth, jalaliDay);\n        }\n        else {\n            // The remaining months.\n            numberOfDays -= 186;\n        }\n    }\n    else {\n        // Previous Jalali year.\n        jalaliYear -= 1;\n        numberOfDays += 179;\n        if (r.leap === 1) {\n            numberOfDays += 1;\n        }\n    }\n    jalaliMonth = 7 + div(numberOfDays, 30);\n    jalaliDay = mod$1(numberOfDays, 30) + 1;\n    return new NgbDate(jalaliYear, jalaliMonth, jalaliDay);\n}\n/*\n Converts a date of the Jalali calendar to the Julian Day number.\n @param jYear Jalali year (1 to 3100)\n @param jMonth Jalali month (1 to 12)\n @param jDay Jalali day (1 to 29/31)\n @return Julian Day number\n */\n/**\n * @param {?} jYear\n * @param {?} jMonth\n * @param {?} jDay\n * @return {?}\n */\nfunction jalaliToJulian(jYear, jMonth, jDay) {\n    /** @type {?} */\n    var r = jalCal(jYear);\n    return gregorianToJulian(r.gy, 3, r.march) + (jMonth - 1) * 31 - div(jMonth, 7) * (jMonth - 7) + jDay - 1;\n}\n/**\n * Returns the number of days in a specific jalali month.\n * @param {?} month\n * @param {?} year\n * @return {?}\n */\nfunction getDaysPerMonth(month, year) {\n    if (month <= 6) {\n        return 31;\n    }\n    if (month <= 11) {\n        return 30;\n    }\n    if (jalCal(year).leap === 0) {\n        return 30;\n    }\n    return 29;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbCalendarPersian = /** @class */ (function (_super) {\n    __extends(NgbCalendarPersian, _super);\n    function NgbCalendarPersian() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    NgbCalendarPersian.prototype.getDaysPerWeek = /**\n     * @return {?}\n     */\n    function () { return 7; };\n    /**\n     * @return {?}\n     */\n    NgbCalendarPersian.prototype.getMonths = /**\n     * @return {?}\n     */\n    function () { return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; };\n    /**\n     * @return {?}\n     */\n    NgbCalendarPersian.prototype.getWeeksPerMonth = /**\n     * @return {?}\n     */\n    function () { return 6; };\n    /**\n     * @param {?} date\n     * @param {?=} period\n     * @param {?=} number\n     * @return {?}\n     */\n    NgbCalendarPersian.prototype.getNext = /**\n     * @param {?} date\n     * @param {?=} period\n     * @param {?=} number\n     * @return {?}\n     */\n    function (date, period, number) {\n        if (period === void 0) { period = 'd'; }\n        if (number === void 0) { number = 1; }\n        date = new NgbDate(date.year, date.month, date.day);\n        switch (period) {\n            case 'y':\n                date = setJalaliYear(date, date.year + number);\n                date.month = 1;\n                date.day = 1;\n                return date;\n            case 'm':\n                date = setJalaliMonth(date, date.month + number);\n                date.day = 1;\n                return date;\n            case 'd':\n                return setJalaliDay(date, date.day + number);\n            default:\n                return date;\n        }\n    };\n    /**\n     * @param {?} date\n     * @param {?=} period\n     * @param {?=} number\n     * @return {?}\n     */\n    NgbCalendarPersian.prototype.getPrev = /**\n     * @param {?} date\n     * @param {?=} period\n     * @param {?=} number\n     * @return {?}\n     */\n    function (date, period, number) {\n        if (period === void 0) { period = 'd'; }\n        if (number === void 0) { number = 1; }\n        return this.getNext(date, period, -number);\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NgbCalendarPersian.prototype.getWeekday = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        /** @type {?} */\n        var day = toGregorian(date).getDay();\n        // in JS Date Sun=0, in ISO 8601 Sun=7\n        return day === 0 ? 7 : day;\n    };\n    /**\n     * @param {?} week\n     * @param {?} firstDayOfWeek\n     * @return {?}\n     */\n    NgbCalendarPersian.prototype.getWeekNumber = /**\n     * @param {?} week\n     * @param {?} firstDayOfWeek\n     * @return {?}\n     */\n    function (week, firstDayOfWeek) {\n        // in JS Date Sun=0, in ISO 8601 Sun=7\n        if (firstDayOfWeek === 7) {\n            firstDayOfWeek = 0;\n        }\n        /** @type {?} */\n        var thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;\n        /** @type {?} */\n        var date = week[thursdayIndex];\n        /** @type {?} */\n        var jsDate = toGregorian(date);\n        jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7)); // Thursday\n        // Thursday\n        /** @type {?} */\n        var time = jsDate.getTime();\n        /** @type {?} */\n        var startDate = toGregorian(new NgbDate(date.year, 1, 1));\n        return Math.floor(Math.round((time - startDate.getTime()) / 86400000) / 7) + 1;\n    };\n    /**\n     * @return {?}\n     */\n    NgbCalendarPersian.prototype.getToday = /**\n     * @return {?}\n     */\n    function () { return fromGregorian(new Date()); };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NgbCalendarPersian.prototype.isValid = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return date && isInteger(date.year) && isInteger(date.month) && isInteger(date.day) &&\n            !isNaN(toGregorian(date).getTime());\n    };\n    NgbCalendarPersian.decorators = [\n        { type: Injectable }\n    ];\n    return NgbCalendarPersian;\n}(NgbCalendar));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar PARTS_PER_HOUR = 1080;\n/** @type {?} */\nvar PARTS_PER_DAY = 24 * PARTS_PER_HOUR;\n/** @type {?} */\nvar PARTS_FRACTIONAL_MONTH = 12 * PARTS_PER_HOUR + 793;\n/** @type {?} */\nvar PARTS_PER_MONTH = 29 * PARTS_PER_DAY + PARTS_FRACTIONAL_MONTH;\n/** @type {?} */\nvar BAHARAD = 11 * PARTS_PER_HOUR + 204;\n/** @type {?} */\nvar HEBREW_DAY_ON_JAN_1_1970 = 2092591;\n/** @type {?} */\nvar GREGORIAN_EPOCH$1 = 1721425.5;\n/**\n * @param {?} year\n * @return {?}\n */\nfunction isGregorianLeapYear$1(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\n/**\n * @param {?} year\n * @return {?}\n */\nfunction numberOfFirstDayInYear(year) {\n    /** @type {?} */\n    var monthsBeforeYear = Math.floor((235 * year - 234) / 19);\n    /** @type {?} */\n    var fractionalMonthsBeforeYear = monthsBeforeYear * PARTS_FRACTIONAL_MONTH + BAHARAD;\n    /** @type {?} */\n    var dayNumber = monthsBeforeYear * 29 + Math.floor(fractionalMonthsBeforeYear / PARTS_PER_DAY);\n    /** @type {?} */\n    var timeOfDay = fractionalMonthsBeforeYear % PARTS_PER_DAY;\n    /** @type {?} */\n    var dayOfWeek = dayNumber % 7;\n    if (dayOfWeek === 2 || dayOfWeek === 4 || dayOfWeek === 6) {\n        dayNumber++;\n        dayOfWeek = dayNumber % 7;\n    }\n    if (dayOfWeek === 1 && timeOfDay > 15 * PARTS_PER_HOUR + 204 && !isHebrewLeapYear(year)) {\n        dayNumber += 2;\n    }\n    else if (dayOfWeek === 0 && timeOfDay > 21 * PARTS_PER_HOUR + 589 && isHebrewLeapYear(year - 1)) {\n        dayNumber++;\n    }\n    return dayNumber;\n}\n/**\n * @param {?} month\n * @param {?} year\n * @return {?}\n */\nfunction getDaysInGregorianMonth(month, year) {\n    /** @type {?} */\n    var days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if (isGregorianLeapYear$1(year)) {\n        days[1]++;\n    }\n    return days[month - 1];\n}\n/**\n * @param {?} year\n * @return {?}\n */\nfunction getHebrewMonths(year) {\n    return isHebrewLeapYear(year) ? 13 : 12;\n}\n/**\n * Returns the number of days in a specific Hebrew year.\n * `year` is any Hebrew year.\n * @param {?} year\n * @return {?}\n */\nfunction getDaysInHebrewYear(year) {\n    return numberOfFirstDayInYear(year + 1) - numberOfFirstDayInYear(year);\n}\n/**\n * @param {?} year\n * @return {?}\n */\nfunction isHebrewLeapYear(year) {\n    /** @type {?} */\n    var b = (year * 12 + 17) % 19;\n    return b >= ((b < 0) ? -7 : 12);\n}\n/**\n * Returns the number of days in a specific Hebrew month.\n * `month` is 1 for Nisan, 2 for Iyar etc. Note: Hebrew leap year contains 13 months.\n * `year` is any Hebrew year.\n * @param {?} month\n * @param {?} year\n * @return {?}\n */\nfunction getDaysInHebrewMonth(month, year) {\n    /** @type {?} */\n    var yearLength = numberOfFirstDayInYear(year + 1) - numberOfFirstDayInYear(year);\n    /** @type {?} */\n    var yearType = (yearLength <= 380 ? yearLength : (yearLength - 30)) - 353;\n    /** @type {?} */\n    var leapYear = isHebrewLeapYear(year);\n    /** @type {?} */\n    var daysInMonth = leapYear ? [30, 29, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29] :\n        [30, 29, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29];\n    if (yearType > 0) {\n        daysInMonth[2]++; // Kislev gets an extra day in normal or complete years.\n    }\n    if (yearType > 1) {\n        daysInMonth[1]++; // Heshvan gets an extra day in complete years only.\n    }\n    return daysInMonth[month - 1];\n}\n/**\n * @param {?} date\n * @return {?}\n */\nfunction getDayNumberInHebrewYear(date) {\n    /** @type {?} */\n    var numberOfDay = 0;\n    for (var i = 1; i < date.month; i++) {\n        numberOfDay += getDaysInHebrewMonth(i, date.year);\n    }\n    return numberOfDay + date.day;\n}\n/**\n * @param {?} date\n * @param {?} val\n * @return {?}\n */\nfunction setHebrewMonth(date, val) {\n    /** @type {?} */\n    var after = val >= 0;\n    if (!after) {\n        val = -val;\n    }\n    while (val > 0) {\n        if (after) {\n            if (val > getHebrewMonths(date.year) - date.month) {\n                val -= getHebrewMonths(date.year) - date.month + 1;\n                date.year++;\n                date.month = 1;\n            }\n            else {\n                date.month += val;\n                val = 0;\n            }\n        }\n        else {\n            if (val >= date.month) {\n                date.year--;\n                val -= date.month;\n                date.month = getHebrewMonths(date.year);\n            }\n            else {\n                date.month -= val;\n                val = 0;\n            }\n        }\n    }\n    return date;\n}\n/**\n * @param {?} date\n * @param {?} val\n * @return {?}\n */\nfunction setHebrewDay(date, val) {\n    /** @type {?} */\n    var after = val >= 0;\n    if (!after) {\n        val = -val;\n    }\n    while (val > 0) {\n        if (after) {\n            if (val > getDaysInHebrewYear(date.year) - getDayNumberInHebrewYear(date)) {\n                val -= getDaysInHebrewYear(date.year) - getDayNumberInHebrewYear(date) + 1;\n                date.year++;\n                date.month = 1;\n                date.day = 1;\n            }\n            else if (val > getDaysInHebrewMonth(date.month, date.year) - date.day) {\n                val -= getDaysInHebrewMonth(date.month, date.year) - date.day + 1;\n                date.month++;\n                date.day = 1;\n            }\n            else {\n                date.day += val;\n                val = 0;\n            }\n        }\n        else {\n            if (val >= date.day) {\n                val -= date.day;\n                date.month--;\n                if (date.month === 0) {\n                    date.year--;\n                    date.month = getHebrewMonths(date.year);\n                }\n                date.day = getDaysInHebrewMonth(date.month, date.year);\n            }\n            else {\n                date.day -= val;\n                val = 0;\n            }\n        }\n    }\n    return date;\n}\n/**\n * Returns the equivalent Hebrew date value for a give input Gregorian date.\n * `gdate` is a JS Date to be converted to Hebrew date.\n * @param {?} gdate\n * @return {?}\n */\nfunction fromGregorian$1(gdate) {\n    /** @type {?} */\n    var date = new Date(gdate);\n    /** @type {?} */\n    var gYear = date.getFullYear();\n    /** @type {?} */\n    var gMonth = date.getMonth();\n    /** @type {?} */\n    var gDay = date.getDate();\n    /** @type {?} */\n    var julianDay = GREGORIAN_EPOCH$1 - 1 + 365 * (gYear - 1) + Math.floor((gYear - 1) / 4) -\n        Math.floor((gYear - 1) / 100) + Math.floor((gYear - 1) / 400) +\n        Math.floor((367 * (gMonth + 1) - 362) / 12 + (gMonth + 1 <= 2 ? 0 : isGregorianLeapYear$1(gYear) ? -1 : -2) + gDay);\n    julianDay = Math.floor(julianDay + 0.5);\n    /** @type {?} */\n    var daysSinceHebEpoch = julianDay - 347997;\n    /** @type {?} */\n    var monthsSinceHebEpoch = Math.floor(daysSinceHebEpoch * PARTS_PER_DAY / PARTS_PER_MONTH);\n    /** @type {?} */\n    var hYear = Math.floor((monthsSinceHebEpoch * 19 + 234) / 235) + 1;\n    /** @type {?} */\n    var firstDayOfThisYear = numberOfFirstDayInYear(hYear);\n    /** @type {?} */\n    var dayOfYear = daysSinceHebEpoch - firstDayOfThisYear;\n    while (dayOfYear < 1) {\n        hYear--;\n        firstDayOfThisYear = numberOfFirstDayInYear(hYear);\n        dayOfYear = daysSinceHebEpoch - firstDayOfThisYear;\n    }\n    /** @type {?} */\n    var hMonth = 1;\n    /** @type {?} */\n    var hDay = dayOfYear;\n    while (hDay > getDaysInHebrewMonth(hMonth, hYear)) {\n        hDay -= getDaysInHebrewMonth(hMonth, hYear);\n        hMonth++;\n    }\n    return new NgbDate(hYear, hMonth, hDay);\n}\n/**\n * Returns the equivalent JS date value for a given Hebrew date.\n * `hebrewDate` is an Hebrew date to be converted to Gregorian.\n * @param {?} hebrewDate\n * @return {?}\n */\nfunction toGregorian$1(hebrewDate) {\n    /** @type {?} */\n    var hYear = hebrewDate.year;\n    /** @type {?} */\n    var hMonth = hebrewDate.month;\n    /** @type {?} */\n    var hDay = hebrewDate.day;\n    /** @type {?} */\n    var days = numberOfFirstDayInYear(hYear);\n    for (var i = 1; i < hMonth; i++) {\n        days += getDaysInHebrewMonth(i, hYear);\n    }\n    days += hDay;\n    /** @type {?} */\n    var diffDays = days - HEBREW_DAY_ON_JAN_1_1970;\n    /** @type {?} */\n    var after = diffDays >= 0;\n    if (!after) {\n        diffDays = -diffDays;\n    }\n    /** @type {?} */\n    var gYear = 1970;\n    /** @type {?} */\n    var gMonth = 1;\n    /** @type {?} */\n    var gDay = 1;\n    while (diffDays > 0) {\n        if (after) {\n            if (diffDays >= (isGregorianLeapYear$1(gYear) ? 366 : 365)) {\n                diffDays -= isGregorianLeapYear$1(gYear) ? 366 : 365;\n                gYear++;\n            }\n            else if (diffDays >= getDaysInGregorianMonth(gMonth, gYear)) {\n                diffDays -= getDaysInGregorianMonth(gMonth, gYear);\n                gMonth++;\n            }\n            else {\n                gDay += diffDays;\n                diffDays = 0;\n            }\n        }\n        else {\n            if (diffDays >= (isGregorianLeapYear$1(gYear - 1) ? 366 : 365)) {\n                diffDays -= isGregorianLeapYear$1(gYear - 1) ? 366 : 365;\n                gYear--;\n            }\n            else {\n                if (gMonth > 1) {\n                    gMonth--;\n                }\n                else {\n                    gMonth = 12;\n                    gYear--;\n                }\n                if (diffDays >= getDaysInGregorianMonth(gMonth, gYear)) {\n                    diffDays -= getDaysInGregorianMonth(gMonth, gYear);\n                }\n                else {\n                    gDay = getDaysInGregorianMonth(gMonth, gYear) - diffDays + 1;\n                    diffDays = 0;\n                }\n            }\n        }\n    }\n    return new Date(gYear, gMonth - 1, gDay);\n}\n/**\n * @param {?} numerals\n * @return {?}\n */\nfunction hebrewNumerals(numerals) {\n    if (!numerals) {\n        return '';\n    }\n    /** @type {?} */\n    var hArray0_9 = ['', '\\u05d0', '\\u05d1', '\\u05d2', '\\u05d3', '\\u05d4', '\\u05d5', '\\u05d6', '\\u05d7', '\\u05d8'];\n    /** @type {?} */\n    var hArray10_19 = [\n        '\\u05d9', '\\u05d9\\u05d0', '\\u05d9\\u05d1', '\\u05d9\\u05d2', '\\u05d9\\u05d3', '\\u05d8\\u05d5', '\\u05d8\\u05d6',\n        '\\u05d9\\u05d6', '\\u05d9\\u05d7', '\\u05d9\\u05d8'\n    ];\n    /** @type {?} */\n    var hArray20_90 = ['', '', '\\u05db', '\\u05dc', '\\u05de', '\\u05e0', '\\u05e1', '\\u05e2', '\\u05e4', '\\u05e6'];\n    /** @type {?} */\n    var hArray100_900 = [\n        '', '\\u05e7', '\\u05e8', '\\u05e9', '\\u05ea', '\\u05ea\\u05e7', '\\u05ea\\u05e8', '\\u05ea\\u05e9', '\\u05ea\\u05ea',\n        '\\u05ea\\u05ea\\u05e7'\n    ];\n    /** @type {?} */\n    var hArray1000_9000 = [\n        '', '\\u05d0', '\\u05d1', '\\u05d1\\u05d0', '\\u05d1\\u05d1', '\\u05d4', '\\u05d4\\u05d0', '\\u05d4\\u05d1',\n        '\\u05d4\\u05d1\\u05d0', '\\u05d4\\u05d1\\u05d1'\n    ];\n    /** @type {?} */\n    var geresh = '\\u05f3';\n    /** @type {?} */\n    var gershaim = '\\u05f4';\n    /** @type {?} */\n    var mem = 0;\n    /** @type {?} */\n    var result = [];\n    /** @type {?} */\n    var step = 0;\n    while (numerals > 0) {\n        /** @type {?} */\n        var m = numerals % 10;\n        if (step === 0) {\n            mem = m;\n        }\n        else if (step === 1) {\n            if (m !== 1) {\n                result.unshift(hArray20_90[m], hArray0_9[mem]);\n            }\n            else {\n                result.unshift(hArray10_19[mem]);\n            }\n        }\n        else if (step === 2) {\n            result.unshift(hArray100_900[m]);\n        }\n        else {\n            if (m !== 5) {\n                result.unshift(hArray1000_9000[m], geresh, ' ');\n            }\n            break;\n        }\n        numerals = Math.floor(numerals / 10);\n        if (step === 0 && numerals === 0) {\n            result.unshift(hArray0_9[m]);\n        }\n        step++;\n    }\n    result = result.join('').split('');\n    if (result.length === 1) {\n        result.push(geresh);\n    }\n    else if (result.length > 1) {\n        result.splice(result.length - 1, 0, gershaim);\n    }\n    return result.join('');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * \\@since 3.2.0\n */\nvar NgbCalendarHebrew = /** @class */ (function (_super) {\n    __extends(NgbCalendarHebrew, _super);\n    function NgbCalendarHebrew() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    NgbCalendarHebrew.prototype.getDaysPerWeek = /**\n     * @return {?}\n     */\n    function () { return 7; };\n    /**\n     * @param {?=} year\n     * @return {?}\n     */\n    NgbCalendarHebrew.prototype.getMonths = /**\n     * @param {?=} year\n     * @return {?}\n     */\n    function (year) {\n        if (year && isHebrewLeapYear(year)) {\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\n        }\n        else {\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgbCalendarHebrew.prototype.getWeeksPerMonth = /**\n     * @return {?}\n     */\n    function () { return 6; };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NgbCalendarHebrew.prototype.isValid = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        /** @type {?} */\n        var b = date && isNumber(date.year) && isNumber(date.month) && isNumber(date.day);\n        b = b && date.month > 0 && date.month <= (isHebrewLeapYear(date.year) ? 13 : 12);\n        b = b && date.day > 0 && date.day <= getDaysInHebrewMonth(date.month, date.year);\n        return b && !isNaN(toGregorian$1(date).getTime());\n    };\n    /**\n     * @param {?} date\n     * @param {?=} period\n     * @param {?=} number\n     * @return {?}\n     */\n    NgbCalendarHebrew.prototype.getNext = /**\n     * @param {?} date\n     * @param {?=} period\n     * @param {?=} number\n     * @return {?}\n     */\n    function (date, period, number) {\n        if (period === void 0) { period = 'd'; }\n        if (number === void 0) { number = 1; }\n        date = new NgbDate(date.year, date.month, date.day);\n        switch (period) {\n            case 'y':\n                date.year += number;\n                date.month = 1;\n                date.day = 1;\n                return date;\n            case 'm':\n                date = setHebrewMonth(date, number);\n                date.day = 1;\n                return date;\n            case 'd':\n                return setHebrewDay(date, number);\n            default:\n                return date;\n        }\n    };\n    /**\n     * @param {?} date\n     * @param {?=} period\n     * @param {?=} number\n     * @return {?}\n     */\n    NgbCalendarHebrew.prototype.getPrev = /**\n     * @param {?} date\n     * @param {?=} period\n     * @param {?=} number\n     * @return {?}\n     */\n    function (date, period, number) {\n        if (period === void 0) { period = 'd'; }\n        if (number === void 0) { number = 1; }\n        return this.getNext(date, period, -number);\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NgbCalendarHebrew.prototype.getWeekday = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        /** @type {?} */\n        var day = toGregorian$1(date).getDay();\n        // in JS Date Sun=0, in ISO 8601 Sun=7\n        return day === 0 ? 7 : day;\n    };\n    /**\n     * @param {?} week\n     * @param {?} firstDayOfWeek\n     * @return {?}\n     */\n    NgbCalendarHebrew.prototype.getWeekNumber = /**\n     * @param {?} week\n     * @param {?} firstDayOfWeek\n     * @return {?}\n     */\n    function (week, firstDayOfWeek) {\n        /** @type {?} */\n        var date = week[week.length - 1];\n        return Math.ceil(getDayNumberInHebrewYear(date) / 7);\n    };\n    /**\n     * @return {?}\n     */\n    NgbCalendarHebrew.prototype.getToday = /**\n     * @return {?}\n     */\n    function () { return fromGregorian$1(new Date()); };\n    /**\n     * @since 3.4.0\n     */\n    /**\n     * \\@since 3.4.0\n     * @param {?} date\n     * @return {?}\n     */\n    NgbCalendarHebrew.prototype.toGregorian = /**\n     * \\@since 3.4.0\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) { return fromJSDate(toGregorian$1(date)); };\n    /**\n     * @since 3.4.0\n     */\n    /**\n     * \\@since 3.4.0\n     * @param {?} date\n     * @return {?}\n     */\n    NgbCalendarHebrew.prototype.fromGregorian = /**\n     * \\@since 3.4.0\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) { return fromGregorian$1(toJSDate(date)); };\n    NgbCalendarHebrew.decorators = [\n        { type: Injectable }\n    ];\n    return NgbCalendarHebrew;\n}(NgbCalendar));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar WEEKDAYS = ['שני', 'שלישי', 'רביעי', 'חמישי', 'שישי', 'שבת', 'ראשון'];\n/** @type {?} */\nvar MONTHS = ['תשרי', 'חשון', 'כסלו', 'טבת', 'שבט', 'אדר', 'ניסן', 'אייר', 'סיון', 'תמוז', 'אב', 'אלול'];\n/** @type {?} */\nvar MONTHS_LEAP = ['תשרי', 'חשון', 'כסלו', 'טבת', 'שבט', 'אדר א׳', 'אדר ב׳', 'ניסן', 'אייר', 'סיון', 'תמוז', 'אב', 'אלול'];\n/**\n * \\@since 3.2.0\n */\nvar NgbDatepickerI18nHebrew = /** @class */ (function (_super) {\n    __extends(NgbDatepickerI18nHebrew, _super);\n    function NgbDatepickerI18nHebrew() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} month\n     * @param {?=} year\n     * @return {?}\n     */\n    NgbDatepickerI18nHebrew.prototype.getMonthShortName = /**\n     * @param {?} month\n     * @param {?=} year\n     * @return {?}\n     */\n    function (month, year) { return this.getMonthFullName(month, year); };\n    /**\n     * @param {?} month\n     * @param {?=} year\n     * @return {?}\n     */\n    NgbDatepickerI18nHebrew.prototype.getMonthFullName = /**\n     * @param {?} month\n     * @param {?=} year\n     * @return {?}\n     */\n    function (month, year) {\n        return isHebrewLeapYear(year) ? MONTHS_LEAP[month - 1] : MONTHS[month - 1];\n    };\n    /**\n     * @param {?} weekday\n     * @return {?}\n     */\n    NgbDatepickerI18nHebrew.prototype.getWeekdayShortName = /**\n     * @param {?} weekday\n     * @return {?}\n     */\n    function (weekday) { return WEEKDAYS[weekday - 1]; };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NgbDatepickerI18nHebrew.prototype.getDayAriaLabel = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return hebrewNumerals(date.day) + \" \" + this.getMonthFullName(date.month, date.year) + \" \" + hebrewNumerals(date.year);\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NgbDatepickerI18nHebrew.prototype.getDayNumerals = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) { return hebrewNumerals(date.day); };\n    /**\n     * @param {?} weekNumber\n     * @return {?}\n     */\n    NgbDatepickerI18nHebrew.prototype.getWeekNumerals = /**\n     * @param {?} weekNumber\n     * @return {?}\n     */\n    function (weekNumber) { return hebrewNumerals(weekNumber); };\n    /**\n     * @param {?} year\n     * @return {?}\n     */\n    NgbDatepickerI18nHebrew.prototype.getYearNumerals = /**\n     * @param {?} year\n     * @return {?}\n     */\n    function (year) { return hebrewNumerals(year); };\n    NgbDatepickerI18nHebrew.decorators = [\n        { type: Injectable }\n    ];\n    return NgbDatepickerI18nHebrew;\n}(NgbDatepickerI18n));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * NgbDateAdapter implementation that allows using native javascript date as a user date model.\n */\nvar NgbDateNativeAdapter = /** @class */ (function (_super) {\n    __extends(NgbDateNativeAdapter, _super);\n    function NgbDateNativeAdapter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Converts native date to a NgbDateStruct\n     */\n    /**\n     * Converts native date to a NgbDateStruct\n     * @param {?} date\n     * @return {?}\n     */\n    NgbDateNativeAdapter.prototype.fromModel = /**\n     * Converts native date to a NgbDateStruct\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return (date instanceof Date && !isNaN(date.getTime())) ? this._fromNativeDate(date) : null;\n    };\n    /**\n     * Converts a NgbDateStruct to a native date\n     */\n    /**\n     * Converts a NgbDateStruct to a native date\n     * @param {?} date\n     * @return {?}\n     */\n    NgbDateNativeAdapter.prototype.toModel = /**\n     * Converts a NgbDateStruct to a native date\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return date && isInteger(date.year) && isInteger(date.month) && isInteger(date.day) ? this._toNativeDate(date) :\n            null;\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NgbDateNativeAdapter.prototype._fromNativeDate = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return { year: date.getFullYear(), month: date.getMonth() + 1, day: date.getDate() };\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NgbDateNativeAdapter.prototype._toNativeDate = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        /** @type {?} */\n        var jsDate = new Date(date.year, date.month - 1, date.day, 12);\n        // avoid 30 -> 1930 conversion\n        jsDate.setFullYear(date.year);\n        return jsDate;\n    };\n    NgbDateNativeAdapter.decorators = [\n        { type: Injectable }\n    ];\n    return NgbDateNativeAdapter;\n}(NgbDateAdapter));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * NgbDateAdapter implementation that allows using native javascript UTC date as a user date model.\n * Same as NgbDateNativeAdapter, but uses UTC dates.\n *\n * \\@since 3.2.0\n */\nvar NgbDateNativeUTCAdapter = /** @class */ (function (_super) {\n    __extends(NgbDateNativeUTCAdapter, _super);\n    function NgbDateNativeUTCAdapter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NgbDateNativeUTCAdapter.prototype._fromNativeDate = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return { year: date.getUTCFullYear(), month: date.getUTCMonth() + 1, day: date.getUTCDate() };\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    NgbDateNativeUTCAdapter.prototype._toNativeDate = /**\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        /** @type {?} */\n        var jsDate = new Date(Date.UTC(date.year, date.month - 1, date.day));\n        // avoid 30 -> 1930 conversion\n        jsDate.setUTCFullYear(date.year);\n        return jsDate;\n    };\n    NgbDateNativeUTCAdapter.decorators = [\n        { type: Injectable }\n    ];\n    return NgbDateNativeUTCAdapter;\n}(NgbDateNativeAdapter));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbDatepickerModule = /** @class */ (function () {\n    function NgbDatepickerModule() {\n    }\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     */\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    NgbDatepickerModule.forRoot = /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    function () { return { ngModule: NgbDatepickerModule }; };\n    NgbDatepickerModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [\n                        NgbDatepicker, NgbDatepickerMonthView, NgbDatepickerNavigation, NgbDatepickerNavigationSelect, NgbDatepickerDayView,\n                        NgbInputDatepicker\n                    ],\n                    exports: [NgbDatepicker, NgbInputDatepicker],\n                    imports: [CommonModule, FormsModule],\n                    entryComponents: [NgbDatepicker]\n                },] }\n    ];\n    return NgbDatepickerModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Configuration service for the NgbDropdown directive.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the dropdowns used in the application.\n */\nvar NgbDropdownConfig = /** @class */ (function () {\n    function NgbDropdownConfig() {\n        this.autoClose = true;\n        this.placement = 'bottom-left';\n    }\n    NgbDropdownConfig.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */ NgbDropdownConfig.ngInjectableDef = defineInjectable({ factory: function NgbDropdownConfig_Factory() { return new NgbDropdownConfig(); }, token: NgbDropdownConfig, providedIn: \"root\" });\n    return NgbDropdownConfig;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n *\n */\nvar NgbDropdownMenu = /** @class */ (function () {\n    function NgbDropdownMenu(dropdown, _elementRef, _renderer) {\n        this.dropdown = dropdown;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this.placement = 'bottom';\n        this.isOpen = false;\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NgbDropdownMenu.prototype.isEventFrom = /**\n     * @param {?} $event\n     * @return {?}\n     */\n    function ($event) { return this._elementRef.nativeElement.contains($event.target); };\n    /**\n     * @param {?} triggerEl\n     * @param {?} placement\n     * @return {?}\n     */\n    NgbDropdownMenu.prototype.position = /**\n     * @param {?} triggerEl\n     * @param {?} placement\n     * @return {?}\n     */\n    function (triggerEl, placement) {\n        this.applyPlacement(positionElements(triggerEl, this._elementRef.nativeElement, placement));\n    };\n    /**\n     * @param {?} _placement\n     * @return {?}\n     */\n    NgbDropdownMenu.prototype.applyPlacement = /**\n     * @param {?} _placement\n     * @return {?}\n     */\n    function (_placement) {\n        // remove the current placement classes\n        this._renderer.removeClass(this._elementRef.nativeElement.parentNode, 'dropup');\n        this._renderer.removeClass(this._elementRef.nativeElement.parentNode, 'dropdown');\n        this.placement = _placement;\n        /**\n         * apply the new placement\n         * in case of top use up-arrow or down-arrow otherwise\n         */\n        if (_placement.search('^top') !== -1) {\n            this._renderer.addClass(this._elementRef.nativeElement.parentNode, 'dropup');\n        }\n        else {\n            this._renderer.addClass(this._elementRef.nativeElement.parentNode, 'dropdown');\n        }\n    };\n    NgbDropdownMenu.decorators = [\n        { type: Directive, args: [{\n                    selector: '[ngbDropdownMenu]',\n                    host: { '[class.dropdown-menu]': 'true', '[class.show]': 'dropdown.isOpen()', '[attr.x-placement]': 'placement' }\n                },] }\n    ];\n    /** @nocollapse */\n    NgbDropdownMenu.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return NgbDropdown; }),] }] },\n        { type: ElementRef },\n        { type: Renderer2 }\n    ]; };\n    return NgbDropdownMenu;\n}());\n/**\n * Marks an element to which dropdown menu will be anchored. This is a simple version\n * of the NgbDropdownToggle directive. It plays the same role as NgbDropdownToggle but\n * doesn't listen to click events to toggle dropdown menu thus enabling support for\n * events other than click.\n *\n * \\@since 1.1.0\n */\nvar NgbDropdownAnchor = /** @class */ (function () {\n    function NgbDropdownAnchor(dropdown, _elementRef) {\n        this.dropdown = dropdown;\n        this._elementRef = _elementRef;\n        this.anchorEl = _elementRef.nativeElement;\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NgbDropdownAnchor.prototype.isEventFrom = /**\n     * @param {?} $event\n     * @return {?}\n     */\n    function ($event) { return this._elementRef.nativeElement.contains($event.target); };\n    NgbDropdownAnchor.decorators = [\n        { type: Directive, args: [{\n                    selector: '[ngbDropdownAnchor]',\n                    host: { 'class': 'dropdown-toggle', 'aria-haspopup': 'true', '[attr.aria-expanded]': 'dropdown.isOpen()' }\n                },] }\n    ];\n    /** @nocollapse */\n    NgbDropdownAnchor.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return NgbDropdown; }),] }] },\n        { type: ElementRef }\n    ]; };\n    return NgbDropdownAnchor;\n}());\n/**\n * Allows the dropdown to be toggled via click. This directive is optional: you can use NgbDropdownAnchor as an\n * alternative.\n */\nvar NgbDropdownToggle = /** @class */ (function (_super) {\n    __extends(NgbDropdownToggle, _super);\n    function NgbDropdownToggle(dropdown, elementRef) {\n        return _super.call(this, dropdown, elementRef) || this;\n    }\n    /**\n     * @return {?}\n     */\n    NgbDropdownToggle.prototype.toggleOpen = /**\n     * @return {?}\n     */\n    function () { this.dropdown.toggle(); };\n    NgbDropdownToggle.decorators = [\n        { type: Directive, args: [{\n                    selector: '[ngbDropdownToggle]',\n                    host: {\n                        'class': 'dropdown-toggle',\n                        'aria-haspopup': 'true',\n                        '[attr.aria-expanded]': 'dropdown.isOpen()',\n                        '(click)': 'toggleOpen()'\n                    },\n                    providers: [{ provide: NgbDropdownAnchor, useExisting: forwardRef(function () { return NgbDropdownToggle; }) }]\n                },] }\n    ];\n    /** @nocollapse */\n    NgbDropdownToggle.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [forwardRef(function () { return NgbDropdown; }),] }] },\n        { type: ElementRef }\n    ]; };\n    return NgbDropdownToggle;\n}(NgbDropdownAnchor));\n/**\n * Transforms a node into a dropdown.\n */\nvar NgbDropdown = /** @class */ (function () {\n    function NgbDropdown(_changeDetector, config, _document, _ngZone) {\n        var _this = this;\n        this._changeDetector = _changeDetector;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._closed$ = new Subject();\n        /**\n         *  Defines whether or not the dropdown-menu is open initially.\n         */\n        this._open = false;\n        /**\n         *  An event fired when the dropdown is opened or closed.\n         *  Event's payload equals whether dropdown is open.\n         */\n        this.openChange = new EventEmitter();\n        this.placement = config.placement;\n        this.autoClose = config.autoClose;\n        this._zoneSubscription = _ngZone.onStable.subscribe(function () { _this._positionMenu(); });\n    }\n    /**\n     * @return {?}\n     */\n    NgbDropdown.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        if (this._menu) {\n            this._menu.applyPlacement(Array.isArray(this.placement) ? (this.placement[0]) : (/** @type {?} */ (this.placement)));\n        }\n        if (this._open) {\n            this._setCloseHandlers();\n        }\n    };\n    /**\n     * Checks if the dropdown menu is open or not.\n     */\n    /**\n     * Checks if the dropdown menu is open or not.\n     * @return {?}\n     */\n    NgbDropdown.prototype.isOpen = /**\n     * Checks if the dropdown menu is open or not.\n     * @return {?}\n     */\n    function () { return this._open; };\n    /**\n     * Opens the dropdown menu of a given navbar or tabbed navigation.\n     */\n    /**\n     * Opens the dropdown menu of a given navbar or tabbed navigation.\n     * @return {?}\n     */\n    NgbDropdown.prototype.open = /**\n     * Opens the dropdown menu of a given navbar or tabbed navigation.\n     * @return {?}\n     */\n    function () {\n        if (!this._open) {\n            this._open = true;\n            this._positionMenu();\n            this.openChange.emit(true);\n            this._setCloseHandlers();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgbDropdown.prototype._setCloseHandlers = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.autoClose) {\n            this._ngZone.runOutsideAngular(function () {\n                /** @type {?} */\n                var escapes$ = fromEvent(_this._document, 'keyup')\n                    .pipe(takeUntil(_this._closed$), \n                // tslint:disable-next-line:deprecation\n                filter(function (event) { return event.which === Key.Escape; }));\n                /** @type {?} */\n                var clicks$ = fromEvent(_this._document, 'click')\n                    .pipe(takeUntil(_this._closed$), filter(function (event) { return _this._shouldCloseFromClick(event); }));\n                race([escapes$, clicks$]).pipe(takeUntil(_this._closed$)).subscribe(function () { return _this._ngZone.run(function () {\n                    _this.close();\n                    _this._changeDetector.markForCheck();\n                }); });\n            });\n        }\n    };\n    /**\n     * Closes the dropdown menu of a given navbar or tabbed navigation.\n     */\n    /**\n     * Closes the dropdown menu of a given navbar or tabbed navigation.\n     * @return {?}\n     */\n    NgbDropdown.prototype.close = /**\n     * Closes the dropdown menu of a given navbar or tabbed navigation.\n     * @return {?}\n     */\n    function () {\n        if (this._open) {\n            this._open = false;\n            this._closed$.next();\n            this.openChange.emit(false);\n        }\n    };\n    /**\n     * Toggles the dropdown menu of a given navbar or tabbed navigation.\n     */\n    /**\n     * Toggles the dropdown menu of a given navbar or tabbed navigation.\n     * @return {?}\n     */\n    NgbDropdown.prototype.toggle = /**\n     * Toggles the dropdown menu of a given navbar or tabbed navigation.\n     * @return {?}\n     */\n    function () {\n        if (this.isOpen()) {\n            this.close();\n        }\n        else {\n            this.open();\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgbDropdown.prototype._shouldCloseFromClick = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        if (event.button !== 2 && !this._isEventFromToggle(event)) {\n            if (this.autoClose === true) {\n                return true;\n            }\n            else if (this.autoClose === 'inside' && this._isEventFromMenu(event)) {\n                return true;\n            }\n            else if (this.autoClose === 'outside' && !this._isEventFromMenu(event)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    NgbDropdown.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._closed$.next();\n        this._zoneSubscription.unsubscribe();\n    };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NgbDropdown.prototype._isEventFromToggle = /**\n     * @param {?} $event\n     * @return {?}\n     */\n    function ($event) { return this._anchor.isEventFrom($event); };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NgbDropdown.prototype._isEventFromMenu = /**\n     * @param {?} $event\n     * @return {?}\n     */\n    function ($event) { return this._menu ? this._menu.isEventFrom($event) : false; };\n    /**\n     * @return {?}\n     */\n    NgbDropdown.prototype._positionMenu = /**\n     * @return {?}\n     */\n    function () {\n        if (this.isOpen() && this._menu) {\n            this._menu.position(this._anchor.anchorEl, this.placement);\n        }\n    };\n    NgbDropdown.decorators = [\n        { type: Directive, args: [{ selector: '[ngbDropdown]', exportAs: 'ngbDropdown', host: { '[class.show]': 'isOpen()' } },] }\n    ];\n    /** @nocollapse */\n    NgbDropdown.ctorParameters = function () { return [\n        { type: ChangeDetectorRef },\n        { type: NgbDropdownConfig },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: NgZone }\n    ]; };\n    NgbDropdown.propDecorators = {\n        _menu: [{ type: ContentChild, args: [NgbDropdownMenu,] }],\n        _anchor: [{ type: ContentChild, args: [NgbDropdownAnchor,] }],\n        autoClose: [{ type: Input }],\n        _open: [{ type: Input, args: ['open',] }],\n        placement: [{ type: Input }],\n        openChange: [{ type: Output }]\n    };\n    return NgbDropdown;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar NGB_DROPDOWN_DIRECTIVES = [NgbDropdown, NgbDropdownAnchor, NgbDropdownToggle, NgbDropdownMenu];\nvar NgbDropdownModule = /** @class */ (function () {\n    function NgbDropdownModule() {\n    }\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     */\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    NgbDropdownModule.forRoot = /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    function () { return { ngModule: NgbDropdownModule }; };\n    NgbDropdownModule.decorators = [\n        { type: NgModule, args: [{ declarations: NGB_DROPDOWN_DIRECTIVES, exports: NGB_DROPDOWN_DIRECTIVES },] }\n    ];\n    return NgbDropdownModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Configuration object token for the NgbModal service.\n * You can provide this configuration, typically in your root module in order to provide default option values for every\n * modal.\n *\n * \\@since 3.1.0\n */\nvar NgbModalConfig = /** @class */ (function () {\n    function NgbModalConfig() {\n        this.backdrop = true;\n        this.keyboard = true;\n    }\n    NgbModalConfig.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */ NgbModalConfig.ngInjectableDef = defineInjectable({ factory: function NgbModalConfig_Factory() { return new NgbModalConfig(); }, token: NgbModalConfig, providedIn: \"root\" });\n    return NgbModalConfig;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar ContentRef = /** @class */ (function () {\n    function ContentRef(nodes, viewRef, componentRef) {\n        this.nodes = nodes;\n        this.viewRef = viewRef;\n        this.componentRef = componentRef;\n    }\n    return ContentRef;\n}());\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nPopupService = /** @class */ (function () {\n    function PopupService(_type, _injector, _viewContainerRef, _renderer, _componentFactoryResolver) {\n        this._type = _type;\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._renderer = _renderer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n    }\n    /**\n     * @param {?=} content\n     * @param {?=} context\n     * @return {?}\n     */\n    PopupService.prototype.open = /**\n     * @param {?=} content\n     * @param {?=} context\n     * @return {?}\n     */\n    function (content, context) {\n        if (!this._windowRef) {\n            this._contentRef = this._getContentRef(content, context);\n            this._windowRef = this._viewContainerRef.createComponent(this._componentFactoryResolver.resolveComponentFactory(this._type), 0, this._injector, this._contentRef.nodes);\n        }\n        return this._windowRef;\n    };\n    /**\n     * @return {?}\n     */\n    PopupService.prototype.close = /**\n     * @return {?}\n     */\n    function () {\n        if (this._windowRef) {\n            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._windowRef.hostView));\n            this._windowRef = null;\n            if (this._contentRef.viewRef) {\n                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));\n                this._contentRef = null;\n            }\n        }\n    };\n    /**\n     * @param {?} content\n     * @param {?=} context\n     * @return {?}\n     */\n    PopupService.prototype._getContentRef = /**\n     * @param {?} content\n     * @param {?=} context\n     * @return {?}\n     */\n    function (content, context) {\n        if (!content) {\n            return new ContentRef([]);\n        }\n        else if (content instanceof TemplateRef) {\n            /** @type {?} */\n            var viewRef = this._viewContainerRef.createEmbeddedView((/** @type {?} */ (content)), context);\n            return new ContentRef([viewRef.rootNodes], viewRef);\n        }\n        else {\n            return new ContentRef([[this._renderer.createText(\"\" + content)]]);\n        }\n    };\n    return PopupService;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar noop = function () { };\n/**\n * Utility to handle the scrollbar.\n *\n * It allows to compensate the lack of a vertical scrollbar by adding an\n * equivalent padding on the right of the body, and to remove this compensation.\n */\nvar ScrollBar = /** @class */ (function () {\n    function ScrollBar(_document) {\n        this._document = _document;\n    }\n    /**\n     * Detects if a scrollbar is present and if yes, already compensates for its\n     * removal by adding an equivalent padding on the right of the body.\n     *\n     * @return a callback used to revert the compensation (noop if there was none,\n     * otherwise a function removing the padding)\n     */\n    /**\n     * Detects if a scrollbar is present and if yes, already compensates for its\n     * removal by adding an equivalent padding on the right of the body.\n     *\n     * @return {?} a callback used to revert the compensation (noop if there was none,\n     * otherwise a function removing the padding)\n     */\n    ScrollBar.prototype.compensate = /**\n     * Detects if a scrollbar is present and if yes, already compensates for its\n     * removal by adding an equivalent padding on the right of the body.\n     *\n     * @return {?} a callback used to revert the compensation (noop if there was none,\n     * otherwise a function removing the padding)\n     */\n    function () { return !this._isPresent() ? noop : this._adjustBody(this._getWidth()); };\n    /**\n     * Adds a padding of the given width on the right of the body.\n     *\n     * @return a callback used to revert the padding to its previous value\n     */\n    /**\n     * Adds a padding of the given width on the right of the body.\n     *\n     * @param {?} width\n     * @return {?} a callback used to revert the padding to its previous value\n     */\n    ScrollBar.prototype._adjustBody = /**\n     * Adds a padding of the given width on the right of the body.\n     *\n     * @param {?} width\n     * @return {?} a callback used to revert the padding to its previous value\n     */\n    function (width) {\n        /** @type {?} */\n        var body = this._document.body;\n        /** @type {?} */\n        var userSetPadding = body.style.paddingRight;\n        /** @type {?} */\n        var paddingAmount = parseFloat(window.getComputedStyle(body)['padding-right']);\n        body.style['padding-right'] = paddingAmount + width + \"px\";\n        return function () { return body.style['padding-right'] = userSetPadding; };\n    };\n    /**\n     * Tells whether a scrollbar is currently present on the body.\n     *\n     * @return true if scrollbar is present, false otherwise\n     */\n    /**\n     * Tells whether a scrollbar is currently present on the body.\n     *\n     * @return {?} true if scrollbar is present, false otherwise\n     */\n    ScrollBar.prototype._isPresent = /**\n     * Tells whether a scrollbar is currently present on the body.\n     *\n     * @return {?} true if scrollbar is present, false otherwise\n     */\n    function () {\n        /** @type {?} */\n        var rect = this._document.body.getBoundingClientRect();\n        return rect.left + rect.right < window.innerWidth;\n    };\n    /**\n     * Calculates and returns the width of a scrollbar.\n     *\n     * @return the width of a scrollbar on this page\n     */\n    /**\n     * Calculates and returns the width of a scrollbar.\n     *\n     * @return {?} the width of a scrollbar on this page\n     */\n    ScrollBar.prototype._getWidth = /**\n     * Calculates and returns the width of a scrollbar.\n     *\n     * @return {?} the width of a scrollbar on this page\n     */\n    function () {\n        /** @type {?} */\n        var measurer = this._document.createElement('div');\n        measurer.className = 'modal-scrollbar-measure';\n        /** @type {?} */\n        var body = this._document.body;\n        body.appendChild(measurer);\n        /** @type {?} */\n        var width = measurer.getBoundingClientRect().width - measurer.clientWidth;\n        body.removeChild(measurer);\n        return width;\n    };\n    ScrollBar.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */\n    ScrollBar.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    /** @nocollapse */ ScrollBar.ngInjectableDef = defineInjectable({ factory: function ScrollBar_Factory() { return new ScrollBar(inject(DOCUMENT)); }, token: ScrollBar, providedIn: \"root\" });\n    return ScrollBar;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbModalBackdrop = /** @class */ (function () {\n    function NgbModalBackdrop() {\n    }\n    NgbModalBackdrop.decorators = [\n        { type: Component, args: [{\n                    selector: 'ngb-modal-backdrop',\n                    template: '',\n                    host: { '[class]': '\"modal-backdrop fade show\" + (backdropClass ? \" \" + backdropClass : \"\")', 'style': 'z-index: 1050' }\n                }] }\n    ];\n    NgbModalBackdrop.propDecorators = {\n        backdropClass: [{ type: Input }]\n    };\n    return NgbModalBackdrop;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A reference to an active (currently opened) modal. Instances of this class\n * can be injected into components passed as modal content.\n */\nvar  /**\n * A reference to an active (currently opened) modal. Instances of this class\n * can be injected into components passed as modal content.\n */\nNgbActiveModal = /** @class */ (function () {\n    function NgbActiveModal() {\n    }\n    /**\n     * Can be used to close a modal, passing an optional result.\n     */\n    /**\n     * Can be used to close a modal, passing an optional result.\n     * @param {?=} result\n     * @return {?}\n     */\n    NgbActiveModal.prototype.close = /**\n     * Can be used to close a modal, passing an optional result.\n     * @param {?=} result\n     * @return {?}\n     */\n    function (result) { };\n    /**\n     * Can be used to dismiss a modal, passing an optional reason.\n     */\n    /**\n     * Can be used to dismiss a modal, passing an optional reason.\n     * @param {?=} reason\n     * @return {?}\n     */\n    NgbActiveModal.prototype.dismiss = /**\n     * Can be used to dismiss a modal, passing an optional reason.\n     * @param {?=} reason\n     * @return {?}\n     */\n    function (reason) { };\n    return NgbActiveModal;\n}());\n/**\n * A reference to a newly opened modal.\n */\nvar  /**\n * A reference to a newly opened modal.\n */\nNgbModalRef = /** @class */ (function () {\n    function NgbModalRef(_windowCmptRef, _contentRef, _backdropCmptRef, _beforeDismiss) {\n        var _this = this;\n        this._windowCmptRef = _windowCmptRef;\n        this._contentRef = _contentRef;\n        this._backdropCmptRef = _backdropCmptRef;\n        this._beforeDismiss = _beforeDismiss;\n        _windowCmptRef.instance.dismissEvent.subscribe(function (reason) { _this.dismiss(reason); });\n        this.result = new Promise(function (resolve, reject) {\n            _this._resolve = resolve;\n            _this._reject = reject;\n        });\n        this.result.then(null, function () { });\n    }\n    Object.defineProperty(NgbModalRef.prototype, \"componentInstance\", {\n        /**\n         * The instance of component used as modal's content.\n         * Undefined when a TemplateRef is used as modal's content.\n         */\n        get: /**\n         * The instance of component used as modal's content.\n         * Undefined when a TemplateRef is used as modal's content.\n         * @return {?}\n         */\n        function () {\n            if (this._contentRef.componentRef) {\n                return this._contentRef.componentRef.instance;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Can be used to close a modal, passing an optional result.\n     */\n    /**\n     * Can be used to close a modal, passing an optional result.\n     * @param {?=} result\n     * @return {?}\n     */\n    NgbModalRef.prototype.close = /**\n     * Can be used to close a modal, passing an optional result.\n     * @param {?=} result\n     * @return {?}\n     */\n    function (result) {\n        if (this._windowCmptRef) {\n            this._resolve(result);\n            this._removeModalElements();\n        }\n    };\n    /**\n     * @param {?=} reason\n     * @return {?}\n     */\n    NgbModalRef.prototype._dismiss = /**\n     * @param {?=} reason\n     * @return {?}\n     */\n    function (reason) {\n        this._reject(reason);\n        this._removeModalElements();\n    };\n    /**\n     * Can be used to dismiss a modal, passing an optional reason.\n     */\n    /**\n     * Can be used to dismiss a modal, passing an optional reason.\n     * @param {?=} reason\n     * @return {?}\n     */\n    NgbModalRef.prototype.dismiss = /**\n     * Can be used to dismiss a modal, passing an optional reason.\n     * @param {?=} reason\n     * @return {?}\n     */\n    function (reason) {\n        var _this = this;\n        if (this._windowCmptRef) {\n            if (!this._beforeDismiss) {\n                this._dismiss(reason);\n            }\n            else {\n                /** @type {?} */\n                var dismiss = this._beforeDismiss();\n                if (dismiss && dismiss.then) {\n                    dismiss.then(function (result) {\n                        if (result !== false) {\n                            _this._dismiss(reason);\n                        }\n                    }, function () { });\n                }\n                else if (dismiss !== false) {\n                    this._dismiss(reason);\n                }\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgbModalRef.prototype._removeModalElements = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var windowNativeEl = this._windowCmptRef.location.nativeElement;\n        windowNativeEl.parentNode.removeChild(windowNativeEl);\n        this._windowCmptRef.destroy();\n        if (this._backdropCmptRef) {\n            /** @type {?} */\n            var backdropNativeEl = this._backdropCmptRef.location.nativeElement;\n            backdropNativeEl.parentNode.removeChild(backdropNativeEl);\n            this._backdropCmptRef.destroy();\n        }\n        if (this._contentRef && this._contentRef.viewRef) {\n            this._contentRef.viewRef.destroy();\n        }\n        this._windowCmptRef = null;\n        this._backdropCmptRef = null;\n        this._contentRef = null;\n    };\n    return NgbModalRef;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @enum {number} */\nvar ModalDismissReasons = {\n    BACKDROP_CLICK: 0,\n    ESC: 1,\n};\nModalDismissReasons[ModalDismissReasons.BACKDROP_CLICK] = 'BACKDROP_CLICK';\nModalDismissReasons[ModalDismissReasons.ESC] = 'ESC';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbModalWindow = /** @class */ (function () {\n    function NgbModalWindow(_document, _elRef) {\n        this._document = _document;\n        this._elRef = _elRef;\n        this.backdrop = true;\n        this.keyboard = true;\n        this.dismissEvent = new EventEmitter();\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NgbModalWindow.prototype.backdropClick = /**\n     * @param {?} $event\n     * @return {?}\n     */\n    function ($event) {\n        if (this.backdrop === true && this._elRef.nativeElement === $event.target) {\n            this.dismiss(ModalDismissReasons.BACKDROP_CLICK);\n        }\n    };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NgbModalWindow.prototype.escKey = /**\n     * @param {?} $event\n     * @return {?}\n     */\n    function ($event) {\n        if (this.keyboard && !$event.defaultPrevented) {\n            this.dismiss(ModalDismissReasons.ESC);\n        }\n    };\n    /**\n     * @param {?} reason\n     * @return {?}\n     */\n    NgbModalWindow.prototype.dismiss = /**\n     * @param {?} reason\n     * @return {?}\n     */\n    function (reason) { this.dismissEvent.emit(reason); };\n    /**\n     * @return {?}\n     */\n    NgbModalWindow.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () { this._elWithFocus = this._document.activeElement; };\n    /**\n     * @return {?}\n     */\n    NgbModalWindow.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () {\n        if (!this._elRef.nativeElement.contains(document.activeElement)) {\n            /** @type {?} */\n            var autoFocusable = (/** @type {?} */ (this._elRef.nativeElement.querySelector(\"[ngbAutofocus]\")));\n            /** @type {?} */\n            var firstFocusable = getFocusableBoundaryElements(this._elRef.nativeElement)[0];\n            /** @type {?} */\n            var elementToFocus = autoFocusable || firstFocusable || this._elRef.nativeElement;\n            elementToFocus.focus();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgbModalWindow.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var body = this._document.body;\n        /** @type {?} */\n        var elWithFocus = this._elWithFocus;\n        /** @type {?} */\n        var elementToFocus;\n        if (elWithFocus && elWithFocus['focus'] && body.contains(elWithFocus)) {\n            elementToFocus = elWithFocus;\n        }\n        else {\n            elementToFocus = body;\n        }\n        elementToFocus.focus();\n        this._elWithFocus = null;\n    };\n    NgbModalWindow.decorators = [\n        { type: Component, args: [{\n                    selector: 'ngb-modal-window',\n                    host: {\n                        '[class]': '\"modal fade show d-block\" + (windowClass ? \" \" + windowClass : \"\")',\n                        'role': 'dialog',\n                        'tabindex': '-1',\n                        '(keyup.esc)': 'escKey($event)',\n                        '(click)': 'backdropClick($event)',\n                        '[attr.aria-labelledby]': 'ariaLabelledBy',\n                    },\n                    template: \"\\n    <div [class]=\\\"'modal-dialog' + (size ? ' modal-' + size : '') + (centered ? ' modal-dialog-centered' : '')\\\" role=\\\"document\\\">\\n        <div class=\\\"modal-content\\\"><ng-content></ng-content></div>\\n    </div>\\n    \"\n                }] }\n    ];\n    /** @nocollapse */\n    NgbModalWindow.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: ElementRef }\n    ]; };\n    NgbModalWindow.propDecorators = {\n        ariaLabelledBy: [{ type: Input }],\n        backdrop: [{ type: Input }],\n        centered: [{ type: Input }],\n        keyboard: [{ type: Input }],\n        size: [{ type: Input }],\n        windowClass: [{ type: Input }],\n        dismissEvent: [{ type: Output, args: ['dismiss',] }]\n    };\n    return NgbModalWindow;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbModalStack = /** @class */ (function () {\n    function NgbModalStack(_applicationRef, _injector, _document, _scrollBar, _rendererFactory) {\n        var _this = this;\n        this._applicationRef = _applicationRef;\n        this._injector = _injector;\n        this._document = _document;\n        this._scrollBar = _scrollBar;\n        this._rendererFactory = _rendererFactory;\n        this._windowAttributes = ['ariaLabelledBy', 'backdrop', 'centered', 'keyboard', 'size', 'windowClass'];\n        this._backdropAttributes = ['backdropClass'];\n        this._modalRefs = [];\n        this._windowCmpts = [];\n        this._activeWindowCmptHasChanged = new Subject();\n        // Trap focus on active WindowCmpt\n        this._activeWindowCmptHasChanged.subscribe(function () {\n            if (_this._windowCmpts.length) {\n                /** @type {?} */\n                var activeWindowCmpt = _this._windowCmpts[_this._windowCmpts.length - 1];\n                ngbFocusTrap(activeWindowCmpt.location.nativeElement, _this._activeWindowCmptHasChanged);\n            }\n        });\n    }\n    /**\n     * @param {?} moduleCFR\n     * @param {?} contentInjector\n     * @param {?} content\n     * @param {?} options\n     * @return {?}\n     */\n    NgbModalStack.prototype.open = /**\n     * @param {?} moduleCFR\n     * @param {?} contentInjector\n     * @param {?} content\n     * @param {?} options\n     * @return {?}\n     */\n    function (moduleCFR, contentInjector, content, options) {\n        var _this = this;\n        /** @type {?} */\n        var containerEl = isDefined(options.container) ? this._document.querySelector(options.container) : this._document.body;\n        /** @type {?} */\n        var renderer = this._rendererFactory.createRenderer(null, null);\n        /** @type {?} */\n        var revertPaddingForScrollBar = this._scrollBar.compensate();\n        /** @type {?} */\n        var removeBodyClass = function () {\n            if (!_this._modalRefs.length) {\n                renderer.removeClass(_this._document.body, 'modal-open');\n            }\n        };\n        if (!containerEl) {\n            throw new Error(\"The specified modal container \\\"\" + (options.container || 'body') + \"\\\" was not found in the DOM.\");\n        }\n        /** @type {?} */\n        var activeModal = new NgbActiveModal();\n        /** @type {?} */\n        var contentRef = this._getContentRef(moduleCFR, options.injector || contentInjector, content, activeModal);\n        /** @type {?} */\n        var backdropCmptRef = options.backdrop !== false ? this._attachBackdrop(moduleCFR, containerEl) : null;\n        /** @type {?} */\n        var windowCmptRef = this._attachWindowComponent(moduleCFR, containerEl, contentRef);\n        /** @type {?} */\n        var ngbModalRef = new NgbModalRef(windowCmptRef, contentRef, backdropCmptRef, options.beforeDismiss);\n        this._registerModalRef(ngbModalRef);\n        this._registerWindowCmpt(windowCmptRef);\n        ngbModalRef.result.then(revertPaddingForScrollBar, revertPaddingForScrollBar);\n        ngbModalRef.result.then(removeBodyClass, removeBodyClass);\n        activeModal.close = function (result) { ngbModalRef.close(result); };\n        activeModal.dismiss = function (reason) { ngbModalRef.dismiss(reason); };\n        this._applyWindowOptions(windowCmptRef.instance, options);\n        if (this._modalRefs.length === 1) {\n            renderer.addClass(this._document.body, 'modal-open');\n        }\n        if (backdropCmptRef && backdropCmptRef.instance) {\n            this._applyBackdropOptions(backdropCmptRef.instance, options);\n        }\n        return ngbModalRef;\n    };\n    /**\n     * @param {?=} reason\n     * @return {?}\n     */\n    NgbModalStack.prototype.dismissAll = /**\n     * @param {?=} reason\n     * @return {?}\n     */\n    function (reason) { this._modalRefs.forEach(function (ngbModalRef) { return ngbModalRef.dismiss(reason); }); };\n    /**\n     * @return {?}\n     */\n    NgbModalStack.prototype.hasOpenModals = /**\n     * @return {?}\n     */\n    function () { return this._modalRefs.length > 0; };\n    /**\n     * @param {?} moduleCFR\n     * @param {?} containerEl\n     * @return {?}\n     */\n    NgbModalStack.prototype._attachBackdrop = /**\n     * @param {?} moduleCFR\n     * @param {?} containerEl\n     * @return {?}\n     */\n    function (moduleCFR, containerEl) {\n        /** @type {?} */\n        var backdropFactory = moduleCFR.resolveComponentFactory(NgbModalBackdrop);\n        /** @type {?} */\n        var backdropCmptRef = backdropFactory.create(this._injector);\n        this._applicationRef.attachView(backdropCmptRef.hostView);\n        containerEl.appendChild(backdropCmptRef.location.nativeElement);\n        return backdropCmptRef;\n    };\n    /**\n     * @param {?} moduleCFR\n     * @param {?} containerEl\n     * @param {?} contentRef\n     * @return {?}\n     */\n    NgbModalStack.prototype._attachWindowComponent = /**\n     * @param {?} moduleCFR\n     * @param {?} containerEl\n     * @param {?} contentRef\n     * @return {?}\n     */\n    function (moduleCFR, containerEl, contentRef) {\n        /** @type {?} */\n        var windowFactory = moduleCFR.resolveComponentFactory(NgbModalWindow);\n        /** @type {?} */\n        var windowCmptRef = windowFactory.create(this._injector, contentRef.nodes);\n        this._applicationRef.attachView(windowCmptRef.hostView);\n        containerEl.appendChild(windowCmptRef.location.nativeElement);\n        return windowCmptRef;\n    };\n    /**\n     * @param {?} windowInstance\n     * @param {?} options\n     * @return {?}\n     */\n    NgbModalStack.prototype._applyWindowOptions = /**\n     * @param {?} windowInstance\n     * @param {?} options\n     * @return {?}\n     */\n    function (windowInstance, options) {\n        this._windowAttributes.forEach(function (optionName) {\n            if (isDefined(options[optionName])) {\n                windowInstance[optionName] = options[optionName];\n            }\n        });\n    };\n    /**\n     * @param {?} backdropInstance\n     * @param {?} options\n     * @return {?}\n     */\n    NgbModalStack.prototype._applyBackdropOptions = /**\n     * @param {?} backdropInstance\n     * @param {?} options\n     * @return {?}\n     */\n    function (backdropInstance, options) {\n        this._backdropAttributes.forEach(function (optionName) {\n            if (isDefined(options[optionName])) {\n                backdropInstance[optionName] = options[optionName];\n            }\n        });\n    };\n    /**\n     * @param {?} moduleCFR\n     * @param {?} contentInjector\n     * @param {?} content\n     * @param {?} activeModal\n     * @return {?}\n     */\n    NgbModalStack.prototype._getContentRef = /**\n     * @param {?} moduleCFR\n     * @param {?} contentInjector\n     * @param {?} content\n     * @param {?} activeModal\n     * @return {?}\n     */\n    function (moduleCFR, contentInjector, content, activeModal) {\n        if (!content) {\n            return new ContentRef([]);\n        }\n        else if (content instanceof TemplateRef) {\n            return this._createFromTemplateRef(content, activeModal);\n        }\n        else if (isString(content)) {\n            return this._createFromString(content);\n        }\n        else {\n            return this._createFromComponent(moduleCFR, contentInjector, content, activeModal);\n        }\n    };\n    /**\n     * @param {?} content\n     * @param {?} activeModal\n     * @return {?}\n     */\n    NgbModalStack.prototype._createFromTemplateRef = /**\n     * @param {?} content\n     * @param {?} activeModal\n     * @return {?}\n     */\n    function (content, activeModal) {\n        /** @type {?} */\n        var context = {\n            $implicit: activeModal,\n            close: /**\n             * @param {?} result\n             * @return {?}\n             */\n            function (result) { activeModal.close(result); },\n            dismiss: /**\n             * @param {?} reason\n             * @return {?}\n             */\n            function (reason) { activeModal.dismiss(reason); }\n        };\n        /** @type {?} */\n        var viewRef = content.createEmbeddedView(context);\n        this._applicationRef.attachView(viewRef);\n        return new ContentRef([viewRef.rootNodes], viewRef);\n    };\n    /**\n     * @param {?} content\n     * @return {?}\n     */\n    NgbModalStack.prototype._createFromString = /**\n     * @param {?} content\n     * @return {?}\n     */\n    function (content) {\n        /** @type {?} */\n        var component = this._document.createTextNode(\"\" + content);\n        return new ContentRef([[component]]);\n    };\n    /**\n     * @param {?} moduleCFR\n     * @param {?} contentInjector\n     * @param {?} content\n     * @param {?} context\n     * @return {?}\n     */\n    NgbModalStack.prototype._createFromComponent = /**\n     * @param {?} moduleCFR\n     * @param {?} contentInjector\n     * @param {?} content\n     * @param {?} context\n     * @return {?}\n     */\n    function (moduleCFR, contentInjector, content, context) {\n        /** @type {?} */\n        var contentCmptFactory = moduleCFR.resolveComponentFactory(content);\n        /** @type {?} */\n        var modalContentInjector = Injector.create({ providers: [{ provide: NgbActiveModal, useValue: context }], parent: contentInjector });\n        /** @type {?} */\n        var componentRef = contentCmptFactory.create(modalContentInjector);\n        this._applicationRef.attachView(componentRef.hostView);\n        return new ContentRef([[componentRef.location.nativeElement]], componentRef.hostView, componentRef);\n    };\n    /**\n     * @param {?} ngbModalRef\n     * @return {?}\n     */\n    NgbModalStack.prototype._registerModalRef = /**\n     * @param {?} ngbModalRef\n     * @return {?}\n     */\n    function (ngbModalRef) {\n        var _this = this;\n        /** @type {?} */\n        var unregisterModalRef = function () {\n            /** @type {?} */\n            var index = _this._modalRefs.indexOf(ngbModalRef);\n            if (index > -1) {\n                _this._modalRefs.splice(index, 1);\n            }\n        };\n        this._modalRefs.push(ngbModalRef);\n        ngbModalRef.result.then(unregisterModalRef, unregisterModalRef);\n    };\n    /**\n     * @param {?} ngbWindowCmpt\n     * @return {?}\n     */\n    NgbModalStack.prototype._registerWindowCmpt = /**\n     * @param {?} ngbWindowCmpt\n     * @return {?}\n     */\n    function (ngbWindowCmpt) {\n        var _this = this;\n        this._windowCmpts.push(ngbWindowCmpt);\n        this._activeWindowCmptHasChanged.next();\n        ngbWindowCmpt.onDestroy(function () {\n            /** @type {?} */\n            var index = _this._windowCmpts.indexOf(ngbWindowCmpt);\n            if (index > -1) {\n                _this._windowCmpts.splice(index, 1);\n                _this._activeWindowCmptHasChanged.next();\n            }\n        });\n    };\n    NgbModalStack.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */\n    NgbModalStack.ctorParameters = function () { return [\n        { type: ApplicationRef },\n        { type: Injector },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: ScrollBar },\n        { type: RendererFactory2 }\n    ]; };\n    /** @nocollapse */ NgbModalStack.ngInjectableDef = defineInjectable({ factory: function NgbModalStack_Factory() { return new NgbModalStack(inject(ApplicationRef), inject(INJECTOR), inject(DOCUMENT), inject(ScrollBar), inject(RendererFactory2)); }, token: NgbModalStack, providedIn: \"root\" });\n    return NgbModalStack;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A service to open modal windows. Creating a modal is straightforward: create a template and pass it as an argument to\n * the \"open\" method!\n */\nvar NgbModal = /** @class */ (function () {\n    function NgbModal(_moduleCFR, _injector, _modalStack, _config) {\n        this._moduleCFR = _moduleCFR;\n        this._injector = _injector;\n        this._modalStack = _modalStack;\n        this._config = _config;\n    }\n    /**\n     * Opens a new modal window with the specified content and using supplied options. Content can be provided\n     * as a TemplateRef or a component type. If you pass a component type as content than instances of those\n     * components can be injected with an instance of the NgbActiveModal class. You can use methods on the\n     * NgbActiveModal class to close / dismiss modals from \"inside\" of a component.\n     */\n    /**\n     * Opens a new modal window with the specified content and using supplied options. Content can be provided\n     * as a TemplateRef or a component type. If you pass a component type as content than instances of those\n     * components can be injected with an instance of the NgbActiveModal class. You can use methods on the\n     * NgbActiveModal class to close / dismiss modals from \"inside\" of a component.\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n    NgbModal.prototype.open = /**\n     * Opens a new modal window with the specified content and using supplied options. Content can be provided\n     * as a TemplateRef or a component type. If you pass a component type as content than instances of those\n     * components can be injected with an instance of the NgbActiveModal class. You can use methods on the\n     * NgbActiveModal class to close / dismiss modals from \"inside\" of a component.\n     * @param {?} content\n     * @param {?=} options\n     * @return {?}\n     */\n    function (content, options) {\n        if (options === void 0) { options = {}; }\n        /** @type {?} */\n        var combinedOptions = Object.assign({}, this._config, options);\n        return this._modalStack.open(this._moduleCFR, this._injector, content, combinedOptions);\n    };\n    /**\n     * Dismiss all currently displayed modal windows with the supplied reason.\n     *\n     * @since 3.1.0\n     */\n    /**\n     * Dismiss all currently displayed modal windows with the supplied reason.\n     *\n     * \\@since 3.1.0\n     * @param {?=} reason\n     * @return {?}\n     */\n    NgbModal.prototype.dismissAll = /**\n     * Dismiss all currently displayed modal windows with the supplied reason.\n     *\n     * \\@since 3.1.0\n     * @param {?=} reason\n     * @return {?}\n     */\n    function (reason) { this._modalStack.dismissAll(reason); };\n    /**\n     * Indicates if there are currently any open modal windows in the application.\n     *\n     * @since 3.3.0\n     */\n    /**\n     * Indicates if there are currently any open modal windows in the application.\n     *\n     * \\@since 3.3.0\n     * @return {?}\n     */\n    NgbModal.prototype.hasOpenModals = /**\n     * Indicates if there are currently any open modal windows in the application.\n     *\n     * \\@since 3.3.0\n     * @return {?}\n     */\n    function () { return this._modalStack.hasOpenModals(); };\n    NgbModal.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */\n    NgbModal.ctorParameters = function () { return [\n        { type: ComponentFactoryResolver },\n        { type: Injector },\n        { type: NgbModalStack },\n        { type: NgbModalConfig }\n    ]; };\n    /** @nocollapse */ NgbModal.ngInjectableDef = defineInjectable({ factory: function NgbModal_Factory() { return new NgbModal(inject(ComponentFactoryResolver), inject(INJECTOR), inject(NgbModalStack), inject(NgbModalConfig)); }, token: NgbModal, providedIn: \"root\" });\n    return NgbModal;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbModalModule = /** @class */ (function () {\n    function NgbModalModule() {\n    }\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     */\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    NgbModalModule.forRoot = /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    function () { return { ngModule: NgbModalModule }; };\n    NgbModalModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [NgbModalBackdrop, NgbModalWindow],\n                    entryComponents: [NgbModalBackdrop, NgbModalWindow],\n                    providers: [NgbModal]\n                },] }\n    ];\n    return NgbModalModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Configuration service for the NgbPagination component.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the paginations used in the application.\n */\nvar NgbPaginationConfig = /** @class */ (function () {\n    function NgbPaginationConfig() {\n        this.disabled = false;\n        this.boundaryLinks = false;\n        this.directionLinks = true;\n        this.ellipses = true;\n        this.maxSize = 0;\n        this.pageSize = 10;\n        this.rotate = false;\n    }\n    NgbPaginationConfig.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */ NgbPaginationConfig.ngInjectableDef = defineInjectable({ factory: function NgbPaginationConfig_Factory() { return new NgbPaginationConfig(); }, token: NgbPaginationConfig, providedIn: \"root\" });\n    return NgbPaginationConfig;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A directive that will take care of visualising a pagination bar and enable / disable buttons correctly!\n */\nvar NgbPagination = /** @class */ (function () {\n    function NgbPagination(config) {\n        this.pageCount = 0;\n        this.pages = [];\n        /**\n         *  Current page. Page numbers start with 1\n         */\n        this.page = 1;\n        /**\n         *  An event fired when the page is changed.\n         *  Event's payload equals to the newly selected page.\n         *  Will fire only if collection size is set and all values are valid.\n         *  Page numbers start with 1\n         */\n        this.pageChange = new EventEmitter(true);\n        this.disabled = config.disabled;\n        this.boundaryLinks = config.boundaryLinks;\n        this.directionLinks = config.directionLinks;\n        this.ellipses = config.ellipses;\n        this.maxSize = config.maxSize;\n        this.pageSize = config.pageSize;\n        this.rotate = config.rotate;\n        this.size = config.size;\n    }\n    /**\n     * @return {?}\n     */\n    NgbPagination.prototype.hasPrevious = /**\n     * @return {?}\n     */\n    function () { return this.page > 1; };\n    /**\n     * @return {?}\n     */\n    NgbPagination.prototype.hasNext = /**\n     * @return {?}\n     */\n    function () { return this.page < this.pageCount; };\n    /**\n     * @param {?} pageNumber\n     * @return {?}\n     */\n    NgbPagination.prototype.selectPage = /**\n     * @param {?} pageNumber\n     * @return {?}\n     */\n    function (pageNumber) { this._updatePages(pageNumber); };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgbPagination.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) { this._updatePages(this.page); };\n    /**\n     * @param {?} pageNumber\n     * @return {?}\n     */\n    NgbPagination.prototype.isEllipsis = /**\n     * @param {?} pageNumber\n     * @return {?}\n     */\n    function (pageNumber) { return pageNumber === -1; };\n    /**\n     * Appends ellipses and first/last page number to the displayed pages\n     */\n    /**\n     * Appends ellipses and first/last page number to the displayed pages\n     * @param {?} start\n     * @param {?} end\n     * @return {?}\n     */\n    NgbPagination.prototype._applyEllipses = /**\n     * Appends ellipses and first/last page number to the displayed pages\n     * @param {?} start\n     * @param {?} end\n     * @return {?}\n     */\n    function (start, end) {\n        if (this.ellipses) {\n            if (start > 0) {\n                if (start > 1) {\n                    this.pages.unshift(-1);\n                }\n                this.pages.unshift(1);\n            }\n            if (end < this.pageCount) {\n                if (end < (this.pageCount - 1)) {\n                    this.pages.push(-1);\n                }\n                this.pages.push(this.pageCount);\n            }\n        }\n    };\n    /**\n     * Rotates page numbers based on maxSize items visible.\n     * Currently selected page stays in the middle:\n     *\n     * Ex. for selected page = 6:\n     * [5,*6*,7] for maxSize = 3\n     * [4,5,*6*,7] for maxSize = 4\n     */\n    /**\n     * Rotates page numbers based on maxSize items visible.\n     * Currently selected page stays in the middle:\n     *\n     * Ex. for selected page = 6:\n     * [5,*6*,7] for maxSize = 3\n     * [4,5,*6*,7] for maxSize = 4\n     * @return {?}\n     */\n    NgbPagination.prototype._applyRotation = /**\n     * Rotates page numbers based on maxSize items visible.\n     * Currently selected page stays in the middle:\n     *\n     * Ex. for selected page = 6:\n     * [5,*6*,7] for maxSize = 3\n     * [4,5,*6*,7] for maxSize = 4\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var start = 0;\n        /** @type {?} */\n        var end = this.pageCount;\n        /** @type {?} */\n        var leftOffset = Math.floor(this.maxSize / 2);\n        /** @type {?} */\n        var rightOffset = this.maxSize % 2 === 0 ? leftOffset - 1 : leftOffset;\n        if (this.page <= leftOffset) {\n            // very beginning, no rotation -> [0..maxSize]\n            end = this.maxSize;\n        }\n        else if (this.pageCount - this.page < leftOffset) {\n            // very end, no rotation -> [len-maxSize..len]\n            start = this.pageCount - this.maxSize;\n        }\n        else {\n            // rotate\n            start = this.page - leftOffset - 1;\n            end = this.page + rightOffset;\n        }\n        return [start, end];\n    };\n    /**\n     * Paginates page numbers based on maxSize items per page\n     */\n    /**\n     * Paginates page numbers based on maxSize items per page\n     * @return {?}\n     */\n    NgbPagination.prototype._applyPagination = /**\n     * Paginates page numbers based on maxSize items per page\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var page = Math.ceil(this.page / this.maxSize) - 1;\n        /** @type {?} */\n        var start = page * this.maxSize;\n        /** @type {?} */\n        var end = start + this.maxSize;\n        return [start, end];\n    };\n    /**\n     * @param {?} newPageNo\n     * @return {?}\n     */\n    NgbPagination.prototype._setPageInRange = /**\n     * @param {?} newPageNo\n     * @return {?}\n     */\n    function (newPageNo) {\n        /** @type {?} */\n        var prevPageNo = this.page;\n        this.page = getValueInRange(newPageNo, this.pageCount, 1);\n        if (this.page !== prevPageNo && isNumber(this.collectionSize)) {\n            this.pageChange.emit(this.page);\n        }\n    };\n    /**\n     * @param {?} newPage\n     * @return {?}\n     */\n    NgbPagination.prototype._updatePages = /**\n     * @param {?} newPage\n     * @return {?}\n     */\n    function (newPage) {\n        var _a, _b;\n        this.pageCount = Math.ceil(this.collectionSize / this.pageSize);\n        if (!isNumber(this.pageCount)) {\n            this.pageCount = 0;\n        }\n        // fill-in model needed to render pages\n        this.pages.length = 0;\n        for (var i = 1; i <= this.pageCount; i++) {\n            this.pages.push(i);\n        }\n        // set page within 1..max range\n        this._setPageInRange(newPage);\n        // apply maxSize if necessary\n        if (this.maxSize > 0 && this.pageCount > this.maxSize) {\n            /** @type {?} */\n            var start = 0;\n            /** @type {?} */\n            var end = this.pageCount;\n            // either paginating or rotating page numbers\n            if (this.rotate) {\n                _a = __read(this._applyRotation(), 2), start = _a[0], end = _a[1];\n            }\n            else {\n                _b = __read(this._applyPagination(), 2), start = _b[0], end = _b[1];\n            }\n            this.pages = this.pages.slice(start, end);\n            // adding ellipses\n            this._applyEllipses(start, end);\n        }\n    };\n    NgbPagination.decorators = [\n        { type: Component, args: [{\n                    selector: 'ngb-pagination',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: { 'role': 'navigation' },\n                    template: \"\\n    <ul [class]=\\\"'pagination' + (size ? ' pagination-' + size : '')\\\">\\n      <li *ngIf=\\\"boundaryLinks\\\" class=\\\"page-item\\\"\\n        [class.disabled]=\\\"!hasPrevious() || disabled\\\">\\n        <a aria-label=\\\"First\\\" i18n-aria-label=\\\"@@ngb.pagination.first-aria\\\" class=\\\"page-link\\\" href\\n          (click)=\\\"selectPage(1); $event.preventDefault()\\\" [attr.tabindex]=\\\"(hasPrevious() ? null : '-1')\\\">\\n          <span aria-hidden=\\\"true\\\" i18n=\\\"@@ngb.pagination.first\\\">&laquo;&laquo;</span>\\n        </a>\\n      </li>\\n\\n      <li *ngIf=\\\"directionLinks\\\" class=\\\"page-item\\\"\\n        [class.disabled]=\\\"!hasPrevious() || disabled\\\">\\n        <a aria-label=\\\"Previous\\\" i18n-aria-label=\\\"@@ngb.pagination.previous-aria\\\" class=\\\"page-link\\\" href\\n          (click)=\\\"selectPage(page-1); $event.preventDefault()\\\" [attr.tabindex]=\\\"(hasPrevious() ? null : '-1')\\\">\\n          <span aria-hidden=\\\"true\\\" i18n=\\\"@@ngb.pagination.previous\\\">&laquo;</span>\\n        </a>\\n      </li>\\n      <li *ngFor=\\\"let pageNumber of pages\\\" class=\\\"page-item\\\" [class.active]=\\\"pageNumber === page\\\"\\n        [class.disabled]=\\\"isEllipsis(pageNumber) || disabled\\\">\\n        <a *ngIf=\\\"isEllipsis(pageNumber)\\\" class=\\\"page-link\\\">...</a>\\n        <a *ngIf=\\\"!isEllipsis(pageNumber)\\\" class=\\\"page-link\\\" href (click)=\\\"selectPage(pageNumber); $event.preventDefault()\\\">\\n          {{pageNumber}}\\n          <span *ngIf=\\\"pageNumber === page\\\" class=\\\"sr-only\\\">(current)</span>\\n        </a>\\n      </li>\\n      <li *ngIf=\\\"directionLinks\\\" class=\\\"page-item\\\" [class.disabled]=\\\"!hasNext() || disabled\\\">\\n        <a aria-label=\\\"Next\\\" i18n-aria-label=\\\"@@ngb.pagination.next-aria\\\" class=\\\"page-link\\\" href\\n          (click)=\\\"selectPage(page+1); $event.preventDefault()\\\" [attr.tabindex]=\\\"(hasNext() ? null : '-1')\\\">\\n          <span aria-hidden=\\\"true\\\" i18n=\\\"@@ngb.pagination.next\\\">&raquo;</span>\\n        </a>\\n      </li>\\n\\n      <li *ngIf=\\\"boundaryLinks\\\" class=\\\"page-item\\\" [class.disabled]=\\\"!hasNext() || disabled\\\">\\n        <a aria-label=\\\"Last\\\" i18n-aria-label=\\\"@@ngb.pagination.last-aria\\\" class=\\\"page-link\\\" href\\n          (click)=\\\"selectPage(pageCount); $event.preventDefault()\\\" [attr.tabindex]=\\\"(hasNext() ? null : '-1')\\\">\\n          <span aria-hidden=\\\"true\\\" i18n=\\\"@@ngb.pagination.last\\\">&raquo;&raquo;</span>\\n        </a>\\n      </li>\\n    </ul>\\n  \"\n                }] }\n    ];\n    /** @nocollapse */\n    NgbPagination.ctorParameters = function () { return [\n        { type: NgbPaginationConfig }\n    ]; };\n    NgbPagination.propDecorators = {\n        disabled: [{ type: Input }],\n        boundaryLinks: [{ type: Input }],\n        directionLinks: [{ type: Input }],\n        ellipses: [{ type: Input }],\n        rotate: [{ type: Input }],\n        collectionSize: [{ type: Input }],\n        maxSize: [{ type: Input }],\n        page: [{ type: Input }],\n        pageSize: [{ type: Input }],\n        pageChange: [{ type: Output }],\n        size: [{ type: Input }]\n    };\n    return NgbPagination;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbPaginationModule = /** @class */ (function () {\n    function NgbPaginationModule() {\n    }\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     */\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    NgbPaginationModule.forRoot = /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    function () { return { ngModule: NgbPaginationModule }; };\n    NgbPaginationModule.decorators = [\n        { type: NgModule, args: [{ declarations: [NgbPagination], exports: [NgbPagination], imports: [CommonModule] },] }\n    ];\n    return NgbPaginationModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar Trigger = /** @class */ (function () {\n    function Trigger(open, close) {\n        this.open = open;\n        this.close = close;\n        if (!close) {\n            this.close = open;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    Trigger.prototype.isManual = /**\n     * @return {?}\n     */\n    function () { return this.open === 'manual' || this.close === 'manual'; };\n    return Trigger;\n}());\n/** @type {?} */\nvar DEFAULT_ALIASES = {\n    'hover': ['mouseenter', 'mouseleave']\n};\n/**\n * @param {?} triggers\n * @param {?=} aliases\n * @return {?}\n */\nfunction parseTriggers(triggers, aliases) {\n    if (aliases === void 0) { aliases = DEFAULT_ALIASES; }\n    /** @type {?} */\n    var trimmedTriggers = (triggers || '').trim();\n    if (trimmedTriggers.length === 0) {\n        return [];\n    }\n    /** @type {?} */\n    var parsedTriggers = trimmedTriggers.split(/\\s+/).map(function (trigger) { return trigger.split(':'); }).map(function (triggerPair) {\n        /** @type {?} */\n        var alias = aliases[triggerPair[0]] || triggerPair;\n        return new Trigger(alias[0], alias[1]);\n    });\n    /** @type {?} */\n    var manualTriggers = parsedTriggers.filter(function (triggerPair) { return triggerPair.isManual(); });\n    if (manualTriggers.length > 1) {\n        throw 'Triggers parse error: only one manual trigger is allowed';\n    }\n    if (manualTriggers.length === 1 && parsedTriggers.length > 1) {\n        throw 'Triggers parse error: manual trigger can\\'t be mixed with other triggers';\n    }\n    return parsedTriggers;\n}\n/** @type {?} */\nvar noopFn = function () { };\n/**\n * @param {?} renderer\n * @param {?} nativeElement\n * @param {?} triggers\n * @param {?} openFn\n * @param {?} closeFn\n * @param {?} toggleFn\n * @return {?}\n */\nfunction listenToTriggers(renderer, nativeElement, triggers, openFn, closeFn, toggleFn) {\n    /** @type {?} */\n    var parsedTriggers = parseTriggers(triggers);\n    /** @type {?} */\n    var listeners = [];\n    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {\n        return noopFn;\n    }\n    parsedTriggers.forEach(function (trigger) {\n        if (trigger.open === trigger.close) {\n            listeners.push(renderer.listen(nativeElement, trigger.open, toggleFn));\n        }\n        else {\n            listeners.push(renderer.listen(nativeElement, trigger.open, openFn), renderer.listen(nativeElement, trigger.close, closeFn));\n        }\n    });\n    return function () { listeners.forEach(function (unsubscribeFn) { return unsubscribeFn(); }); };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Configuration service for the NgbPopover directive.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the popovers used in the application.\n */\nvar NgbPopoverConfig = /** @class */ (function () {\n    function NgbPopoverConfig() {\n        this.autoClose = true;\n        this.placement = 'top';\n        this.triggers = 'click';\n        this.disablePopover = false;\n    }\n    NgbPopoverConfig.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */ NgbPopoverConfig.ngInjectableDef = defineInjectable({ factory: function NgbPopoverConfig_Factory() { return new NgbPopoverConfig(); }, token: NgbPopoverConfig, providedIn: \"root\" });\n    return NgbPopoverConfig;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar nextId$3 = 0;\nvar NgbPopoverWindow = /** @class */ (function () {\n    function NgbPopoverWindow(_element, _renderer) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this.placement = 'top';\n    }\n    /**\n     * @return {?}\n     */\n    NgbPopoverWindow.prototype.isTitleTemplate = /**\n     * @return {?}\n     */\n    function () { return this.title instanceof TemplateRef; };\n    /**\n     * @param {?} _placement\n     * @return {?}\n     */\n    NgbPopoverWindow.prototype.applyPlacement = /**\n     * @param {?} _placement\n     * @return {?}\n     */\n    function (_placement) {\n        // remove the current placement classes\n        this._renderer.removeClass(this._element.nativeElement, 'bs-popover-' + this.placement.toString().split('-')[0]);\n        this._renderer.removeClass(this._element.nativeElement, 'bs-popover-' + this.placement.toString());\n        // set the new placement classes\n        this.placement = _placement;\n        // apply the new placement\n        this._renderer.addClass(this._element.nativeElement, 'bs-popover-' + this.placement.toString().split('-')[0]);\n        this._renderer.addClass(this._element.nativeElement, 'bs-popover-' + this.placement.toString());\n    };\n    /**\n     * Tells whether the event has been triggered from this component's subtree or not.\n     *\n     * @param event the event to check\n     *\n     * @return whether the event has been triggered from this component's subtree or not.\n     */\n    /**\n     * Tells whether the event has been triggered from this component's subtree or not.\n     *\n     * @param {?} event the event to check\n     *\n     * @return {?} whether the event has been triggered from this component's subtree or not.\n     */\n    NgbPopoverWindow.prototype.isEventFrom = /**\n     * Tells whether the event has been triggered from this component's subtree or not.\n     *\n     * @param {?} event the event to check\n     *\n     * @return {?} whether the event has been triggered from this component's subtree or not.\n     */\n    function (event) { return this._element.nativeElement.contains((/** @type {?} */ (event.target))); };\n    NgbPopoverWindow.decorators = [\n        { type: Component, args: [{\n                    selector: 'ngb-popover-window',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    host: {\n                        '[class]': '\"popover bs-popover-\" + placement.split(\"-\")[0]+\" bs-popover-\" + placement + (popoverClass ? \" \" + popoverClass : \"\")',\n                        'role': 'tooltip',\n                        '[id]': 'id'\n                    },\n                    template: \"\\n    <div class=\\\"arrow\\\"></div>\\n    <h3 class=\\\"popover-header\\\" *ngIf=\\\"title != null\\\">\\n      <ng-template #simpleTitle>{{title}}</ng-template>\\n      <ng-template [ngTemplateOutlet]=\\\"isTitleTemplate() ? title : simpleTitle\\\" [ngTemplateOutletContext]=\\\"context\\\"></ng-template>\\n    </h3>\\n    <div class=\\\"popover-body\\\"><ng-content></ng-content></div>\",\n                    styles: [\"ngb-popover-window.bs-popover-bottom .arrow,ngb-popover-window.bs-popover-top .arrow{left:50%;margin-left:-5px}ngb-popover-window.bs-popover-bottom-left .arrow,ngb-popover-window.bs-popover-top-left .arrow{left:2em}ngb-popover-window.bs-popover-bottom-right .arrow,ngb-popover-window.bs-popover-top-right .arrow{left:auto;right:2em}ngb-popover-window.bs-popover-left .arrow,ngb-popover-window.bs-popover-right .arrow{top:50%;margin-top:-5px}ngb-popover-window.bs-popover-left-top .arrow,ngb-popover-window.bs-popover-right-top .arrow{top:.7em}ngb-popover-window.bs-popover-left-bottom .arrow,ngb-popover-window.bs-popover-right-bottom .arrow{top:auto;bottom:.7em}\"]\n                }] }\n    ];\n    /** @nocollapse */\n    NgbPopoverWindow.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Renderer2 }\n    ]; };\n    NgbPopoverWindow.propDecorators = {\n        placement: [{ type: Input }],\n        title: [{ type: Input }],\n        id: [{ type: Input }],\n        popoverClass: [{ type: Input }],\n        context: [{ type: Input }]\n    };\n    return NgbPopoverWindow;\n}());\n/**\n * A lightweight, extensible directive for fancy popover creation.\n */\nvar NgbPopover = /** @class */ (function () {\n    function NgbPopover(_elementRef, _renderer, injector, componentFactoryResolver, viewContainerRef, config, _ngZone, _document) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        /**\n         * Emits an event when the popover is shown\n         */\n        this.shown = new EventEmitter();\n        /**\n         * Emits an event when the popover is hidden\n         */\n        this.hidden = new EventEmitter();\n        this._ngbPopoverWindowId = \"ngb-popover-\" + nextId$3++;\n        this.autoClose = config.autoClose;\n        this.placement = config.placement;\n        this.triggers = config.triggers;\n        this.container = config.container;\n        this.disablePopover = config.disablePopover;\n        this.popoverClass = config.popoverClass;\n        this._popupService = new PopupService(NgbPopoverWindow, injector, viewContainerRef, _renderer, componentFactoryResolver);\n        this._zoneSubscription = _ngZone.onStable.subscribe(function () {\n            if (_this._windowRef) {\n                _this._windowRef.instance.applyPlacement(positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, _this.placement, _this.container === 'body'));\n            }\n        });\n    }\n    /**\n     * @return {?}\n     */\n    NgbPopover.prototype._isDisabled = /**\n     * @return {?}\n     */\n    function () {\n        if (this.disablePopover) {\n            return true;\n        }\n        if (!this.ngbPopover && !this.popoverTitle) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Opens an element’s popover. This is considered a “manual” triggering of the popover.\n     * The context is an optional value to be injected into the popover template when it is created.\n     */\n    /**\n     * Opens an element’s popover. This is considered a “manual” triggering of the popover.\n     * The context is an optional value to be injected into the popover template when it is created.\n     * @param {?=} context\n     * @return {?}\n     */\n    NgbPopover.prototype.open = /**\n     * Opens an element’s popover. This is considered a “manual” triggering of the popover.\n     * The context is an optional value to be injected into the popover template when it is created.\n     * @param {?=} context\n     * @return {?}\n     */\n    function (context) {\n        var _this = this;\n        if (!this._windowRef && !this._isDisabled()) {\n            this._windowRef = this._popupService.open(this.ngbPopover, context);\n            this._windowRef.instance.title = this.popoverTitle;\n            this._windowRef.instance.context = context;\n            this._windowRef.instance.popoverClass = this.popoverClass;\n            this._windowRef.instance.id = this._ngbPopoverWindowId;\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._ngbPopoverWindowId);\n            if (this.container === 'body') {\n                this._document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\n            }\n            // apply styling to set basic css-classes on target element, before going for positioning\n            this._windowRef.changeDetectorRef.detectChanges();\n            this._windowRef.changeDetectorRef.markForCheck();\n            // position popover along the element\n            this._windowRef.instance.applyPlacement(positionElements(this._elementRef.nativeElement, this._windowRef.location.nativeElement, this.placement, this.container === 'body'));\n            if (this.autoClose) {\n                this._ngZone.runOutsideAngular(function () {\n                    // prevents automatic closing right after an opening by putting a guard for the time of one event handling\n                    // pass\n                    // use case: click event would reach an element opening the popover first, then reach the autoClose handler\n                    // which would close it\n                    /** @type {?} */\n                    var justOpened = true;\n                    requestAnimationFrame(function () { return justOpened = false; });\n                    /** @type {?} */\n                    var escapes$ = fromEvent(_this._document, 'keyup')\n                        .pipe(takeUntil(_this.hidden), \n                    // tslint:disable-next-line:deprecation\n                    filter(function (event) { return event.which === Key.Escape; }));\n                    /** @type {?} */\n                    var clicks$ = fromEvent(_this._document, 'click')\n                        .pipe(takeUntil(_this.hidden), filter(function () { return !justOpened; }), filter(function (event) { return _this._shouldCloseFromClick(event); }));\n                    race([escapes$, clicks$]).subscribe(function () { return _this._ngZone.run(function () { return _this.close(); }); });\n                });\n            }\n            this.shown.emit();\n        }\n    };\n    /**\n     * Closes an element’s popover. This is considered a “manual” triggering of the popover.\n     */\n    /**\n     * Closes an element’s popover. This is considered a “manual” triggering of the popover.\n     * @return {?}\n     */\n    NgbPopover.prototype.close = /**\n     * Closes an element’s popover. This is considered a “manual” triggering of the popover.\n     * @return {?}\n     */\n    function () {\n        if (this._windowRef) {\n            this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\n            this._popupService.close();\n            this._windowRef = null;\n            this.hidden.emit();\n        }\n    };\n    /**\n     * Toggles an element’s popover. This is considered a “manual” triggering of the popover.\n     */\n    /**\n     * Toggles an element’s popover. This is considered a “manual” triggering of the popover.\n     * @return {?}\n     */\n    NgbPopover.prototype.toggle = /**\n     * Toggles an element’s popover. This is considered a “manual” triggering of the popover.\n     * @return {?}\n     */\n    function () {\n        if (this._windowRef) {\n            this.close();\n        }\n        else {\n            this.open();\n        }\n    };\n    /**\n     * Returns whether or not the popover is currently being shown\n     */\n    /**\n     * Returns whether or not the popover is currently being shown\n     * @return {?}\n     */\n    NgbPopover.prototype.isOpen = /**\n     * Returns whether or not the popover is currently being shown\n     * @return {?}\n     */\n    function () { return this._windowRef != null; };\n    /**\n     * @return {?}\n     */\n    NgbPopover.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._unregisterListenersFn = listenToTriggers(this._renderer, this._elementRef.nativeElement, this.triggers, this.open.bind(this), this.close.bind(this), this.toggle.bind(this));\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgbPopover.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        // close popover if title and content become empty, or disablePopover set to true\n        if ((changes['ngbPopover'] || changes['popoverTitle'] || changes['disablePopover']) && this._isDisabled()) {\n            this.close();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgbPopover.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.close();\n        // This check is needed as it might happen that ngOnDestroy is called before ngOnInit\n        // under certain conditions, see: https://github.com/ng-bootstrap/ng-bootstrap/issues/2199\n        if (this._unregisterListenersFn) {\n            this._unregisterListenersFn();\n        }\n        this._zoneSubscription.unsubscribe();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgbPopover.prototype._shouldCloseFromClick = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        if (event.button !== 2) {\n            if (this.autoClose === true) {\n                return true;\n            }\n            else if (this.autoClose === 'inside' && this._isEventFromPopover(event)) {\n                return true;\n            }\n            else if (this.autoClose === 'outside' && !this._isEventFromPopover(event)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgbPopover.prototype._isEventFromPopover = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        /** @type {?} */\n        var popup = this._windowRef.instance;\n        return popup ? popup.isEventFrom(event) : false;\n    };\n    NgbPopover.decorators = [\n        { type: Directive, args: [{ selector: '[ngbPopover]', exportAs: 'ngbPopover' },] }\n    ];\n    /** @nocollapse */\n    NgbPopover.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: Injector },\n        { type: ComponentFactoryResolver },\n        { type: ViewContainerRef },\n        { type: NgbPopoverConfig },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    NgbPopover.propDecorators = {\n        autoClose: [{ type: Input }],\n        ngbPopover: [{ type: Input }],\n        popoverTitle: [{ type: Input }],\n        placement: [{ type: Input }],\n        triggers: [{ type: Input }],\n        container: [{ type: Input }],\n        disablePopover: [{ type: Input }],\n        popoverClass: [{ type: Input }],\n        shown: [{ type: Output }],\n        hidden: [{ type: Output }]\n    };\n    return NgbPopover;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbPopoverModule = /** @class */ (function () {\n    function NgbPopoverModule() {\n    }\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     */\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    NgbPopoverModule.forRoot = /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    function () { return { ngModule: NgbPopoverModule }; };\n    NgbPopoverModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [NgbPopover, NgbPopoverWindow],\n                    exports: [NgbPopover],\n                    imports: [CommonModule],\n                    entryComponents: [NgbPopoverWindow]\n                },] }\n    ];\n    return NgbPopoverModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Configuration service for the NgbProgressbar component.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the progress bars used in the application.\n */\nvar NgbProgressbarConfig = /** @class */ (function () {\n    function NgbProgressbarConfig() {\n        this.max = 100;\n        this.animated = false;\n        this.striped = false;\n        this.showValue = false;\n    }\n    NgbProgressbarConfig.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */ NgbProgressbarConfig.ngInjectableDef = defineInjectable({ factory: function NgbProgressbarConfig_Factory() { return new NgbProgressbarConfig(); }, token: NgbProgressbarConfig, providedIn: \"root\" });\n    return NgbProgressbarConfig;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Directive that can be used to provide feedback on the progress of a workflow or an action.\n */\nvar NgbProgressbar = /** @class */ (function () {\n    function NgbProgressbar(config) {\n        /**\n         * Current value to be displayed in the progressbar. Should be smaller or equal to \"max\" value.\n         */\n        this.value = 0;\n        this.max = config.max;\n        this.animated = config.animated;\n        this.striped = config.striped;\n        this.type = config.type;\n        this.showValue = config.showValue;\n        this.height = config.height;\n    }\n    /**\n     * @return {?}\n     */\n    NgbProgressbar.prototype.getValue = /**\n     * @return {?}\n     */\n    function () { return getValueInRange(this.value, this.max); };\n    /**\n     * @return {?}\n     */\n    NgbProgressbar.prototype.getPercentValue = /**\n     * @return {?}\n     */\n    function () { return 100 * this.getValue() / this.max; };\n    NgbProgressbar.decorators = [\n        { type: Component, args: [{\n                    selector: 'ngb-progressbar',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: \"\\n    <div class=\\\"progress\\\" [style.height]=\\\"height\\\">\\n      <div class=\\\"progress-bar{{type ? ' bg-' + type : ''}}{{animated ? ' progress-bar-animated' : ''}}{{striped ?\\n    ' progress-bar-striped' : ''}}\\\" role=\\\"progressbar\\\" [style.width.%]=\\\"getPercentValue()\\\"\\n    [attr.aria-valuenow]=\\\"getValue()\\\" aria-valuemin=\\\"0\\\" [attr.aria-valuemax]=\\\"max\\\">\\n        <span *ngIf=\\\"showValue\\\" i18n=\\\"@@ngb.progressbar.value\\\">{{getPercentValue()}}%</span><ng-content></ng-content>\\n      </div>\\n    </div>\\n  \"\n                }] }\n    ];\n    /** @nocollapse */\n    NgbProgressbar.ctorParameters = function () { return [\n        { type: NgbProgressbarConfig }\n    ]; };\n    NgbProgressbar.propDecorators = {\n        max: [{ type: Input }],\n        animated: [{ type: Input }],\n        striped: [{ type: Input }],\n        showValue: [{ type: Input }],\n        type: [{ type: Input }],\n        value: [{ type: Input }],\n        height: [{ type: Input }]\n    };\n    return NgbProgressbar;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbProgressbarModule = /** @class */ (function () {\n    function NgbProgressbarModule() {\n    }\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     */\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    NgbProgressbarModule.forRoot = /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    function () { return { ngModule: NgbProgressbarModule }; };\n    NgbProgressbarModule.decorators = [\n        { type: NgModule, args: [{ declarations: [NgbProgressbar], exports: [NgbProgressbar], imports: [CommonModule] },] }\n    ];\n    return NgbProgressbarModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Configuration service for the NgbRating component.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the ratings used in the application.\n */\nvar NgbRatingConfig = /** @class */ (function () {\n    function NgbRatingConfig() {\n        this.max = 10;\n        this.readonly = false;\n        this.resettable = false;\n    }\n    NgbRatingConfig.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */ NgbRatingConfig.ngInjectableDef = defineInjectable({ factory: function NgbRatingConfig_Factory() { return new NgbRatingConfig(); }, token: NgbRatingConfig, providedIn: \"root\" });\n    return NgbRatingConfig;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar NGB_RATING_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return NgbRating; }),\n    multi: true\n};\n/**\n * Rating directive that will take care of visualising a star rating bar.\n */\nvar NgbRating = /** @class */ (function () {\n    function NgbRating(config, _changeDetectorRef) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this.contexts = [];\n        this.disabled = false;\n        /**\n         * An event fired when a user is hovering over a given rating.\n         * Event's payload equals to the rating being hovered over.\n         */\n        this.hover = new EventEmitter();\n        /**\n         * An event fired when a user stops hovering over a given rating.\n         * Event's payload equals to the rating of the last item being hovered over.\n         */\n        this.leave = new EventEmitter();\n        /**\n         * An event fired when a user selects a new rating.\n         * Event's payload equals to the newly selected rating.\n         */\n        this.rateChange = new EventEmitter(true);\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        this.max = config.max;\n        this.readonly = config.readonly;\n    }\n    /**\n     * @return {?}\n     */\n    NgbRating.prototype.ariaValueText = /**\n     * @return {?}\n     */\n    function () { return this.nextRate + \" out of \" + this.max; };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgbRating.prototype.enter = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        if (!this.readonly && !this.disabled) {\n            this._updateState(value);\n        }\n        this.hover.emit(value);\n    };\n    /**\n     * @return {?}\n     */\n    NgbRating.prototype.handleBlur = /**\n     * @return {?}\n     */\n    function () { this.onTouched(); };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgbRating.prototype.handleClick = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { this.update(this.resettable && this.rate === value ? 0 : value); };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgbRating.prototype.handleKeyDown = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        // tslint:disable-next-line:deprecation\n        var which = event.which;\n        if (Key[toString(which)]) {\n            event.preventDefault();\n            switch (which) {\n                case Key.ArrowDown:\n                case Key.ArrowLeft:\n                    this.update(this.rate - 1);\n                    break;\n                case Key.ArrowUp:\n                case Key.ArrowRight:\n                    this.update(this.rate + 1);\n                    break;\n                case Key.Home:\n                    this.update(0);\n                    break;\n                case Key.End:\n                    this.update(this.max);\n                    break;\n            }\n        }\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgbRating.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if (changes['rate']) {\n            this.update(this.rate);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgbRating.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this.contexts = Array.from({ length: this.max }, function (v, k) { return ({ fill: 0, index: k }); });\n        this._updateState(this.rate);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NgbRating.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onChange = fn; };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NgbRating.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @return {?}\n     */\n    NgbRating.prototype.reset = /**\n     * @return {?}\n     */\n    function () {\n        this.leave.emit(this.nextRate);\n        this._updateState(this.rate);\n    };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NgbRating.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) { this.disabled = isDisabled; };\n    /**\n     * @param {?} value\n     * @param {?=} internalChange\n     * @return {?}\n     */\n    NgbRating.prototype.update = /**\n     * @param {?} value\n     * @param {?=} internalChange\n     * @return {?}\n     */\n    function (value, internalChange) {\n        if (internalChange === void 0) { internalChange = true; }\n        /** @type {?} */\n        var newRate = getValueInRange(value, this.max, 0);\n        if (!this.readonly && !this.disabled && this.rate !== newRate) {\n            this.rate = newRate;\n            this.rateChange.emit(this.rate);\n        }\n        if (internalChange) {\n            this.onChange(this.rate);\n            this.onTouched();\n        }\n        this._updateState(this.rate);\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgbRating.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.update(value, false);\n        this._changeDetectorRef.markForCheck();\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    NgbRating.prototype._getFillValue = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        /** @type {?} */\n        var diff = this.nextRate - index;\n        if (diff >= 1) {\n            return 100;\n        }\n        if (diff < 1 && diff > 0) {\n            return parseInt((diff * 100).toFixed(2), 10);\n        }\n        return 0;\n    };\n    /**\n     * @param {?} nextValue\n     * @return {?}\n     */\n    NgbRating.prototype._updateState = /**\n     * @param {?} nextValue\n     * @return {?}\n     */\n    function (nextValue) {\n        var _this = this;\n        this.nextRate = nextValue;\n        this.contexts.forEach(function (context, index) { return context.fill = _this._getFillValue(index); });\n    };\n    NgbRating.decorators = [\n        { type: Component, args: [{\n                    selector: 'ngb-rating',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: {\n                        'class': 'd-inline-flex',\n                        'tabindex': '0',\n                        'role': 'slider',\n                        'aria-valuemin': '0',\n                        '[attr.aria-valuemax]': 'max',\n                        '[attr.aria-valuenow]': 'nextRate',\n                        '[attr.aria-valuetext]': 'ariaValueText()',\n                        '[attr.aria-disabled]': 'readonly ? true : null',\n                        '(blur)': 'handleBlur()',\n                        '(keydown)': 'handleKeyDown($event)',\n                        '(mouseleave)': 'reset()'\n                    },\n                    template: \"\\n    <ng-template #t let-fill=\\\"fill\\\">{{ fill === 100 ? '&#9733;' : '&#9734;' }}</ng-template>\\n    <ng-template ngFor [ngForOf]=\\\"contexts\\\" let-index=\\\"index\\\">\\n      <span class=\\\"sr-only\\\">({{ index < nextRate ? '*' : ' ' }})</span>\\n      <span (mouseenter)=\\\"enter(index + 1)\\\" (click)=\\\"handleClick(index + 1)\\\" [style.cursor]=\\\"readonly || disabled ? 'default' : 'pointer'\\\">\\n        <ng-template [ngTemplateOutlet]=\\\"starTemplate || t\\\" [ngTemplateOutletContext]=\\\"contexts[index]\\\"></ng-template>\\n      </span>\\n    </ng-template>\\n  \",\n                    providers: [NGB_RATING_VALUE_ACCESSOR]\n                }] }\n    ];\n    /** @nocollapse */\n    NgbRating.ctorParameters = function () { return [\n        { type: NgbRatingConfig },\n        { type: ChangeDetectorRef }\n    ]; };\n    NgbRating.propDecorators = {\n        max: [{ type: Input }],\n        rate: [{ type: Input }],\n        readonly: [{ type: Input }],\n        resettable: [{ type: Input }],\n        starTemplate: [{ type: Input }, { type: ContentChild, args: [TemplateRef,] }],\n        hover: [{ type: Output }],\n        leave: [{ type: Output }],\n        rateChange: [{ type: Output }]\n    };\n    return NgbRating;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbRatingModule = /** @class */ (function () {\n    function NgbRatingModule() {\n    }\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     */\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    NgbRatingModule.forRoot = /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    function () { return { ngModule: NgbRatingModule }; };\n    NgbRatingModule.decorators = [\n        { type: NgModule, args: [{ declarations: [NgbRating], exports: [NgbRating], imports: [CommonModule] },] }\n    ];\n    return NgbRatingModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Configuration service for the NgbTabset component.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the tabsets used in the application.\n */\nvar NgbTabsetConfig = /** @class */ (function () {\n    function NgbTabsetConfig() {\n        this.justify = 'start';\n        this.orientation = 'horizontal';\n        this.type = 'tabs';\n    }\n    NgbTabsetConfig.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */ NgbTabsetConfig.ngInjectableDef = defineInjectable({ factory: function NgbTabsetConfig_Factory() { return new NgbTabsetConfig(); }, token: NgbTabsetConfig, providedIn: \"root\" });\n    return NgbTabsetConfig;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar nextId$4 = 0;\n/**\n * This directive should be used to wrap tab titles that need to contain HTML markup or other directives.\n */\nvar NgbTabTitle = /** @class */ (function () {\n    function NgbTabTitle(templateRef) {\n        this.templateRef = templateRef;\n    }\n    NgbTabTitle.decorators = [\n        { type: Directive, args: [{ selector: 'ng-template[ngbTabTitle]' },] }\n    ];\n    /** @nocollapse */\n    NgbTabTitle.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return NgbTabTitle;\n}());\n/**\n * This directive must be used to wrap content to be displayed in a tab.\n */\nvar NgbTabContent = /** @class */ (function () {\n    function NgbTabContent(templateRef) {\n        this.templateRef = templateRef;\n    }\n    NgbTabContent.decorators = [\n        { type: Directive, args: [{ selector: 'ng-template[ngbTabContent]' },] }\n    ];\n    /** @nocollapse */\n    NgbTabContent.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return NgbTabContent;\n}());\n/**\n * A directive representing an individual tab.\n */\nvar NgbTab = /** @class */ (function () {\n    function NgbTab() {\n        /**\n         * Unique tab identifier. Must be unique for the entire document for proper accessibility support.\n         */\n        this.id = \"ngb-tab-\" + nextId$4++;\n        /**\n         * Allows toggling disabled state of a given state. Disabled tabs can't be selected.\n         */\n        this.disabled = false;\n    }\n    /**\n     * @return {?}\n     */\n    NgbTab.prototype.ngAfterContentChecked = /**\n     * @return {?}\n     */\n    function () {\n        // We are using @ContentChildren instead of @ContentChild as in the Angular version being used\n        // only @ContentChildren allows us to specify the {descendants: false} option.\n        // Without {descendants: false} we are hitting bugs described in:\n        // https://github.com/ng-bootstrap/ng-bootstrap/issues/2240\n        this.titleTpl = this.titleTpls.first;\n        this.contentTpl = this.contentTpls.first;\n    };\n    NgbTab.decorators = [\n        { type: Directive, args: [{ selector: 'ngb-tab' },] }\n    ];\n    NgbTab.propDecorators = {\n        id: [{ type: Input }],\n        title: [{ type: Input }],\n        disabled: [{ type: Input }],\n        titleTpls: [{ type: ContentChildren, args: [NgbTabTitle, { descendants: false },] }],\n        contentTpls: [{ type: ContentChildren, args: [NgbTabContent, { descendants: false },] }]\n    };\n    return NgbTab;\n}());\n/**\n * A component that makes it easy to create tabbed interface.\n */\nvar NgbTabset = /** @class */ (function () {\n    function NgbTabset(config) {\n        /**\n         * Whether the closed tabs should be hidden without destroying them\n         */\n        this.destroyOnHide = true;\n        /**\n         * A tab change event fired right before the tab selection happens. See NgbTabChangeEvent for payload details\n         */\n        this.tabChange = new EventEmitter();\n        this.type = config.type;\n        this.justify = config.justify;\n        this.orientation = config.orientation;\n    }\n    Object.defineProperty(NgbTabset.prototype, \"justify\", {\n        /**\n         * The horizontal alignment of the nav with flexbox utilities. Can be one of 'start', 'center', 'end', 'fill' or\n         * 'justified'\n         * The default value is 'start'.\n         */\n        set: /**\n         * The horizontal alignment of the nav with flexbox utilities. Can be one of 'start', 'center', 'end', 'fill' or\n         * 'justified'\n         * The default value is 'start'.\n         * @param {?} className\n         * @return {?}\n         */\n        function (className) {\n            if (className === 'fill' || className === 'justified') {\n                this.justifyClass = \"nav-\" + className;\n            }\n            else {\n                this.justifyClass = \"justify-content-\" + className;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Selects the tab with the given id and shows its associated pane.\n     * Any other tab that was previously selected becomes unselected and its associated pane is hidden.\n     */\n    /**\n     * Selects the tab with the given id and shows its associated pane.\n     * Any other tab that was previously selected becomes unselected and its associated pane is hidden.\n     * @param {?} tabId\n     * @return {?}\n     */\n    NgbTabset.prototype.select = /**\n     * Selects the tab with the given id and shows its associated pane.\n     * Any other tab that was previously selected becomes unselected and its associated pane is hidden.\n     * @param {?} tabId\n     * @return {?}\n     */\n    function (tabId) {\n        /** @type {?} */\n        var selectedTab = this._getTabById(tabId);\n        if (selectedTab && !selectedTab.disabled && this.activeId !== selectedTab.id) {\n            /** @type {?} */\n            var defaultPrevented_1 = false;\n            this.tabChange.emit({ activeId: this.activeId, nextId: selectedTab.id, preventDefault: function () { defaultPrevented_1 = true; } });\n            if (!defaultPrevented_1) {\n                this.activeId = selectedTab.id;\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgbTabset.prototype.ngAfterContentChecked = /**\n     * @return {?}\n     */\n    function () {\n        // auto-correct activeId that might have been set incorrectly as input\n        /** @type {?} */\n        var activeTab = this._getTabById(this.activeId);\n        this.activeId = activeTab ? activeTab.id : (this.tabs.length ? this.tabs.first.id : null);\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    NgbTabset.prototype._getTabById = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        /** @type {?} */\n        var tabsWithId = this.tabs.filter(function (tab) { return tab.id === id; });\n        return tabsWithId.length ? tabsWithId[0] : null;\n    };\n    NgbTabset.decorators = [\n        { type: Component, args: [{\n                    selector: 'ngb-tabset',\n                    exportAs: 'ngbTabset',\n                    template: \"\\n    <ul [class]=\\\"'nav nav-' + type + (orientation == 'horizontal'?  ' ' + justifyClass : ' flex-column')\\\" role=\\\"tablist\\\">\\n      <li class=\\\"nav-item\\\" *ngFor=\\\"let tab of tabs\\\">\\n        <a [id]=\\\"tab.id\\\" class=\\\"nav-link\\\" [class.active]=\\\"tab.id === activeId\\\" [class.disabled]=\\\"tab.disabled\\\"\\n          href (click)=\\\"select(tab.id); $event.preventDefault()\\\" role=\\\"tab\\\" [attr.tabindex]=\\\"(tab.disabled ? '-1': undefined)\\\"\\n          [attr.aria-controls]=\\\"(!destroyOnHide || tab.id === activeId ? tab.id + '-panel' : null)\\\"\\n          [attr.aria-expanded]=\\\"tab.id === activeId\\\" [attr.aria-disabled]=\\\"tab.disabled\\\">\\n          {{tab.title}}<ng-template [ngTemplateOutlet]=\\\"tab.titleTpl?.templateRef\\\"></ng-template>\\n        </a>\\n      </li>\\n    </ul>\\n    <div class=\\\"tab-content\\\">\\n      <ng-template ngFor let-tab [ngForOf]=\\\"tabs\\\">\\n        <div\\n          class=\\\"tab-pane {{tab.id === activeId ? 'active' : null}}\\\"\\n          *ngIf=\\\"!destroyOnHide || tab.id === activeId\\\"\\n          role=\\\"tabpanel\\\"\\n          [attr.aria-labelledby]=\\\"tab.id\\\" id=\\\"{{tab.id}}-panel\\\"\\n          [attr.aria-expanded]=\\\"tab.id === activeId\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"tab.contentTpl?.templateRef\\\"></ng-template>\\n        </div>\\n      </ng-template>\\n    </div>\\n  \"\n                }] }\n    ];\n    /** @nocollapse */\n    NgbTabset.ctorParameters = function () { return [\n        { type: NgbTabsetConfig }\n    ]; };\n    NgbTabset.propDecorators = {\n        tabs: [{ type: ContentChildren, args: [NgbTab,] }],\n        activeId: [{ type: Input }],\n        destroyOnHide: [{ type: Input }],\n        justify: [{ type: Input }],\n        orientation: [{ type: Input }],\n        type: [{ type: Input }],\n        tabChange: [{ type: Output }]\n    };\n    return NgbTabset;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar NGB_TABSET_DIRECTIVES = [NgbTabset, NgbTab, NgbTabContent, NgbTabTitle];\nvar NgbTabsetModule = /** @class */ (function () {\n    function NgbTabsetModule() {\n    }\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     */\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    NgbTabsetModule.forRoot = /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    function () { return { ngModule: NgbTabsetModule }; };\n    NgbTabsetModule.decorators = [\n        { type: NgModule, args: [{ declarations: NGB_TABSET_DIRECTIVES, exports: NGB_TABSET_DIRECTIVES, imports: [CommonModule] },] }\n    ];\n    return NgbTabsetModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbTime = /** @class */ (function () {\n    function NgbTime(hour, minute, second) {\n        this.hour = toInteger(hour);\n        this.minute = toInteger(minute);\n        this.second = toInteger(second);\n    }\n    /**\n     * @param {?=} step\n     * @return {?}\n     */\n    NgbTime.prototype.changeHour = /**\n     * @param {?=} step\n     * @return {?}\n     */\n    function (step) {\n        if (step === void 0) { step = 1; }\n        this.updateHour((isNaN(this.hour) ? 0 : this.hour) + step);\n    };\n    /**\n     * @param {?} hour\n     * @return {?}\n     */\n    NgbTime.prototype.updateHour = /**\n     * @param {?} hour\n     * @return {?}\n     */\n    function (hour) {\n        if (isNumber(hour)) {\n            this.hour = (hour < 0 ? 24 + hour : hour) % 24;\n        }\n        else {\n            this.hour = NaN;\n        }\n    };\n    /**\n     * @param {?=} step\n     * @return {?}\n     */\n    NgbTime.prototype.changeMinute = /**\n     * @param {?=} step\n     * @return {?}\n     */\n    function (step) {\n        if (step === void 0) { step = 1; }\n        this.updateMinute((isNaN(this.minute) ? 0 : this.minute) + step);\n    };\n    /**\n     * @param {?} minute\n     * @return {?}\n     */\n    NgbTime.prototype.updateMinute = /**\n     * @param {?} minute\n     * @return {?}\n     */\n    function (minute) {\n        if (isNumber(minute)) {\n            this.minute = minute % 60 < 0 ? 60 + minute % 60 : minute % 60;\n            this.changeHour(Math.floor(minute / 60));\n        }\n        else {\n            this.minute = NaN;\n        }\n    };\n    /**\n     * @param {?=} step\n     * @return {?}\n     */\n    NgbTime.prototype.changeSecond = /**\n     * @param {?=} step\n     * @return {?}\n     */\n    function (step) {\n        if (step === void 0) { step = 1; }\n        this.updateSecond((isNaN(this.second) ? 0 : this.second) + step);\n    };\n    /**\n     * @param {?} second\n     * @return {?}\n     */\n    NgbTime.prototype.updateSecond = /**\n     * @param {?} second\n     * @return {?}\n     */\n    function (second) {\n        if (isNumber(second)) {\n            this.second = second < 0 ? 60 + second % 60 : second % 60;\n            this.changeMinute(Math.floor(second / 60));\n        }\n        else {\n            this.second = NaN;\n        }\n    };\n    /**\n     * @param {?=} checkSecs\n     * @return {?}\n     */\n    NgbTime.prototype.isValid = /**\n     * @param {?=} checkSecs\n     * @return {?}\n     */\n    function (checkSecs) {\n        if (checkSecs === void 0) { checkSecs = true; }\n        return isNumber(this.hour) && isNumber(this.minute) && (checkSecs ? isNumber(this.second) : true);\n    };\n    /**\n     * @return {?}\n     */\n    NgbTime.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return (this.hour || 0) + \":\" + (this.minute || 0) + \":\" + (this.second || 0); };\n    return NgbTime;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Configuration service for the NgbTimepicker component.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the timepickers used in the application.\n */\nvar NgbTimepickerConfig = /** @class */ (function () {\n    function NgbTimepickerConfig() {\n        this.meridian = false;\n        this.spinners = true;\n        this.seconds = false;\n        this.hourStep = 1;\n        this.minuteStep = 1;\n        this.secondStep = 1;\n        this.disabled = false;\n        this.readonlyInputs = false;\n        this.size = 'medium';\n    }\n    NgbTimepickerConfig.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */ NgbTimepickerConfig.ngInjectableDef = defineInjectable({ factory: function NgbTimepickerConfig_Factory() { return new NgbTimepickerConfig(); }, token: NgbTimepickerConfig, providedIn: \"root\" });\n    return NgbTimepickerConfig;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction NGB_DATEPICKER_TIME_ADAPTER_FACTORY() {\n    return new NgbTimeStructAdapter();\n}\n/**\n * Abstract type serving as a DI token for the service converting from your application Time model to internal\n * NgbTimeStruct model.\n * A default implementation converting from and to NgbTimeStruct is provided for retro-compatibility,\n * but you can provide another implementation to use an alternative format, ie for using with native Date Object.\n *\n * \\@since 2.2.0\n * @abstract\n * @template T\n */\nvar NgbTimeAdapter = /** @class */ (function () {\n    function NgbTimeAdapter() {\n    }\n    NgbTimeAdapter.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root', useFactory: NGB_DATEPICKER_TIME_ADAPTER_FACTORY },] }\n    ];\n    /** @nocollapse */ NgbTimeAdapter.ngInjectableDef = defineInjectable({ factory: NGB_DATEPICKER_TIME_ADAPTER_FACTORY, token: NgbTimeAdapter, providedIn: \"root\" });\n    return NgbTimeAdapter;\n}());\nvar NgbTimeStructAdapter = /** @class */ (function (_super) {\n    __extends(NgbTimeStructAdapter, _super);\n    function NgbTimeStructAdapter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Converts a NgbTimeStruct value into NgbTimeStruct value\n     */\n    /**\n     * Converts a NgbTimeStruct value into NgbTimeStruct value\n     * @param {?} time\n     * @return {?}\n     */\n    NgbTimeStructAdapter.prototype.fromModel = /**\n     * Converts a NgbTimeStruct value into NgbTimeStruct value\n     * @param {?} time\n     * @return {?}\n     */\n    function (time) {\n        return (time && isInteger(time.hour) && isInteger(time.minute)) ?\n            { hour: time.hour, minute: time.minute, second: isInteger(time.second) ? time.second : null } :\n            null;\n    };\n    /**\n     * Converts a NgbTimeStruct value into NgbTimeStruct value\n     */\n    /**\n     * Converts a NgbTimeStruct value into NgbTimeStruct value\n     * @param {?} time\n     * @return {?}\n     */\n    NgbTimeStructAdapter.prototype.toModel = /**\n     * Converts a NgbTimeStruct value into NgbTimeStruct value\n     * @param {?} time\n     * @return {?}\n     */\n    function (time) {\n        return (time && isInteger(time.hour) && isInteger(time.minute)) ?\n            { hour: time.hour, minute: time.minute, second: isInteger(time.second) ? time.second : null } :\n            null;\n    };\n    NgbTimeStructAdapter.decorators = [\n        { type: Injectable }\n    ];\n    return NgbTimeStructAdapter;\n}(NgbTimeAdapter));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar NGB_TIMEPICKER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return NgbTimepicker; }),\n    multi: true\n};\n/**\n * A lightweight & configurable timepicker directive.\n */\nvar NgbTimepicker = /** @class */ (function () {\n    function NgbTimepicker(config, _ngbTimeAdapter) {\n        this._ngbTimeAdapter = _ngbTimeAdapter;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        this.meridian = config.meridian;\n        this.spinners = config.spinners;\n        this.seconds = config.seconds;\n        this.hourStep = config.hourStep;\n        this.minuteStep = config.minuteStep;\n        this.secondStep = config.secondStep;\n        this.disabled = config.disabled;\n        this.readonlyInputs = config.readonlyInputs;\n        this.size = config.size;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgbTimepicker.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        /** @type {?} */\n        var structValue = this._ngbTimeAdapter.fromModel(value);\n        this.model = structValue ? new NgbTime(structValue.hour, structValue.minute, structValue.second) : new NgbTime();\n        if (!this.seconds && (!structValue || !isNumber(structValue.second))) {\n            this.model.second = 0;\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NgbTimepicker.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onChange = fn; };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NgbTimepicker.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NgbTimepicker.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) { this.disabled = isDisabled; };\n    /**\n     * @param {?} step\n     * @return {?}\n     */\n    NgbTimepicker.prototype.changeHour = /**\n     * @param {?} step\n     * @return {?}\n     */\n    function (step) {\n        this.model.changeHour(step);\n        this.propagateModelChange();\n    };\n    /**\n     * @param {?} step\n     * @return {?}\n     */\n    NgbTimepicker.prototype.changeMinute = /**\n     * @param {?} step\n     * @return {?}\n     */\n    function (step) {\n        this.model.changeMinute(step);\n        this.propagateModelChange();\n    };\n    /**\n     * @param {?} step\n     * @return {?}\n     */\n    NgbTimepicker.prototype.changeSecond = /**\n     * @param {?} step\n     * @return {?}\n     */\n    function (step) {\n        this.model.changeSecond(step);\n        this.propagateModelChange();\n    };\n    /**\n     * @param {?} newVal\n     * @return {?}\n     */\n    NgbTimepicker.prototype.updateHour = /**\n     * @param {?} newVal\n     * @return {?}\n     */\n    function (newVal) {\n        /** @type {?} */\n        var isPM = this.model.hour >= 12;\n        /** @type {?} */\n        var enteredHour = toInteger(newVal);\n        if (this.meridian && (isPM && enteredHour < 12 || !isPM && enteredHour === 12)) {\n            this.model.updateHour(enteredHour + 12);\n        }\n        else {\n            this.model.updateHour(enteredHour);\n        }\n        this.propagateModelChange();\n    };\n    /**\n     * @param {?} newVal\n     * @return {?}\n     */\n    NgbTimepicker.prototype.updateMinute = /**\n     * @param {?} newVal\n     * @return {?}\n     */\n    function (newVal) {\n        this.model.updateMinute(toInteger(newVal));\n        this.propagateModelChange();\n    };\n    /**\n     * @param {?} newVal\n     * @return {?}\n     */\n    NgbTimepicker.prototype.updateSecond = /**\n     * @param {?} newVal\n     * @return {?}\n     */\n    function (newVal) {\n        this.model.updateSecond(toInteger(newVal));\n        this.propagateModelChange();\n    };\n    /**\n     * @return {?}\n     */\n    NgbTimepicker.prototype.toggleMeridian = /**\n     * @return {?}\n     */\n    function () {\n        if (this.meridian) {\n            this.changeHour(12);\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgbTimepicker.prototype.formatHour = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        if (isNumber(value)) {\n            if (this.meridian) {\n                return padNumber(value % 12 === 0 ? 12 : value % 12);\n            }\n            else {\n                return padNumber(value % 24);\n            }\n        }\n        else {\n            return padNumber(NaN);\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgbTimepicker.prototype.formatMinSec = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { return padNumber(value); };\n    Object.defineProperty(NgbTimepicker.prototype, \"isSmallSize\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.size === 'small'; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgbTimepicker.prototype, \"isLargeSize\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.size === 'large'; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgbTimepicker.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if (changes['seconds'] && !this.seconds && this.model && !isNumber(this.model.second)) {\n            this.model.second = 0;\n            this.propagateModelChange(false);\n        }\n    };\n    /**\n     * @param {?=} touched\n     * @return {?}\n     */\n    NgbTimepicker.prototype.propagateModelChange = /**\n     * @param {?=} touched\n     * @return {?}\n     */\n    function (touched) {\n        if (touched === void 0) { touched = true; }\n        if (touched) {\n            this.onTouched();\n        }\n        if (this.model.isValid(this.seconds)) {\n            this.onChange(this._ngbTimeAdapter.toModel({ hour: this.model.hour, minute: this.model.minute, second: this.model.second }));\n        }\n        else {\n            this.onChange(this._ngbTimeAdapter.toModel(null));\n        }\n    };\n    NgbTimepicker.decorators = [\n        { type: Component, args: [{\n                    selector: 'ngb-timepicker',\n                    template: \"\\n    <fieldset [disabled]=\\\"disabled\\\" [class.disabled]=\\\"disabled\\\">\\n      <div class=\\\"ngb-tp\\\">\\n        <div class=\\\"ngb-tp-input-container ngb-tp-hour\\\">\\n          <button *ngIf=\\\"spinners\\\" type=\\\"button\\\" (click)=\\\"changeHour(hourStep)\\\"\\n            class=\\\"btn btn-link\\\" [class.btn-sm]=\\\"isSmallSize\\\" [class.btn-lg]=\\\"isLargeSize\\\" [class.disabled]=\\\"disabled\\\"\\n            [disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron\\\"></span>\\n            <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.timepicker.increment-hours\\\">Increment hours</span>\\n          </button>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" [class.form-control-sm]=\\\"isSmallSize\\\" [class.form-control-lg]=\\\"isLargeSize\\\" maxlength=\\\"2\\\"\\n            placeholder=\\\"HH\\\" i18n-placeholder=\\\"@@ngb.timepicker.HH\\\"\\n            [value]=\\\"formatHour(model?.hour)\\\" (change)=\\\"updateHour($event.target.value)\\\"\\n            [readonly]=\\\"readonlyInputs\\\" [disabled]=\\\"disabled\\\" aria-label=\\\"Hours\\\" i18n-aria-label=\\\"@@ngb.timepicker.hours\\\">\\n          <button *ngIf=\\\"spinners\\\" type=\\\"button\\\" (click)=\\\"changeHour(-hourStep)\\\"\\n            class=\\\"btn btn-link\\\" [class.btn-sm]=\\\"isSmallSize\\\" [class.btn-lg]=\\\"isLargeSize\\\" [class.disabled]=\\\"disabled\\\"\\n            [disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron bottom\\\"></span>\\n            <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.timepicker.decrement-hours\\\">Decrement hours</span>\\n          </button>\\n        </div>\\n        <div class=\\\"ngb-tp-spacer\\\">:</div>\\n        <div class=\\\"ngb-tp-input-container ngb-tp-minute\\\">\\n          <button *ngIf=\\\"spinners\\\" type=\\\"button\\\" (click)=\\\"changeMinute(minuteStep)\\\"\\n            class=\\\"btn btn-link\\\" [class.btn-sm]=\\\"isSmallSize\\\" [class.btn-lg]=\\\"isLargeSize\\\" [class.disabled]=\\\"disabled\\\"\\n            [disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron\\\"></span>\\n            <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.timepicker.increment-minutes\\\">Increment minutes</span>\\n          </button>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" [class.form-control-sm]=\\\"isSmallSize\\\" [class.form-control-lg]=\\\"isLargeSize\\\" maxlength=\\\"2\\\"\\n            placeholder=\\\"MM\\\" i18n-placeholder=\\\"@@ngb.timepicker.MM\\\"\\n            [value]=\\\"formatMinSec(model?.minute)\\\" (change)=\\\"updateMinute($event.target.value)\\\"\\n            [readonly]=\\\"readonlyInputs\\\" [disabled]=\\\"disabled\\\" aria-label=\\\"Minutes\\\" i18n-aria-label=\\\"@@ngb.timepicker.minutes\\\">\\n          <button *ngIf=\\\"spinners\\\" type=\\\"button\\\" (click)=\\\"changeMinute(-minuteStep)\\\"\\n            class=\\\"btn btn-link\\\" [class.btn-sm]=\\\"isSmallSize\\\" [class.btn-lg]=\\\"isLargeSize\\\"  [class.disabled]=\\\"disabled\\\"\\n            [disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron bottom\\\"></span>\\n            <span class=\\\"sr-only\\\"  i18n=\\\"@@ngb.timepicker.decrement-minutes\\\">Decrement minutes</span>\\n          </button>\\n        </div>\\n        <div *ngIf=\\\"seconds\\\" class=\\\"ngb-tp-spacer\\\">:</div>\\n        <div *ngIf=\\\"seconds\\\" class=\\\"ngb-tp-input-container ngb-tp-second\\\">\\n          <button *ngIf=\\\"spinners\\\" type=\\\"button\\\" (click)=\\\"changeSecond(secondStep)\\\"\\n            class=\\\"btn btn-link\\\" [class.btn-sm]=\\\"isSmallSize\\\" [class.btn-lg]=\\\"isLargeSize\\\" [class.disabled]=\\\"disabled\\\"\\n            [disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron\\\"></span>\\n            <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.timepicker.increment-seconds\\\">Increment seconds</span>\\n          </button>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" [class.form-control-sm]=\\\"isSmallSize\\\" [class.form-control-lg]=\\\"isLargeSize\\\" maxlength=\\\"2\\\"\\n            placeholder=\\\"SS\\\" i18n-placeholder=\\\"@@ngb.timepicker.SS\\\"\\n            [value]=\\\"formatMinSec(model?.second)\\\" (change)=\\\"updateSecond($event.target.value)\\\"\\n            [readonly]=\\\"readonlyInputs\\\" [disabled]=\\\"disabled\\\" aria-label=\\\"Seconds\\\" i18n-aria-label=\\\"@@ngb.timepicker.seconds\\\">\\n          <button *ngIf=\\\"spinners\\\" type=\\\"button\\\" (click)=\\\"changeSecond(-secondStep)\\\"\\n            class=\\\"btn btn-link\\\" [class.btn-sm]=\\\"isSmallSize\\\" [class.btn-lg]=\\\"isLargeSize\\\"  [class.disabled]=\\\"disabled\\\"\\n            [disabled]=\\\"disabled\\\">\\n            <span class=\\\"chevron bottom\\\"></span>\\n            <span class=\\\"sr-only\\\" i18n=\\\"@@ngb.timepicker.decrement-seconds\\\">Decrement seconds</span>\\n          </button>\\n        </div>\\n        <div *ngIf=\\\"meridian\\\" class=\\\"ngb-tp-spacer\\\"></div>\\n        <div *ngIf=\\\"meridian\\\" class=\\\"ngb-tp-meridian\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\" [class.btn-sm]=\\\"isSmallSize\\\" [class.btn-lg]=\\\"isLargeSize\\\"\\n            [disabled]=\\\"disabled\\\" [class.disabled]=\\\"disabled\\\"\\n                  (click)=\\\"toggleMeridian()\\\">\\n            <ng-container *ngIf=\\\"model?.hour >= 12; else am\\\" i18n=\\\"@@ngb.timepicker.PM\\\">PM</ng-container>\\n            <ng-template #am i18n=\\\"@@ngb.timepicker.AM\\\">AM</ng-template>\\n          </button>\\n        </div>\\n      </div>\\n    </fieldset>\\n  \",\n                    providers: [NGB_TIMEPICKER_VALUE_ACCESSOR],\n                    styles: [\":host{font-size:1rem}.ngb-tp{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.ngb-tp-input-container{width:4em}.ngb-tp-hour,.ngb-tp-meridian,.ngb-tp-minute,.ngb-tp-second{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;-ms-flex-pack:distribute;justify-content:space-around}.ngb-tp-spacer{width:1em;text-align:center}.chevron::before{border-style:solid;border-width:.29em .29em 0 0;content:'';display:inline-block;height:.69em;left:.05em;position:relative;top:.15em;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);vertical-align:middle;width:.69em}.chevron.bottom:before{top:-.3em;-webkit-transform:rotate(135deg);transform:rotate(135deg)}input{text-align:center}\"]\n                }] }\n    ];\n    /** @nocollapse */\n    NgbTimepicker.ctorParameters = function () { return [\n        { type: NgbTimepickerConfig },\n        { type: NgbTimeAdapter }\n    ]; };\n    NgbTimepicker.propDecorators = {\n        meridian: [{ type: Input }],\n        spinners: [{ type: Input }],\n        seconds: [{ type: Input }],\n        hourStep: [{ type: Input }],\n        minuteStep: [{ type: Input }],\n        secondStep: [{ type: Input }],\n        readonlyInputs: [{ type: Input }],\n        size: [{ type: Input }]\n    };\n    return NgbTimepicker;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbTimepickerModule = /** @class */ (function () {\n    function NgbTimepickerModule() {\n    }\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     */\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    NgbTimepickerModule.forRoot = /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    function () { return { ngModule: NgbTimepickerModule }; };\n    NgbTimepickerModule.decorators = [\n        { type: NgModule, args: [{ declarations: [NgbTimepicker], exports: [NgbTimepicker], imports: [CommonModule] },] }\n    ];\n    return NgbTimepickerModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Configuration service for the NgbTooltip directive.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the tooltips used in the application.\n */\nvar NgbTooltipConfig = /** @class */ (function () {\n    function NgbTooltipConfig() {\n        this.autoClose = true;\n        this.placement = 'top';\n        this.triggers = 'hover';\n        this.disableTooltip = false;\n    }\n    NgbTooltipConfig.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */ NgbTooltipConfig.ngInjectableDef = defineInjectable({ factory: function NgbTooltipConfig_Factory() { return new NgbTooltipConfig(); }, token: NgbTooltipConfig, providedIn: \"root\" });\n    return NgbTooltipConfig;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar nextId$5 = 0;\nvar NgbTooltipWindow = /** @class */ (function () {\n    function NgbTooltipWindow(_element, _renderer) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this.placement = 'top';\n    }\n    /**\n     * @param {?} _placement\n     * @return {?}\n     */\n    NgbTooltipWindow.prototype.applyPlacement = /**\n     * @param {?} _placement\n     * @return {?}\n     */\n    function (_placement) {\n        // remove the current placement classes\n        this._renderer.removeClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString().split('-')[0]);\n        this._renderer.removeClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString());\n        // set the new placement classes\n        this.placement = _placement;\n        // apply the new placement\n        this._renderer.addClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString().split('-')[0]);\n        this._renderer.addClass(this._element.nativeElement, 'bs-tooltip-' + this.placement.toString());\n    };\n    /**\n     * Tells whether the event has been triggered from this component's subtree or not.\n     *\n     * @param event the event to check\n     *\n     * @return whether the event has been triggered from this component's subtree or not.\n     */\n    /**\n     * Tells whether the event has been triggered from this component's subtree or not.\n     *\n     * @param {?} event the event to check\n     *\n     * @return {?} whether the event has been triggered from this component's subtree or not.\n     */\n    NgbTooltipWindow.prototype.isEventFrom = /**\n     * Tells whether the event has been triggered from this component's subtree or not.\n     *\n     * @param {?} event the event to check\n     *\n     * @return {?} whether the event has been triggered from this component's subtree or not.\n     */\n    function (event) { return this._element.nativeElement.contains((/** @type {?} */ (event.target))); };\n    NgbTooltipWindow.decorators = [\n        { type: Component, args: [{\n                    selector: 'ngb-tooltip-window',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    host: {\n                        '[class]': '\"tooltip show bs-tooltip-\" + placement.split(\"-\")[0]+\" bs-tooltip-\" + placement + (tooltipClass ? \" \" + tooltipClass : \"\")',\n                        'role': 'tooltip',\n                        '[id]': 'id'\n                    },\n                    template: \"<div class=\\\"arrow\\\"></div><div class=\\\"tooltip-inner\\\"><ng-content></ng-content></div>\",\n                    styles: [\"ngb-tooltip-window.bs-tooltip-bottom .arrow,ngb-tooltip-window.bs-tooltip-top .arrow{left:calc(50% - .4rem)}ngb-tooltip-window.bs-tooltip-bottom-left .arrow,ngb-tooltip-window.bs-tooltip-top-left .arrow{left:1em}ngb-tooltip-window.bs-tooltip-bottom-right .arrow,ngb-tooltip-window.bs-tooltip-top-right .arrow{left:auto;right:.8rem}ngb-tooltip-window.bs-tooltip-left .arrow,ngb-tooltip-window.bs-tooltip-right .arrow{top:calc(50% - .4rem)}ngb-tooltip-window.bs-tooltip-left-top .arrow,ngb-tooltip-window.bs-tooltip-right-top .arrow{top:.4rem}ngb-tooltip-window.bs-tooltip-left-bottom .arrow,ngb-tooltip-window.bs-tooltip-right-bottom .arrow{top:auto;bottom:.4rem}\"]\n                }] }\n    ];\n    /** @nocollapse */\n    NgbTooltipWindow.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Renderer2 }\n    ]; };\n    NgbTooltipWindow.propDecorators = {\n        placement: [{ type: Input }],\n        id: [{ type: Input }],\n        tooltipClass: [{ type: Input }]\n    };\n    return NgbTooltipWindow;\n}());\n/**\n * A lightweight, extensible directive for fancy tooltip creation.\n */\nvar NgbTooltip = /** @class */ (function () {\n    function NgbTooltip(_elementRef, _renderer, injector, componentFactoryResolver, viewContainerRef, config, _ngZone, _document) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        /**\n         * Emits an event when the tooltip is shown\n         */\n        this.shown = new EventEmitter();\n        /**\n         * Emits an event when the tooltip is hidden\n         */\n        this.hidden = new EventEmitter();\n        this._ngbTooltipWindowId = \"ngb-tooltip-\" + nextId$5++;\n        this.autoClose = config.autoClose;\n        this.placement = config.placement;\n        this.triggers = config.triggers;\n        this.container = config.container;\n        this.disableTooltip = config.disableTooltip;\n        this.tooltipClass = config.tooltipClass;\n        this._popupService = new PopupService(NgbTooltipWindow, injector, viewContainerRef, _renderer, componentFactoryResolver);\n        this._zoneSubscription = _ngZone.onStable.subscribe(function () {\n            if (_this._windowRef) {\n                _this._windowRef.instance.applyPlacement(positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, _this.placement, _this.container === 'body'));\n            }\n        });\n    }\n    Object.defineProperty(NgbTooltip.prototype, \"ngbTooltip\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._ngbTooltip; },\n        /**\n         * Content to be displayed as tooltip. If falsy, the tooltip won't open.\n         */\n        set: /**\n         * Content to be displayed as tooltip. If falsy, the tooltip won't open.\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._ngbTooltip = value;\n            if (!value && this._windowRef) {\n                this.close();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Opens an element’s tooltip. This is considered a “manual” triggering of the tooltip.\n     * The context is an optional value to be injected into the tooltip template when it is created.\n     */\n    /**\n     * Opens an element’s tooltip. This is considered a “manual” triggering of the tooltip.\n     * The context is an optional value to be injected into the tooltip template when it is created.\n     * @param {?=} context\n     * @return {?}\n     */\n    NgbTooltip.prototype.open = /**\n     * Opens an element’s tooltip. This is considered a “manual” triggering of the tooltip.\n     * The context is an optional value to be injected into the tooltip template when it is created.\n     * @param {?=} context\n     * @return {?}\n     */\n    function (context) {\n        var _this = this;\n        if (!this._windowRef && this._ngbTooltip && !this.disableTooltip) {\n            this._windowRef = this._popupService.open(this._ngbTooltip, context);\n            this._windowRef.instance.tooltipClass = this.tooltipClass;\n            this._windowRef.instance.id = this._ngbTooltipWindowId;\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', this._ngbTooltipWindowId);\n            if (this.container === 'body') {\n                this._document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\n            }\n            this._windowRef.instance.placement = Array.isArray(this.placement) ? this.placement[0] : this.placement;\n            // apply styling to set basic css-classes on target element, before going for positioning\n            this._windowRef.changeDetectorRef.detectChanges();\n            this._windowRef.changeDetectorRef.markForCheck();\n            // position tooltip along the element\n            this._windowRef.instance.applyPlacement(positionElements(this._elementRef.nativeElement, this._windowRef.location.nativeElement, this.placement, this.container === 'body'));\n            if (this.autoClose) {\n                this._ngZone.runOutsideAngular(function () {\n                    // prevents automatic closing right after an opening by putting a guard for the time of one event handling\n                    // pass\n                    // use case: click event would reach an element opening the tooltip first, then reach the autoClose handler\n                    // which would close it\n                    /** @type {?} */\n                    var justOpened = true;\n                    requestAnimationFrame(function () { return justOpened = false; });\n                    /** @type {?} */\n                    var escapes$ = fromEvent(_this._document, 'keyup')\n                        .pipe(takeUntil(_this.hidden), \n                    // tslint:disable-next-line:deprecation\n                    filter(function (event) { return event.which === Key.Escape; }));\n                    /** @type {?} */\n                    var clicks$ = fromEvent(_this._document, 'click')\n                        .pipe(takeUntil(_this.hidden), filter(function () { return !justOpened; }), filter(function (event) { return _this._shouldCloseFromClick(event); }));\n                    race([escapes$, clicks$]).subscribe(function () { return _this._ngZone.run(function () { return _this.close(); }); });\n                });\n            }\n            this.shown.emit();\n        }\n    };\n    /**\n     * Closes an element’s tooltip. This is considered a “manual” triggering of the tooltip.\n     */\n    /**\n     * Closes an element’s tooltip. This is considered a “manual” triggering of the tooltip.\n     * @return {?}\n     */\n    NgbTooltip.prototype.close = /**\n     * Closes an element’s tooltip. This is considered a “manual” triggering of the tooltip.\n     * @return {?}\n     */\n    function () {\n        if (this._windowRef != null) {\n            this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\n            this._popupService.close();\n            this._windowRef = null;\n            this.hidden.emit();\n        }\n    };\n    /**\n     * Toggles an element’s tooltip. This is considered a “manual” triggering of the tooltip.\n     */\n    /**\n     * Toggles an element’s tooltip. This is considered a “manual” triggering of the tooltip.\n     * @return {?}\n     */\n    NgbTooltip.prototype.toggle = /**\n     * Toggles an element’s tooltip. This is considered a “manual” triggering of the tooltip.\n     * @return {?}\n     */\n    function () {\n        if (this._windowRef) {\n            this.close();\n        }\n        else {\n            this.open();\n        }\n    };\n    /**\n     * Returns whether or not the tooltip is currently being shown\n     */\n    /**\n     * Returns whether or not the tooltip is currently being shown\n     * @return {?}\n     */\n    NgbTooltip.prototype.isOpen = /**\n     * Returns whether or not the tooltip is currently being shown\n     * @return {?}\n     */\n    function () { return this._windowRef != null; };\n    /**\n     * @return {?}\n     */\n    NgbTooltip.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._unregisterListenersFn = listenToTriggers(this._renderer, this._elementRef.nativeElement, this.triggers, this.open.bind(this), this.close.bind(this), this.toggle.bind(this));\n    };\n    /**\n     * @return {?}\n     */\n    NgbTooltip.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.close();\n        // This check is needed as it might happen that ngOnDestroy is called before ngOnInit\n        // under certain conditions, see: https://github.com/ng-bootstrap/ng-bootstrap/issues/2199\n        if (this._unregisterListenersFn) {\n            this._unregisterListenersFn();\n        }\n        this._zoneSubscription.unsubscribe();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgbTooltip.prototype._shouldCloseFromClick = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        if (event.button !== 2) {\n            if (this.autoClose === true) {\n                return true;\n            }\n            else if (this.autoClose === 'inside' && this._isEventFromTooltip(event)) {\n                return true;\n            }\n            else if (this.autoClose === 'outside' && !this._isEventFromTooltip(event)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgbTooltip.prototype._isEventFromTooltip = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        /** @type {?} */\n        var popup = this._windowRef.instance;\n        return popup ? popup.isEventFrom(event) : false;\n    };\n    NgbTooltip.decorators = [\n        { type: Directive, args: [{ selector: '[ngbTooltip]', exportAs: 'ngbTooltip' },] }\n    ];\n    /** @nocollapse */\n    NgbTooltip.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Renderer2 },\n        { type: Injector },\n        { type: ComponentFactoryResolver },\n        { type: ViewContainerRef },\n        { type: NgbTooltipConfig },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    NgbTooltip.propDecorators = {\n        autoClose: [{ type: Input }],\n        placement: [{ type: Input }],\n        triggers: [{ type: Input }],\n        container: [{ type: Input }],\n        disableTooltip: [{ type: Input }],\n        tooltipClass: [{ type: Input }],\n        shown: [{ type: Output }],\n        hidden: [{ type: Output }],\n        ngbTooltip: [{ type: Input }]\n    };\n    return NgbTooltip;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbTooltipModule = /** @class */ (function () {\n    function NgbTooltipModule() {\n    }\n    /**\n     * No need in forRoot anymore with tree-shakeable services\n     *\n     * @deprecated 3.0.0\n     */\n    /**\n     * No need in forRoot anymore with tree-shakeable services\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    NgbTooltipModule.forRoot = /**\n     * No need in forRoot anymore with tree-shakeable services\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    function () { return { ngModule: NgbTooltipModule }; };\n    NgbTooltipModule.decorators = [\n        { type: NgModule, args: [{ declarations: [NgbTooltip, NgbTooltipWindow], exports: [NgbTooltip], entryComponents: [NgbTooltipWindow] },] }\n    ];\n    return NgbTooltipModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A component that can be used inside a custom result template in order to highlight the term inside the text of the\n * result\n */\nvar NgbHighlight = /** @class */ (function () {\n    function NgbHighlight() {\n        /**\n         * The CSS class of the span elements wrapping the term inside the result\n         */\n        this.highlightClass = 'ngb-highlight';\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgbHighlight.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        /** @type {?} */\n        var resultStr = toString(this.result);\n        /** @type {?} */\n        var resultLC = resultStr.toLowerCase();\n        /** @type {?} */\n        var termLC = toString(this.term).toLowerCase();\n        /** @type {?} */\n        var currentIdx = 0;\n        if (termLC.length > 0) {\n            this.parts = resultLC.split(new RegExp(\"(\" + regExpEscape(termLC) + \")\")).map(function (part) {\n                /** @type {?} */\n                var originalPart = resultStr.substr(currentIdx, part.length);\n                currentIdx += part.length;\n                return originalPart;\n            });\n        }\n        else {\n            this.parts = [resultStr];\n        }\n    };\n    NgbHighlight.decorators = [\n        { type: Component, args: [{\n                    selector: 'ngb-highlight',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    template: \"<ng-template ngFor [ngForOf]=\\\"parts\\\" let-part let-isOdd=\\\"odd\\\">\" +\n                        \"<span *ngIf=\\\"isOdd; else even\\\" [class]=\\\"highlightClass\\\">{{part}}</span><ng-template #even>{{part}}</ng-template>\" +\n                        \"</ng-template>\",\n                    styles: [\".ngb-highlight{font-weight:700}\"]\n                }] }\n    ];\n    NgbHighlight.propDecorators = {\n        highlightClass: [{ type: Input }],\n        result: [{ type: Input }],\n        term: [{ type: Input }]\n    };\n    return NgbHighlight;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbTypeaheadWindow = /** @class */ (function () {\n    function NgbTypeaheadWindow() {\n        this.activeIdx = 0;\n        /**\n         * Flag indicating if the first row should be active initially\n         */\n        this.focusFirst = true;\n        /**\n         * A function used to format a given result before display. This function should return a formatted string without any\n         * HTML markup\n         */\n        this.formatter = toString;\n        /**\n         * Event raised when user selects a particular result row\n         */\n        this.selectEvent = new EventEmitter();\n        this.activeChangeEvent = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    NgbTypeaheadWindow.prototype.hasActive = /**\n     * @return {?}\n     */\n    function () { return this.activeIdx > -1 && this.activeIdx < this.results.length; };\n    /**\n     * @return {?}\n     */\n    NgbTypeaheadWindow.prototype.getActive = /**\n     * @return {?}\n     */\n    function () { return this.results[this.activeIdx]; };\n    /**\n     * @param {?} activeIdx\n     * @return {?}\n     */\n    NgbTypeaheadWindow.prototype.markActive = /**\n     * @param {?} activeIdx\n     * @return {?}\n     */\n    function (activeIdx) {\n        this.activeIdx = activeIdx;\n        this._activeChanged();\n    };\n    /**\n     * @return {?}\n     */\n    NgbTypeaheadWindow.prototype.next = /**\n     * @return {?}\n     */\n    function () {\n        if (this.activeIdx === this.results.length - 1) {\n            this.activeIdx = this.focusFirst ? (this.activeIdx + 1) % this.results.length : -1;\n        }\n        else {\n            this.activeIdx++;\n        }\n        this._activeChanged();\n    };\n    /**\n     * @return {?}\n     */\n    NgbTypeaheadWindow.prototype.prev = /**\n     * @return {?}\n     */\n    function () {\n        if (this.activeIdx < 0) {\n            this.activeIdx = this.results.length - 1;\n        }\n        else if (this.activeIdx === 0) {\n            this.activeIdx = this.focusFirst ? this.results.length - 1 : -1;\n        }\n        else {\n            this.activeIdx--;\n        }\n        this._activeChanged();\n    };\n    /**\n     * @return {?}\n     */\n    NgbTypeaheadWindow.prototype.resetActive = /**\n     * @return {?}\n     */\n    function () {\n        this.activeIdx = this.focusFirst ? 0 : -1;\n        this._activeChanged();\n    };\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    NgbTypeaheadWindow.prototype.select = /**\n     * @param {?} item\n     * @return {?}\n     */\n    function (item) { this.selectEvent.emit(item); };\n    /**\n     * @return {?}\n     */\n    NgbTypeaheadWindow.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () { this.resetActive(); };\n    /**\n     * @return {?}\n     */\n    NgbTypeaheadWindow.prototype._activeChanged = /**\n     * @return {?}\n     */\n    function () {\n        this.activeChangeEvent.emit(this.activeIdx >= 0 ? this.id + '-' + this.activeIdx : undefined);\n    };\n    NgbTypeaheadWindow.decorators = [\n        { type: Component, args: [{\n                    selector: 'ngb-typeahead-window',\n                    exportAs: 'ngbTypeaheadWindow',\n                    host: { 'class': 'dropdown-menu show', 'role': 'listbox', '[id]': 'id' },\n                    template: \"\\n    <ng-template #rt let-result=\\\"result\\\" let-term=\\\"term\\\" let-formatter=\\\"formatter\\\">\\n      <ngb-highlight [result]=\\\"formatter(result)\\\" [term]=\\\"term\\\"></ngb-highlight>\\n    </ng-template>\\n    <ng-template ngFor [ngForOf]=\\\"results\\\" let-result let-idx=\\\"index\\\">\\n      <button type=\\\"button\\\" class=\\\"dropdown-item\\\" role=\\\"option\\\"\\n        [id]=\\\"id + '-' + idx\\\"\\n        [class.active]=\\\"idx === activeIdx\\\"\\n        (mouseenter)=\\\"markActive(idx)\\\"\\n        (click)=\\\"select(result)\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"resultTemplate || rt\\\"\\n          [ngTemplateOutletContext]=\\\"{result: result, term: term, formatter: formatter}\\\"></ng-template>\\n      </button>\\n    </ng-template>\\n  \"\n                }] }\n    ];\n    NgbTypeaheadWindow.propDecorators = {\n        id: [{ type: Input }],\n        focusFirst: [{ type: Input }],\n        results: [{ type: Input }],\n        term: [{ type: Input }],\n        formatter: [{ type: Input }],\n        resultTemplate: [{ type: Input }],\n        selectEvent: [{ type: Output, args: ['select',] }],\n        activeChangeEvent: [{ type: Output, args: ['activeChange',] }]\n    };\n    return NgbTypeaheadWindow;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar ARIA_LIVE_DELAY = new InjectionToken('live announcer delay', { providedIn: 'root', factory: ARIA_LIVE_DELAY_FACTORY });\n/**\n * @return {?}\n */\nfunction ARIA_LIVE_DELAY_FACTORY() {\n    return 100;\n}\n/**\n * @param {?} document\n * @param {?=} lazyCreate\n * @return {?}\n */\nfunction getLiveElement(document, lazyCreate) {\n    if (lazyCreate === void 0) { lazyCreate = false; }\n    /** @type {?} */\n    var element = (/** @type {?} */ (document.body.querySelector('#ngb-live')));\n    if (element == null && lazyCreate) {\n        element = document.createElement('div');\n        element.setAttribute('id', 'ngb-live');\n        element.setAttribute('aria-live', 'polite');\n        element.setAttribute('aria-atomic', 'true');\n        element.classList.add('sr-only');\n        document.body.appendChild(element);\n    }\n    return element;\n}\nvar Live = /** @class */ (function () {\n    function Live(_document, _delay) {\n        this._document = _document;\n        this._delay = _delay;\n    }\n    /**\n     * @return {?}\n     */\n    Live.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var element = getLiveElement(this._document);\n        if (element) {\n            element.parentElement.removeChild(element);\n        }\n    };\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Live.prototype.say = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) {\n        /** @type {?} */\n        var element = getLiveElement(this._document, true);\n        /** @type {?} */\n        var delay = this._delay;\n        element.textContent = '';\n        /** @type {?} */\n        var setText = function () { return element.textContent = message; };\n        if (delay === null) {\n            setText();\n        }\n        else {\n            setTimeout(setText, delay);\n        }\n    };\n    Live.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */\n    Live.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: undefined, decorators: [{ type: Inject, args: [ARIA_LIVE_DELAY,] }] }\n    ]; };\n    /** @nocollapse */ Live.ngInjectableDef = defineInjectable({ factory: function Live_Factory() { return new Live(inject(DOCUMENT), inject(ARIA_LIVE_DELAY)); }, token: Live, providedIn: \"root\" });\n    return Live;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Configuration service for the NgbTypeahead component.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the typeaheads used in the application.\n */\nvar NgbTypeaheadConfig = /** @class */ (function () {\n    function NgbTypeaheadConfig() {\n        this.editable = true;\n        this.focusFirst = true;\n        this.showHint = false;\n        this.placement = 'bottom-left';\n    }\n    NgbTypeaheadConfig.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */ NgbTypeaheadConfig.ngInjectableDef = defineInjectable({ factory: function NgbTypeaheadConfig_Factory() { return new NgbTypeaheadConfig(); }, token: NgbTypeaheadConfig, providedIn: \"root\" });\n    return NgbTypeaheadConfig;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar NGB_TYPEAHEAD_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return NgbTypeahead; }),\n    multi: true\n};\n/** @type {?} */\nvar nextWindowId = 0;\n/**\n * NgbTypeahead directive provides a simple way of creating powerful typeaheads from any text input\n */\nvar NgbTypeahead = /** @class */ (function () {\n    function NgbTypeahead(_elementRef, _viewContainerRef, _renderer, _injector, componentFactoryResolver, config, ngZone, _live) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._viewContainerRef = _viewContainerRef;\n        this._renderer = _renderer;\n        this._injector = _injector;\n        this._live = _live;\n        /**\n         * Value for the configurable autocomplete attribute.\n         * Defaults to 'off' to disable the native browser autocomplete, but this standard value does not seem\n         * to be always correctly taken into account.\n         *\n         * \\@since 2.1.0\n         */\n        this.autocomplete = 'off';\n        /**\n         * Placement of a typeahead accepts:\n         *    \"top\", \"top-left\", \"top-right\", \"bottom\", \"bottom-left\", \"bottom-right\",\n         *    \"left\", \"left-top\", \"left-bottom\", \"right\", \"right-top\", \"right-bottom\"\n         * and array of above values.\n         */\n        this.placement = 'bottom-left';\n        /**\n         * An event emitted when a match is selected. Event payload is of type NgbTypeaheadSelectItemEvent.\n         */\n        this.selectItem = new EventEmitter();\n        this.popupId = \"ngb-typeahead-\" + nextWindowId++;\n        this._onTouched = function () { };\n        this._onChange = function (_) { };\n        this.container = config.container;\n        this.editable = config.editable;\n        this.focusFirst = config.focusFirst;\n        this.showHint = config.showHint;\n        this.placement = config.placement;\n        this._valueChanges = fromEvent(_elementRef.nativeElement, 'input')\n            .pipe(map(function ($event) { return ((/** @type {?} */ ($event.target))).value; }));\n        this._resubscribeTypeahead = new BehaviorSubject(null);\n        this._popupService = new PopupService(NgbTypeaheadWindow, _injector, _viewContainerRef, _renderer, componentFactoryResolver);\n        this._zoneSubscription = ngZone.onStable.subscribe(function () {\n            if (_this.isPopupOpen()) {\n                positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, _this.placement, _this.container === 'body');\n            }\n        });\n    }\n    /**\n     * @return {?}\n     */\n    NgbTypeahead.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var inputValues$ = this._valueChanges.pipe(tap(function (value) {\n            _this._inputValueBackup = value;\n            if (_this.editable) {\n                _this._onChange(value);\n            }\n        }));\n        /** @type {?} */\n        var results$ = inputValues$.pipe(this.ngbTypeahead);\n        /** @type {?} */\n        var processedResults$ = results$.pipe(tap(function () {\n            if (!_this.editable) {\n                _this._onChange(undefined);\n            }\n        }));\n        /** @type {?} */\n        var userInput$ = this._resubscribeTypeahead.pipe(switchMap(function () { return processedResults$; }));\n        this._subscription = this._subscribeToUserInput(userInput$);\n    };\n    /**\n     * @return {?}\n     */\n    NgbTypeahead.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._closePopup();\n        this._unsubscribeFromUserInput();\n        this._zoneSubscription.unsubscribe();\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NgbTypeahead.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange = fn; };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NgbTypeahead.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onTouched = fn; };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgbTypeahead.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { this._writeInputValue(this._formatItemForInput(value)); };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NgbTypeahead.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgbTypeahead.prototype.onDocumentClick = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        if (event.target !== this._elementRef.nativeElement) {\n            this.dismissPopup();\n        }\n    };\n    /**\n     * Dismisses typeahead popup window\n     */\n    /**\n     * Dismisses typeahead popup window\n     * @return {?}\n     */\n    NgbTypeahead.prototype.dismissPopup = /**\n     * Dismisses typeahead popup window\n     * @return {?}\n     */\n    function () {\n        if (this.isPopupOpen()) {\n            this._closePopup();\n            this._writeInputValue(this._inputValueBackup);\n        }\n    };\n    /**\n     * Returns true if the typeahead popup window is displayed\n     */\n    /**\n     * Returns true if the typeahead popup window is displayed\n     * @return {?}\n     */\n    NgbTypeahead.prototype.isPopupOpen = /**\n     * Returns true if the typeahead popup window is displayed\n     * @return {?}\n     */\n    function () { return this._windowRef != null; };\n    /**\n     * @return {?}\n     */\n    NgbTypeahead.prototype.handleBlur = /**\n     * @return {?}\n     */\n    function () {\n        this._resubscribeTypeahead.next(null);\n        this._onTouched();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    NgbTypeahead.prototype.handleKeyDown = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        if (!this.isPopupOpen()) {\n            return;\n        }\n        // tslint:disable-next-line:deprecation\n        var which = event.which;\n        if (Key[toString(which)]) {\n            switch (which) {\n                case Key.ArrowDown:\n                    event.preventDefault();\n                    this._windowRef.instance.next();\n                    this._showHint();\n                    break;\n                case Key.ArrowUp:\n                    event.preventDefault();\n                    this._windowRef.instance.prev();\n                    this._showHint();\n                    break;\n                case Key.Enter:\n                case Key.Tab:\n                    /** @type {?} */\n                    var result = this._windowRef.instance.getActive();\n                    if (isDefined(result)) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                        this._selectResult(result);\n                    }\n                    this._closePopup();\n                    break;\n                case Key.Escape:\n                    event.preventDefault();\n                    this._resubscribeTypeahead.next(null);\n                    this.dismissPopup();\n                    break;\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgbTypeahead.prototype._openPopup = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this.isPopupOpen()) {\n            this._inputValueBackup = this._elementRef.nativeElement.value;\n            this._windowRef = this._popupService.open();\n            this._windowRef.instance.id = this.popupId;\n            this._windowRef.instance.selectEvent.subscribe(function (result) { return _this._selectResultClosePopup(result); });\n            this._windowRef.instance.activeChangeEvent.subscribe(function (activeId) { return _this.activeDescendant = activeId; });\n            if (this.container === 'body') {\n                window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgbTypeahead.prototype._closePopup = /**\n     * @return {?}\n     */\n    function () {\n        this._popupService.close();\n        this._windowRef = null;\n        this.activeDescendant = undefined;\n    };\n    /**\n     * @param {?} result\n     * @return {?}\n     */\n    NgbTypeahead.prototype._selectResult = /**\n     * @param {?} result\n     * @return {?}\n     */\n    function (result) {\n        /** @type {?} */\n        var defaultPrevented = false;\n        this.selectItem.emit({ item: result, preventDefault: function () { defaultPrevented = true; } });\n        this._resubscribeTypeahead.next(null);\n        if (!defaultPrevented) {\n            this.writeValue(result);\n            this._onChange(result);\n        }\n    };\n    /**\n     * @param {?} result\n     * @return {?}\n     */\n    NgbTypeahead.prototype._selectResultClosePopup = /**\n     * @param {?} result\n     * @return {?}\n     */\n    function (result) {\n        this._selectResult(result);\n        this._closePopup();\n        this._elementRef.nativeElement.focus();\n    };\n    /**\n     * @return {?}\n     */\n    NgbTypeahead.prototype._showHint = /**\n     * @return {?}\n     */\n    function () {\n        if (this.showHint && this._windowRef.instance.hasActive() && this._inputValueBackup != null) {\n            /** @type {?} */\n            var userInputLowerCase = this._inputValueBackup.toLowerCase();\n            /** @type {?} */\n            var formattedVal = this._formatItemForInput(this._windowRef.instance.getActive());\n            if (userInputLowerCase === formattedVal.substr(0, this._inputValueBackup.length).toLowerCase()) {\n                this._writeInputValue(this._inputValueBackup + formattedVal.substr(this._inputValueBackup.length));\n                this._elementRef.nativeElement['setSelectionRange'].apply(this._elementRef.nativeElement, [this._inputValueBackup.length, formattedVal.length]);\n            }\n            else {\n                this.writeValue(this._windowRef.instance.getActive());\n            }\n        }\n    };\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    NgbTypeahead.prototype._formatItemForInput = /**\n     * @param {?} item\n     * @return {?}\n     */\n    function (item) {\n        return item != null && this.inputFormatter ? this.inputFormatter(item) : toString(item);\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgbTypeahead.prototype._writeInputValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', toString(value));\n    };\n    /**\n     * @param {?} userInput$\n     * @return {?}\n     */\n    NgbTypeahead.prototype._subscribeToUserInput = /**\n     * @param {?} userInput$\n     * @return {?}\n     */\n    function (userInput$) {\n        var _this = this;\n        return userInput$.subscribe(function (results) {\n            if (!results || results.length === 0) {\n                _this._closePopup();\n            }\n            else {\n                _this._openPopup();\n                _this._windowRef.instance.focusFirst = _this.focusFirst;\n                _this._windowRef.instance.results = results;\n                _this._windowRef.instance.term = _this._elementRef.nativeElement.value;\n                if (_this.resultFormatter) {\n                    _this._windowRef.instance.formatter = _this.resultFormatter;\n                }\n                if (_this.resultTemplate) {\n                    _this._windowRef.instance.resultTemplate = _this.resultTemplate;\n                }\n                _this._windowRef.instance.resetActive();\n                // The observable stream we are subscribing to might have async steps\n                // and if a component containing typeahead is using the OnPush strategy\n                // the change detection turn wouldn't be invoked automatically.\n                _this._windowRef.changeDetectorRef.detectChanges();\n                _this._showHint();\n            }\n            // live announcer\n            /** @type {?} */\n            var count = results ? results.length : 0;\n            _this._live.say(count === 0 ? 'No results available' : count + \" result\" + (count === 1 ? '' : 's') + \" available\");\n        });\n    };\n    /**\n     * @return {?}\n     */\n    NgbTypeahead.prototype._unsubscribeFromUserInput = /**\n     * @return {?}\n     */\n    function () {\n        if (this._subscription) {\n            this._subscription.unsubscribe();\n        }\n        this._subscription = null;\n    };\n    NgbTypeahead.decorators = [\n        { type: Directive, args: [{\n                    selector: 'input[ngbTypeahead]',\n                    exportAs: 'ngbTypeahead',\n                    host: {\n                        '(blur)': 'handleBlur()',\n                        '[class.open]': 'isPopupOpen()',\n                        '(document:click)': 'onDocumentClick($event)',\n                        '(keydown)': 'handleKeyDown($event)',\n                        '[autocomplete]': 'autocomplete',\n                        'autocapitalize': 'off',\n                        'autocorrect': 'off',\n                        'role': 'combobox',\n                        'aria-multiline': 'false',\n                        '[attr.aria-autocomplete]': 'showHint ? \"both\" : \"list\"',\n                        '[attr.aria-activedescendant]': 'activeDescendant',\n                        '[attr.aria-owns]': 'isPopupOpen() ? popupId : null',\n                        '[attr.aria-expanded]': 'isPopupOpen()'\n                    },\n                    providers: [NGB_TYPEAHEAD_VALUE_ACCESSOR]\n                },] }\n    ];\n    /** @nocollapse */\n    NgbTypeahead.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: ViewContainerRef },\n        { type: Renderer2 },\n        { type: Injector },\n        { type: ComponentFactoryResolver },\n        { type: NgbTypeaheadConfig },\n        { type: NgZone },\n        { type: Live }\n    ]; };\n    NgbTypeahead.propDecorators = {\n        autocomplete: [{ type: Input }],\n        container: [{ type: Input }],\n        editable: [{ type: Input }],\n        focusFirst: [{ type: Input }],\n        inputFormatter: [{ type: Input }],\n        ngbTypeahead: [{ type: Input }],\n        resultFormatter: [{ type: Input }],\n        resultTemplate: [{ type: Input }],\n        showHint: [{ type: Input }],\n        placement: [{ type: Input }],\n        selectItem: [{ type: Output }]\n    };\n    return NgbTypeahead;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgbTypeaheadModule = /** @class */ (function () {\n    function NgbTypeaheadModule() {\n    }\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     */\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    NgbTypeaheadModule.forRoot = /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    function () { return { ngModule: NgbTypeaheadModule }; };\n    NgbTypeaheadModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [NgbTypeahead, NgbHighlight, NgbTypeaheadWindow],\n                    exports: [NgbTypeahead, NgbHighlight],\n                    imports: [CommonModule],\n                    entryComponents: [NgbTypeaheadWindow]\n                },] }\n    ];\n    return NgbTypeaheadModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar NGB_MODULES = [\n    NgbAccordionModule, NgbAlertModule, NgbButtonsModule, NgbCarouselModule, NgbCollapseModule, NgbDatepickerModule,\n    NgbDropdownModule, NgbModalModule, NgbPaginationModule, NgbPopoverModule, NgbProgressbarModule, NgbRatingModule,\n    NgbTabsetModule, NgbTimepickerModule, NgbTooltipModule, NgbTypeaheadModule\n];\nvar NgbModule = /** @class */ (function () {\n    function NgbModule() {\n    }\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     */\n    /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    NgbModule.forRoot = /**\n     * Importing with '.forRoot()' is no longer necessary, you can simply import the module.\n     * Will be removed in 4.0.0.\n     *\n     * @deprecated 3.0.0\n     * @return {?}\n     */\n    function () { return { ngModule: NgbModule }; };\n    NgbModule.decorators = [\n        { type: NgModule, args: [{ imports: NGB_MODULES, exports: NGB_MODULES },] }\n    ];\n    return NgbModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { NgbAccordionModule, NgbAccordionConfig, NgbAccordion, NgbPanel, NgbPanelTitle, NgbPanelContent, NgbAlertModule, NgbAlertConfig, NgbAlert, NgbButtonsModule, NgbCheckBox, NgbRadioGroup, NgbCarouselModule, NgbCarouselConfig, NgbCarousel, NgbSlide, NgbCollapseModule, NgbCollapse, NgbCalendar, NgbCalendarIslamicCivil, NgbCalendarIslamicUmalqura, NgbCalendarHebrew, NgbCalendarPersian, NgbDatepickerModule, NgbDatepickerI18n, NgbDatepickerI18nHebrew, NgbDatepickerConfig, NgbDate, NgbDateParserFormatter, NgbDateAdapter, NgbDateNativeAdapter, NgbDateNativeUTCAdapter, NgbDatepicker, NgbInputDatepicker, NgbDropdownModule, NgbDropdownConfig, NgbDropdown, NgbModalModule, NgbModal, NgbModalConfig, NgbActiveModal, NgbModalRef, ModalDismissReasons, NgbPaginationModule, NgbPaginationConfig, NgbPagination, NgbPopoverModule, NgbPopoverConfig, NgbPopover, NgbProgressbarModule, NgbProgressbarConfig, NgbProgressbar, NgbRatingModule, NgbRatingConfig, NgbRating, NgbTabsetModule, NgbTabsetConfig, NgbTabset, NgbTab, NgbTabContent, NgbTabTitle, NgbTimepickerModule, NgbTimepickerConfig, NgbTimepicker, NgbTimeAdapter, NgbTooltipModule, NgbTooltipConfig, NgbTooltip, NgbHighlight, NgbTypeaheadModule, NgbTypeaheadConfig, NgbTypeahead, NgbModule, NgbButtonLabel as ɵa, NgbRadio as ɵb, NGB_CAROUSEL_DIRECTIVES as ɵc, NGB_DATEPICKER_DATE_ADAPTER_FACTORY as ɵl, NgbDateStructAdapter as ɵm, NgbDatepickerDayView as ɵg, NGB_DATEPICKER_18N_FACTORY as ɵj, NgbDatepickerI18nDefault as ɵk, NgbDatepickerKeyMapService as ɵy, NgbDatepickerMonthView as ɵf, NgbDatepickerNavigation as ɵh, NgbDatepickerNavigationSelect as ɵi, NgbDatepickerService as ɵx, NgbCalendarHijri as ɵbg, NGB_DATEPICKER_CALENDAR_FACTORY as ɵd, NgbCalendarGregorian as ɵe, NGB_DATEPICKER_PARSER_FORMATTER_FACTORY as ɵn, NgbDateISOParserFormatter as ɵo, NgbDropdownAnchor as ɵq, NgbDropdownMenu as ɵp, NgbDropdownToggle as ɵr, NgbModalBackdrop as ɵz, NgbModalStack as ɵbb, NgbModalWindow as ɵba, NgbPopoverWindow as ɵs, NGB_DATEPICKER_TIME_ADAPTER_FACTORY as ɵt, NgbTimeStructAdapter as ɵu, NgbTooltipWindow as ɵv, NgbTypeaheadWindow as ɵw, ARIA_LIVE_DELAY as ɵbd, ARIA_LIVE_DELAY_FACTORY as ɵbe, Live as ɵbf, ContentRef as ɵbh, ScrollBar as ɵbc };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"sourceRoot":""}